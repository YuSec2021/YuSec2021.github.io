{
    "version": "https://jsonfeed.org/version/1",
    "title": "YuSec2021",
    "subtitle": "YuSec Test RePWNCrypto",
    "icon": "https://yusec2021.github.io/images/favicon.ico",
    "description": "Record My Learning",
    "home_page_url": "https://YuSec2021.github.io",
    "items": [
        {
            "id": "https://yusec2021.github.io/2022/02/21/Splendid_MineCraft/",
            "url": "https://yusec2021.github.io/2022/02/21/Splendid_MineCraft/",
            "title": "ACTF新生赛2020 Splendid_MineCraft",
            "date_published": "2022-02-21T08:09:09.000Z",
            "content_html": "<h2 id=\"ACTF新生赛2020-Splendid-MineCraft\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-1\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-1\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-2\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-2\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-3\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-3\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-4\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-4\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-5\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-5\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-6\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-6\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-7\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-7\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-8\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-8\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-9\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-9\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-10\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-10\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-11\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-11\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-12\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-12\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-13\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-13\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-14\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-14\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>重新运行：</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-15\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-15\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>此时相等了，跳转不实现：</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-16\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-16\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-17\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-17\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>往下来到第二个部分的验证：</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-18\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-18\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-19\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-19\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-20\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-20\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-21\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-21\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-22\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-22\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-23\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-23\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-24\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-24\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-25\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-25\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-26\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-26\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-27\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-27\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-28\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-28\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>得到flag2：</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-29\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-29\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-30\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-30\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<h2 id=\"ACTF新生赛2020-Splendid-MineCraft-31\"><a href=\"#ACTF新生赛2020-Splendid-MineCraft-31\" class=\"headerlink\" title=\"[ACTF新生赛2020]Splendid_MineCraft\"></a>[ACTF新生赛2020]Splendid_MineCraft</h2><p>反编译源码：</p>\n<pre><code class=\"c\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  char *v3; // eax\n  char *v4; // eax\n  char v6; // [esp+0h] [ebp-68h]\n  int i; // [esp+14h] [ebp-54h]\n  char *v8; // [esp+18h] [ebp-50h]\n  char v9; // [esp+20h] [ebp-48h]\n  char flag[25]; // [esp+24h] [ebp-44h] BYREF\n  char v11[25]; // [esp+25h] [ebp-43h] BYREF\n  char v12; // [esp+3Dh] [ebp-2Bh]\n  int v13; // [esp+44h] [ebp-24h]\n  __int16 v14; // [esp+48h] [ebp-20h]\n  char v15[4]; // [esp+4Ch] [ebp-1Ch]\n  __int16 v16; // [esp+50h] [ebp-18h]\n  int v17; // [esp+54h] [ebp-14h] BYREF\n  __int16 v18; // [esp+58h] [ebp-10h]\n  int v19; // [esp+5Ch] [ebp-Ch]\n  __int16 v20; // [esp+60h] [ebp-8h]\n\n  sub_401020(&quot;%s\\n&quot;, (char)aWelcomeToActfS);\n  sub_401050(&quot;%s&quot;, (char)flag);\n  if ( &amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39; )\n  &#123;\n    v12 = 0;\n    v3 = strtok(flag, &quot;_&quot;);\n    v17 = *(_DWORD *)(v3 + 5);\n    v18 = *(_WORD *)(v3 + 9);\n    v19 = *(_DWORD *)(v3 + 5);\n    v20 = *(_WORD *)(v3 + 9);\n    v4 = strtok(0, &quot;_&quot;);\n    v13 = *(_DWORD *)v4;\n    v14 = *((_WORD *)v4 + 2);\n    v8 = strtok(0, &quot;_&quot;);\n    *(_DWORD *)v15 = *(_DWORD *)v8;\n    v16 = *((_WORD *)v8 + 2);\n    dword_403354 = (int)&amp;unk_4051D8;\n    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;v17) )\n    &#123;\n      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;\n      for ( i = 256; i &lt; 496; ++i )\n        byte_405018[i] ^= v9;\n      __asm &#123; jmp     eax &#125;\n    &#125;\n  &#125;\n  sub_401020(&quot;Wrong\\n&quot;, v6);\n  return 0;\n&#125;\n</code></pre>\n<p>条件判断：</p>\n<pre><code class=\"c\">&amp;flag[strlen(flag) + 1] - v11 == 26 &amp;&amp; !strncmp(flag, &quot;ACTF&#123;&quot;, 5u) &amp;&amp; v12 == &#39;&#125;&#39;\n</code></pre>\n<p>第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：</p>\n<pre><code>cyclic 26 -&gt; flag&#123;aaaabaaacaaadaaaeaaa&#125;\n</code></pre>\n<p><img data-src=\"/image-20211212181827825.png\" alt=\"image-20211212181827825\"></p>\n<p>后面两个判断就是判断flag的格式为：<code>ACTF&#123;xxxx&#125;</code></p>\n<p>strtok，用<code>_</code>将字符串分隔开，v3取的是最左边的一段字符，<code>ACTF&#123;xxxx</code>，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为<code>ACTF&#123;xxxxxx_xxxxxx_xxxxxx&#125;</code></p>\n<pre><code class=\"c\">v3 = strtok(flag, &quot;_&quot;);\nv17 = *(_DWORD *)(v3 + 5);\nv18 = *(_WORD *)(v3 + 9);\nv19 = *(_DWORD *)(v3 + 5);\nv20 = *(_WORD *)(v3 + 9);\nv4 = strtok(0, &quot;_&quot;);\nv13 = *(_DWORD *)v4;\nv14 = *((_WORD *)v4 + 2);\nv8 = strtok(0, &quot;_&quot;);\n*(_DWORD *)v15 = *(_DWORD *)v8;\nv16 = *((_WORD *)v8 + 2);\n</code></pre>\n<p>往下存在一个<code>unk_4051D8</code>：</p>\n<p><img data-src=\"/image-20211212183722900.png\" alt=\"image-20211212183722900\"></p>\n<p>发现把<code>unk_4051D8</code>当成函数执行：<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入<code>ACTF&#123;aaaaaa_bbbbbb_cccccc&#125;</code>，用x32dbg动态跟：</p>\n<p>第一个循环：</p>\n<p><img data-src=\"/image-20211212215926952.png\" alt=\"image-20211212215926952\"></p>\n<pre><code class=\"python\">esi = 0xE351DD\nfor edi in range(0, 0x151):\n    tmp = byte ptr [esi + edi + 0x1F]\n    [esi+edi+0x1F] = tmp ^ 0x72\n</code></pre>\n<p>异或结果：</p>\n<p><img data-src=\"/image-20211212230654068.png\" alt=\"image-20211212230654068\"></p>\n<p>看到EIP，发现就是通过循环解密出后面需要执行的字节码：</p>\n<p><img data-src=\"/image-20211212230935974.png\" alt=\"image-20211212230935974\"></p>\n<p>解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是<code>3@1b;b</code>，一个是<code>Welcome</code>：</p>\n<p><img data-src=\"/image-20211212231406269.png\" alt=\"image-20211212231406269\"></p>\n<p>往下对刚刚写入的字符串的进行循环异或，</p>\n<p><img data-src=\"/image-20211212231713546.png\" alt=\"image-20211212231713546\"></p>\n<pre><code class=\"python\">a = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nres = &#39;&#39;\nfor i in range(0, len(a)):\n    res += chr(a[i] ^ b[i] + 0x23)\n</code></pre>\n<p>6次循环后得到：<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211212233654525.png\" alt=\"image-20211212233654525\"></p>\n<p>最后出循环，test eax, eax，说明eax是作为函数执行结果，</p>\n<p><img data-src=\"/image-20211212234011240.png\" alt=\"image-20211212234011240\"></p>\n<p>重新运行执行输入：</p>\n<p><code>ACTF&#123;abcdef_hijklm_opqrst&#125;</code></p>\n<p>处理完第一个strtok之后会得到一个字符串为：<code>abcdefRvabcdef</code>，中间的Rv是固定的</p>\n<p><img data-src=\"/image-20211213232914763.png\" alt=\"image-20211213232914763\"></p>\n<p>三次strtok处理完之后会得到这样的结果：</p>\n<p><img data-src=\"/image-20211213233135397.png\" alt=\"image-20211213233135397\"></p>\n<p>然后来到字节码部分，注意传进来的字符串为：<code>abcdefRvabcdef</code></p>\n<p><img data-src=\"/image-20211213233228219.png\" alt=\"image-20211213233228219\"></p>\n<p>进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：</p>\n<p><img data-src=\"/image-20211213233405286.png\" alt=\"image-20211213233405286\"></p>\n<p>随后生成<code>3@1b;b</code>和<code>welcome</code>，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为<code>yOu0y*</code></p>\n<p><img data-src=\"/image-20211213233907366.png\" alt=\"image-20211213233907366\"></p>\n<p>重新运行：</p>\n<p><img data-src=\"/image-20211213234107801.png\" alt=\"image-20211213234107801\"></p>\n<p>此时相等了，跳转不实现：</p>\n<p><img data-src=\"/image-20211213234225491.png\" alt=\"image-20211213234225491\"></p>\n<p>将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：</p>\n<p><img data-src=\"/image-20211213234415857.png\" alt=\"image-20211213234415857\"></p>\n<p>往下来到第二个部分的验证：</p>\n<p><img data-src=\"/image-20211214101314551.png\" alt=\"image-20211214101314551\"></p>\n<pre><code>res = &#39;yOu0y*&#39;\nkey = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = \n</code></pre>\n<p><img data-src=\"/image-20211215110249558.png\" alt=\"image-20211215110249558\"></p>\n<p>异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:</p>\n<p><img data-src=\"/image-20211215085046486.png\" alt=\"image-20211215085046486\"></p>\n<p><img data-src=\"/image-20211215085805863.png\" alt=\"image-20211215085805863\"></p>\n<p>开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：</p>\n<p><img data-src=\"/image-20211215091013268.png\" alt=\"image-20211215091013268\"></p>\n<p>往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：</p>\n<p><img data-src=\"/image-20211215091206850.png\" alt=\"image-20211215091206850\"></p>\n<p>往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：</p>\n<p><img data-src=\"/image-20211215091509928.png\" alt=\"image-20211215091509928\"></p>\n<p>edi作为计数器，回到异或之前可以看到ecx的值来自于edi：</p>\n<p><img data-src=\"/image-20211215092843105.png\" alt=\"image-20211215092843105\"></p>\n<p><img data-src=\"/image-20211215092045179.png\" alt=\"image-20211215092045179\"></p>\n<p><img data-src=\"/image-20211215111022353.png\" alt=\"image-20211215111022353\"></p>\n<p>得到异或逻辑为：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;xxxxxx&#39;\nbyte_405018 = [...]\nfor i in range(0, len(flag2)):\n    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])\n</code></pre>\n<p>exp：</p>\n<pre><code class=\"python\">res2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [...]\nfor i in range(0, len(res2)):\n  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n</code></pre>\n<p>byte_405018，用Ghidra的字节复制复制下来：</p>\n<pre><code class=\"python\">[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\n</code></pre>\n<p><img data-src=\"/image-20211215103806688.png\" alt=\"image-20211215103806688\"></p>\n<p>得到flag2：</p>\n<p><img data-src=\"/image-20211215113140388.png\" alt=\"image-20211215113140388\"></p>\n<p>第三部分字符串发现就是直接进行strncmp:</p>\n<p><img data-src=\"/image-20211215113450451.png\" alt=\"image-20211215113450451\"></p>\n<p>可以得到第三部分的字符串为：<code>5mcsM&lt;</code>，最终flag：</p>\n<pre><code class=\"f\">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;\n</code></pre>\n<pre><code class=\"python\">flag_prefix = &#39;ACTF&#123;&#39;\nflag_suffix = &#39;&#125;&#39;\nflag3 = &#39;5mcsM&lt;&#39;\n\na = &#39;3@1b;b&#39;\nb = &#39;elcome&#39;\nflag1 = &#39;&#39;\nfor i in range(0, len(a)):    \n    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)\n\nres2 = [0x30,4,4,3,0x30,0x63]\nflag2 = &#39;&#39;\nbyte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]\nfor i in range(0, len(res2)):\n    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))\n\n\nflag = flag_prefix + flag1 + &#39;_&#39; + flag2 + &#39;_&#39; + flag3 + flag_suffix\nprint(flag)\n</code></pre>\n<p><img data-src=\"/image-20211215115036210.png\" alt=\"image-20211215115036210\"></p>\n",
            "tags": [
                "Reverse"
            ]
        },
        {
            "id": "https://yusec2021.github.io/2022/02/17/VirtualFunction/",
            "url": "https://yusec2021.github.io/2022/02/17/VirtualFunction/",
            "title": "虚函数以及虚表在IDA中的体现",
            "date_published": "2022-02-17T10:00:09.000Z",
            "content_html": "<h2 id=\"Reverse中虚函数-x2F-虚表浅析\"><a href=\"#Reverse中虚函数-x2F-虚表浅析\" class=\"headerlink\" title=\"Reverse中虚函数&#x2F;虚表浅析\"></a>Reverse中虚函数&#x2F;虚表浅析</h2><h3 id=\"this指针\"><a href=\"#this指针\" class=\"headerlink\" title=\"this指针\"></a>this指针</h3><p>在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：</p>\n<p>一个简单的demo来测试一下this指针：</p>\n<pre><code class=\"c\">int main() &#123;\n    struct Test&#123;\n        int a;\n        int b;\n        int c;\n    &#125;;\n    Test* test = new Test;\n    test-&gt;a = 100;\n    printf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：</p>\n<h2 id=\"Reverse中虚函数-x2F-虚表浅析-1\"><a href=\"#Reverse中虚函数-x2F-虚表浅析-1\" class=\"headerlink\" title=\"Reverse中虚函数&#x2F;虚表浅析\"></a>Reverse中虚函数&#x2F;虚表浅析</h2><h3 id=\"this指针-1\"><a href=\"#this指针-1\" class=\"headerlink\" title=\"this指针\"></a>this指针</h3><p>在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：</p>\n<p>一个简单的demo来测试一下this指针：</p>\n<pre><code class=\"c\">int main() &#123;\n    struct Test&#123;\n        int a;\n        int b;\n        int c;\n    &#125;;\n    Test* test = new Test;\n    test-&gt;a = 100;\n    printf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-202202221821809\"></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同</strong></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-202202221821374\"></p>\n<p>demo2：</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n\nstruct Test &#123;\n    int a;\n    int b;\n    int c;\n    virtual void func1();\n    virtual void func2();\n    virtual void func3();\n\n&#125;;\n\nvoid Test::func1() &#123;\n    printf(&quot;func1&quot;);\n&#125;\n\nvoid Test::func2() &#123;\n    printf(&quot;func2&quot;);\n&#125;\n\nvoid Test::func3() &#123;\n    printf(&quot;func3&quot;);\n&#125;\n\nint main() &#123;\n\n    Test* test = new Test;\n    test-&gt;a = 100;\n    test-&gt;func1();\n    printf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为<code>func1</code>、<code>func2</code>、<code>func3</code>，我们注意到这里call的函数内容来自<code>[edx]</code>、<code>[edx+4]</code>、<code>[edx+8]</code></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-202202221822350\"></p>\n<p>VS的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类or结构体中，如果其虚函数的数量大于1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-202202221822816\"></p>\n<p>但是在VS中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-202202221822113\"></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-202202221822536\"></p>\n<h3 id=\"IDA加载该程序\"><a href=\"#IDA加载该程序\" class=\"headerlink\" title=\"IDA加载该程序\"></a>IDA加载该程序</h3><p>直接来到main函数：</p>\n<pre><code class=\"c\">int __cdecl main_0(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD *v4; // [esp+Ch] [ebp-DCh]\n  void *v5; // [esp+14h] [ebp-D4h]\n  _DWORD *v6; // [esp+E0h] [ebp-8h]\n\n  __CheckForDebuggerJustMyCode(&amp;unk_41C066);\n  v5 = operator new(0x10u);\n  if ( v5 )\n    v4 = (_DWORD *)sub_411460(v5);\n  else\n    v4 = 0;\n  v6 = v4;\n  v4[1] = 100;\n  (*(void (__thiscall **)(_DWORD *))*v6)(v6);\n  (*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n  (*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n  sub_411442(&quot;%d&quot;, *v4);\n  return 0;\n&#125;\n</code></pre>\n<p>根据源码，这一部分就是虚函数调用在IDA中的反编译结果：</p>\n<pre><code class=\"c++\">(*(void (__thiscall **)(_DWORD *))*v6)(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n</code></pre>\n<p>这里v6是指向v4，来到v4的初始化，可以看到存在一个<code>virtual function table</code>也就是虚函数表：</p>\n<pre><code class=\"c++\">_DWORD *__thiscall sub_411880(_DWORD *this)\n&#123;\n  *this = &amp;Test::`vftable&#39;;\n  return this;\n&#125;\n</code></pre>\n<p>根据前面VS中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-202202221822914\"></p>\n<p>基本上关于虚函数在IDA中的体现就介绍完了</p>\n<h3 id=\"一道逆向题\"><a href=\"#一道逆向题\" class=\"headerlink\" title=\"一道逆向题\"></a>一道逆向题</h3><p>SWPUCTF2019 easyRE，同样来到main函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<pre><code class=\"c++\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF\n  _DWORD *v5; // [esp+4h] [ebp-88h]\n  _DWORD *v6; // [esp+8h] [ebp-84h]\n  int v7; // [esp+Ch] [ebp-80h]\n  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF\n  int v9; // [esp+88h] [ebp-4h]\n\n  if ( sub_40EF90() )\n    return 1;\n  sub_4026C0(0x6Cu);\n  sub_401FE0(v4[27], v5);\n  v9 = 0;\n  v6 = v4;\n  sub_40F360(v8);\n  sub_40F080(v4[0], v4[1]);\n  v5 = v4;\n  sub_40F360(v8);\n  sub_40F150(argc, (int)argv);\n  v7 = 0;\n  v9 = -1;\n  sub_4021C0(v8);\n  return v7;\n&#125;\n</code></pre>\n<p>进入sub_401FE0:</p>\n<pre><code class=\"c++\">_DWORD *__thiscall sub_401FE0(_DWORD *this)\n&#123;\n  int i; // [esp+4h] [ebp-14h]\n\n  *this = &amp;EASYRE::`vftable&#39;;\n  this[1] = 0;\n  *((_BYTE *)this + 52) = 8;\n  *((_BYTE *)this + 53) = -22;\n  *((_BYTE *)this + 54) = 88;\n  *((_BYTE *)this + 55) = -34;\n  *((_BYTE *)this + 56) = -108;\n  *((_BYTE *)this + 57) = -48;\n  *((_BYTE *)this + 58) = 59;\n  *((_BYTE *)this + 59) = -66;\n  *((_BYTE *)this + 60) = -120;\n  *((_BYTE *)this + 61) = -44;\n  *((_BYTE *)this + 62) = 50;\n  *((_BYTE *)this + 63) = -74;\n  *((_BYTE *)this + 64) = 20;\n  *((_BYTE *)this + 65) = -126;\n  *((_BYTE *)this + 66) = -73;\n  *((_BYTE *)this + 67) = -81;\n  *((_BYTE *)this + 68) = 20;\n  *((_BYTE *)this + 69) = 84;\n  *((_BYTE *)this + 70) = 127;\n  *((_BYTE *)this + 71) = -49;\n  qmemcpy(this + 18, &quot;  03\\&quot;3   0 203\\&quot;   $ &quot;, 20);\n  sub_4030A0(this + 23);\n  sub_402DE0(this + 26);\n  for ( i = 0; i &lt; 40; ++i )\n    *((_BYTE *)this + i + 12) = 0;\n  return this;\n&#125;\n</code></pre>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-202202221822478\"></p>\n<p>来到校验flag的函数，可以发现存在虚函数的特征：</p>\n<pre><code class=\"c++\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )\n  &#123;\n    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);\n    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>这里this指针指向的首地址是<code>0x4124E4</code>，根据偏移可以映射：</p>\n<pre><code class=\"c++\">(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&gt; 0x4124F0 -&gt; sub_402500\n(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&gt; 0x4124FC -&gt; sub_4026E0\n(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&gt; 0x41250C -&gt; sub_402A00\n</code></pre>\n<p>映射：</p>\n<pre><code class=\"c\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( sub_402500() )\n  &#123;\n    sub_4026E0();\n    if ( sub_402A00() )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p><strong>关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同</strong></p>\n<h2 id=\"Reverse中虚函数-x2F-虚表浅析-2\"><a href=\"#Reverse中虚函数-x2F-虚表浅析-2\" class=\"headerlink\" title=\"Reverse中虚函数&#x2F;虚表浅析\"></a>Reverse中虚函数&#x2F;虚表浅析</h2><h3 id=\"this指针-2\"><a href=\"#this指针-2\" class=\"headerlink\" title=\"this指针\"></a>this指针</h3><p>在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：</p>\n<p>一个简单的demo来测试一下this指针：</p>\n<pre><code class=\"c\">int main() &#123;\n    struct Test&#123;\n        int a;\n        int b;\n        int c;\n    &#125;;\n    Test* test = new Test;\n    test-&gt;a = 100;\n    printf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-202202221821809\"></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同</strong></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-202202221821374\"></p>\n<p>demo2：</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n\nstruct Test &#123;\n    int a;\n    int b;\n    int c;\n    virtual void func1();\n    virtual void func2();\n    virtual void func3();\n\n&#125;;\n\nvoid Test::func1() &#123;\n    printf(&quot;func1&quot;);\n&#125;\n\nvoid Test::func2() &#123;\n    printf(&quot;func2&quot;);\n&#125;\n\nvoid Test::func3() &#123;\n    printf(&quot;func3&quot;);\n&#125;\n\nint main() &#123;\n\n    Test* test = new Test;\n    test-&gt;a = 100;\n    test-&gt;func1();\n    printf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为<code>func1</code>、<code>func2</code>、<code>func3</code>，我们注意到这里call的函数内容来自<code>[edx]</code>、<code>[edx+4]</code>、<code>[edx+8]</code></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-202202221822350\"></p>\n<p>VS的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类or结构体中，如果其虚函数的数量大于1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-202202221822816\"></p>\n<p>但是在VS中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-202202221822113\"></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-202202221822536\"></p>\n<h3 id=\"IDA加载该程序-1\"><a href=\"#IDA加载该程序-1\" class=\"headerlink\" title=\"IDA加载该程序\"></a>IDA加载该程序</h3><p>直接来到main函数：</p>\n<pre><code class=\"c\">int __cdecl main_0(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD *v4; // [esp+Ch] [ebp-DCh]\n  void *v5; // [esp+14h] [ebp-D4h]\n  _DWORD *v6; // [esp+E0h] [ebp-8h]\n\n  __CheckForDebuggerJustMyCode(&amp;unk_41C066);\n  v5 = operator new(0x10u);\n  if ( v5 )\n    v4 = (_DWORD *)sub_411460(v5);\n  else\n    v4 = 0;\n  v6 = v4;\n  v4[1] = 100;\n  (*(void (__thiscall **)(_DWORD *))*v6)(v6);\n  (*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n  (*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n  sub_411442(&quot;%d&quot;, *v4);\n  return 0;\n&#125;\n</code></pre>\n<p>根据源码，这一部分就是虚函数调用在IDA中的反编译结果：</p>\n<pre><code class=\"c++\">(*(void (__thiscall **)(_DWORD *))*v6)(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n</code></pre>\n<p>这里v6是指向v4，来到v4的初始化，可以看到存在一个<code>virtual function table</code>也就是虚函数表：</p>\n<pre><code class=\"c++\">_DWORD *__thiscall sub_411880(_DWORD *this)\n&#123;\n  *this = &amp;Test::`vftable&#39;;\n  return this;\n&#125;\n</code></pre>\n<p>根据前面VS中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-202202221822914\"></p>\n<p>基本上关于虚函数在IDA中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-1\"><a href=\"#一道逆向题-1\" class=\"headerlink\" title=\"一道逆向题\"></a>一道逆向题</h3><p>SWPUCTF2019 easyRE，同样来到main函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<pre><code class=\"c++\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF\n  _DWORD *v5; // [esp+4h] [ebp-88h]\n  _DWORD *v6; // [esp+8h] [ebp-84h]\n  int v7; // [esp+Ch] [ebp-80h]\n  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF\n  int v9; // [esp+88h] [ebp-4h]\n\n  if ( sub_40EF90() )\n    return 1;\n  sub_4026C0(0x6Cu);\n  sub_401FE0(v4[27], v5);\n  v9 = 0;\n  v6 = v4;\n  sub_40F360(v8);\n  sub_40F080(v4[0], v4[1]);\n  v5 = v4;\n  sub_40F360(v8);\n  sub_40F150(argc, (int)argv);\n  v7 = 0;\n  v9 = -1;\n  sub_4021C0(v8);\n  return v7;\n&#125;\n</code></pre>\n<p>进入sub_401FE0:</p>\n<pre><code class=\"c++\">_DWORD *__thiscall sub_401FE0(_DWORD *this)\n&#123;\n  int i; // [esp+4h] [ebp-14h]\n\n  *this = &amp;EASYRE::`vftable&#39;;\n  this[1] = 0;\n  *((_BYTE *)this + 52) = 8;\n  *((_BYTE *)this + 53) = -22;\n  *((_BYTE *)this + 54) = 88;\n  *((_BYTE *)this + 55) = -34;\n  *((_BYTE *)this + 56) = -108;\n  *((_BYTE *)this + 57) = -48;\n  *((_BYTE *)this + 58) = 59;\n  *((_BYTE *)this + 59) = -66;\n  *((_BYTE *)this + 60) = -120;\n  *((_BYTE *)this + 61) = -44;\n  *((_BYTE *)this + 62) = 50;\n  *((_BYTE *)this + 63) = -74;\n  *((_BYTE *)this + 64) = 20;\n  *((_BYTE *)this + 65) = -126;\n  *((_BYTE *)this + 66) = -73;\n  *((_BYTE *)this + 67) = -81;\n  *((_BYTE *)this + 68) = 20;\n  *((_BYTE *)this + 69) = 84;\n  *((_BYTE *)this + 70) = 127;\n  *((_BYTE *)this + 71) = -49;\n  qmemcpy(this + 18, &quot;  03\\&quot;3   0 203\\&quot;   $ &quot;, 20);\n  sub_4030A0(this + 23);\n  sub_402DE0(this + 26);\n  for ( i = 0; i &lt; 40; ++i )\n    *((_BYTE *)this + i + 12) = 0;\n  return this;\n&#125;\n</code></pre>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-202202221822478\"></p>\n<p>来到校验flag的函数，可以发现存在虚函数的特征：</p>\n<pre><code class=\"c++\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )\n  &#123;\n    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);\n    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>这里this指针指向的首地址是<code>0x4124E4</code>，根据偏移可以映射：</p>\n<pre><code class=\"c++\">(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&gt; 0x4124F0 -&gt; sub_402500\n(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&gt; 0x4124FC -&gt; sub_4026E0\n(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&gt; 0x41250C -&gt; sub_402A00\n</code></pre>\n<p>映射：</p>\n<pre><code class=\"c\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( sub_402500() )\n  &#123;\n    sub_4026E0();\n    if ( sub_402A00() )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>demo2：</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n\nstruct Test &#123;\n    int a;\n    int b;\n    int c;\n    virtual void func1();\n    virtual void func2();\n    virtual void func3();\n\n&#125;;\n\nvoid Test::func1() &#123;\n    printf(&quot;func1&quot;);\n&#125;\n\nvoid Test::func2() &#123;\n    printf(&quot;func2&quot;);\n&#125;\n\nvoid Test::func3() &#123;\n    printf(&quot;func3&quot;);\n&#125;\n\nint main() &#123;\n\n    Test* test = new Test;\n    test-&gt;a = 100;\n    test-&gt;func1();\n    printf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为<code>func1</code>、<code>func2</code>、<code>func3</code>，我们注意到这里call的函数内容来自<code>[edx]</code>、<code>[edx+4]</code>、<code>[edx+8]</code></p>\n<h2 id=\"Reverse中虚函数-x2F-虚表浅析-3\"><a href=\"#Reverse中虚函数-x2F-虚表浅析-3\" class=\"headerlink\" title=\"Reverse中虚函数&#x2F;虚表浅析\"></a>Reverse中虚函数&#x2F;虚表浅析</h2><h3 id=\"this指针-3\"><a href=\"#this指针-3\" class=\"headerlink\" title=\"this指针\"></a>this指针</h3><p>在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：</p>\n<p>一个简单的demo来测试一下this指针：</p>\n<pre><code class=\"c\">int main() &#123;\n    struct Test&#123;\n        int a;\n        int b;\n        int c;\n    &#125;;\n    Test* test = new Test;\n    test-&gt;a = 100;\n    printf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-202202221821809\"></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同</strong></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-202202221821374\"></p>\n<p>demo2：</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n\nstruct Test &#123;\n    int a;\n    int b;\n    int c;\n    virtual void func1();\n    virtual void func2();\n    virtual void func3();\n\n&#125;;\n\nvoid Test::func1() &#123;\n    printf(&quot;func1&quot;);\n&#125;\n\nvoid Test::func2() &#123;\n    printf(&quot;func2&quot;);\n&#125;\n\nvoid Test::func3() &#123;\n    printf(&quot;func3&quot;);\n&#125;\n\nint main() &#123;\n\n    Test* test = new Test;\n    test-&gt;a = 100;\n    test-&gt;func1();\n    printf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为<code>func1</code>、<code>func2</code>、<code>func3</code>，我们注意到这里call的函数内容来自<code>[edx]</code>、<code>[edx+4]</code>、<code>[edx+8]</code></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-202202221822350\"></p>\n<p>VS的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类or结构体中，如果其虚函数的数量大于1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-202202221822816\"></p>\n<p>但是在VS中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-202202221822113\"></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-202202221822536\"></p>\n<h3 id=\"IDA加载该程序-2\"><a href=\"#IDA加载该程序-2\" class=\"headerlink\" title=\"IDA加载该程序\"></a>IDA加载该程序</h3><p>直接来到main函数：</p>\n<pre><code class=\"c\">int __cdecl main_0(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD *v4; // [esp+Ch] [ebp-DCh]\n  void *v5; // [esp+14h] [ebp-D4h]\n  _DWORD *v6; // [esp+E0h] [ebp-8h]\n\n  __CheckForDebuggerJustMyCode(&amp;unk_41C066);\n  v5 = operator new(0x10u);\n  if ( v5 )\n    v4 = (_DWORD *)sub_411460(v5);\n  else\n    v4 = 0;\n  v6 = v4;\n  v4[1] = 100;\n  (*(void (__thiscall **)(_DWORD *))*v6)(v6);\n  (*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n  (*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n  sub_411442(&quot;%d&quot;, *v4);\n  return 0;\n&#125;\n</code></pre>\n<p>根据源码，这一部分就是虚函数调用在IDA中的反编译结果：</p>\n<pre><code class=\"c++\">(*(void (__thiscall **)(_DWORD *))*v6)(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n</code></pre>\n<p>这里v6是指向v4，来到v4的初始化，可以看到存在一个<code>virtual function table</code>也就是虚函数表：</p>\n<pre><code class=\"c++\">_DWORD *__thiscall sub_411880(_DWORD *this)\n&#123;\n  *this = &amp;Test::`vftable&#39;;\n  return this;\n&#125;\n</code></pre>\n<p>根据前面VS中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-202202221822914\"></p>\n<p>基本上关于虚函数在IDA中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-2\"><a href=\"#一道逆向题-2\" class=\"headerlink\" title=\"一道逆向题\"></a>一道逆向题</h3><p>SWPUCTF2019 easyRE，同样来到main函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<pre><code class=\"c++\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF\n  _DWORD *v5; // [esp+4h] [ebp-88h]\n  _DWORD *v6; // [esp+8h] [ebp-84h]\n  int v7; // [esp+Ch] [ebp-80h]\n  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF\n  int v9; // [esp+88h] [ebp-4h]\n\n  if ( sub_40EF90() )\n    return 1;\n  sub_4026C0(0x6Cu);\n  sub_401FE0(v4[27], v5);\n  v9 = 0;\n  v6 = v4;\n  sub_40F360(v8);\n  sub_40F080(v4[0], v4[1]);\n  v5 = v4;\n  sub_40F360(v8);\n  sub_40F150(argc, (int)argv);\n  v7 = 0;\n  v9 = -1;\n  sub_4021C0(v8);\n  return v7;\n&#125;\n</code></pre>\n<p>进入sub_401FE0:</p>\n<pre><code class=\"c++\">_DWORD *__thiscall sub_401FE0(_DWORD *this)\n&#123;\n  int i; // [esp+4h] [ebp-14h]\n\n  *this = &amp;EASYRE::`vftable&#39;;\n  this[1] = 0;\n  *((_BYTE *)this + 52) = 8;\n  *((_BYTE *)this + 53) = -22;\n  *((_BYTE *)this + 54) = 88;\n  *((_BYTE *)this + 55) = -34;\n  *((_BYTE *)this + 56) = -108;\n  *((_BYTE *)this + 57) = -48;\n  *((_BYTE *)this + 58) = 59;\n  *((_BYTE *)this + 59) = -66;\n  *((_BYTE *)this + 60) = -120;\n  *((_BYTE *)this + 61) = -44;\n  *((_BYTE *)this + 62) = 50;\n  *((_BYTE *)this + 63) = -74;\n  *((_BYTE *)this + 64) = 20;\n  *((_BYTE *)this + 65) = -126;\n  *((_BYTE *)this + 66) = -73;\n  *((_BYTE *)this + 67) = -81;\n  *((_BYTE *)this + 68) = 20;\n  *((_BYTE *)this + 69) = 84;\n  *((_BYTE *)this + 70) = 127;\n  *((_BYTE *)this + 71) = -49;\n  qmemcpy(this + 18, &quot;  03\\&quot;3   0 203\\&quot;   $ &quot;, 20);\n  sub_4030A0(this + 23);\n  sub_402DE0(this + 26);\n  for ( i = 0; i &lt; 40; ++i )\n    *((_BYTE *)this + i + 12) = 0;\n  return this;\n&#125;\n</code></pre>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-202202221822478\"></p>\n<p>来到校验flag的函数，可以发现存在虚函数的特征：</p>\n<pre><code class=\"c++\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )\n  &#123;\n    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);\n    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>这里this指针指向的首地址是<code>0x4124E4</code>，根据偏移可以映射：</p>\n<pre><code class=\"c++\">(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&gt; 0x4124F0 -&gt; sub_402500\n(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&gt; 0x4124FC -&gt; sub_4026E0\n(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&gt; 0x41250C -&gt; sub_402A00\n</code></pre>\n<p>映射：</p>\n<pre><code class=\"c\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( sub_402500() )\n  &#123;\n    sub_4026E0();\n    if ( sub_402A00() )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>VS的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类or结构体中，如果其虚函数的数量大于1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<h2 id=\"Reverse中虚函数-x2F-虚表浅析-4\"><a href=\"#Reverse中虚函数-x2F-虚表浅析-4\" class=\"headerlink\" title=\"Reverse中虚函数&#x2F;虚表浅析\"></a>Reverse中虚函数&#x2F;虚表浅析</h2><h3 id=\"this指针-4\"><a href=\"#this指针-4\" class=\"headerlink\" title=\"this指针\"></a>this指针</h3><p>在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：</p>\n<p>一个简单的demo来测试一下this指针：</p>\n<pre><code class=\"c\">int main() &#123;\n    struct Test&#123;\n        int a;\n        int b;\n        int c;\n    &#125;;\n    Test* test = new Test;\n    test-&gt;a = 100;\n    printf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-202202221821809\"></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同</strong></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-202202221821374\"></p>\n<p>demo2：</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n\nstruct Test &#123;\n    int a;\n    int b;\n    int c;\n    virtual void func1();\n    virtual void func2();\n    virtual void func3();\n\n&#125;;\n\nvoid Test::func1() &#123;\n    printf(&quot;func1&quot;);\n&#125;\n\nvoid Test::func2() &#123;\n    printf(&quot;func2&quot;);\n&#125;\n\nvoid Test::func3() &#123;\n    printf(&quot;func3&quot;);\n&#125;\n\nint main() &#123;\n\n    Test* test = new Test;\n    test-&gt;a = 100;\n    test-&gt;func1();\n    printf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为<code>func1</code>、<code>func2</code>、<code>func3</code>，我们注意到这里call的函数内容来自<code>[edx]</code>、<code>[edx+4]</code>、<code>[edx+8]</code></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-202202221822350\"></p>\n<p>VS的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类or结构体中，如果其虚函数的数量大于1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-202202221822816\"></p>\n<p>但是在VS中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-202202221822113\"></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-202202221822536\"></p>\n<h3 id=\"IDA加载该程序-3\"><a href=\"#IDA加载该程序-3\" class=\"headerlink\" title=\"IDA加载该程序\"></a>IDA加载该程序</h3><p>直接来到main函数：</p>\n<pre><code class=\"c\">int __cdecl main_0(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD *v4; // [esp+Ch] [ebp-DCh]\n  void *v5; // [esp+14h] [ebp-D4h]\n  _DWORD *v6; // [esp+E0h] [ebp-8h]\n\n  __CheckForDebuggerJustMyCode(&amp;unk_41C066);\n  v5 = operator new(0x10u);\n  if ( v5 )\n    v4 = (_DWORD *)sub_411460(v5);\n  else\n    v4 = 0;\n  v6 = v4;\n  v4[1] = 100;\n  (*(void (__thiscall **)(_DWORD *))*v6)(v6);\n  (*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n  (*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n  sub_411442(&quot;%d&quot;, *v4);\n  return 0;\n&#125;\n</code></pre>\n<p>根据源码，这一部分就是虚函数调用在IDA中的反编译结果：</p>\n<pre><code class=\"c++\">(*(void (__thiscall **)(_DWORD *))*v6)(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n</code></pre>\n<p>这里v6是指向v4，来到v4的初始化，可以看到存在一个<code>virtual function table</code>也就是虚函数表：</p>\n<pre><code class=\"c++\">_DWORD *__thiscall sub_411880(_DWORD *this)\n&#123;\n  *this = &amp;Test::`vftable&#39;;\n  return this;\n&#125;\n</code></pre>\n<p>根据前面VS中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-202202221822914\"></p>\n<p>基本上关于虚函数在IDA中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-3\"><a href=\"#一道逆向题-3\" class=\"headerlink\" title=\"一道逆向题\"></a>一道逆向题</h3><p>SWPUCTF2019 easyRE，同样来到main函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<pre><code class=\"c++\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF\n  _DWORD *v5; // [esp+4h] [ebp-88h]\n  _DWORD *v6; // [esp+8h] [ebp-84h]\n  int v7; // [esp+Ch] [ebp-80h]\n  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF\n  int v9; // [esp+88h] [ebp-4h]\n\n  if ( sub_40EF90() )\n    return 1;\n  sub_4026C0(0x6Cu);\n  sub_401FE0(v4[27], v5);\n  v9 = 0;\n  v6 = v4;\n  sub_40F360(v8);\n  sub_40F080(v4[0], v4[1]);\n  v5 = v4;\n  sub_40F360(v8);\n  sub_40F150(argc, (int)argv);\n  v7 = 0;\n  v9 = -1;\n  sub_4021C0(v8);\n  return v7;\n&#125;\n</code></pre>\n<p>进入sub_401FE0:</p>\n<pre><code class=\"c++\">_DWORD *__thiscall sub_401FE0(_DWORD *this)\n&#123;\n  int i; // [esp+4h] [ebp-14h]\n\n  *this = &amp;EASYRE::`vftable&#39;;\n  this[1] = 0;\n  *((_BYTE *)this + 52) = 8;\n  *((_BYTE *)this + 53) = -22;\n  *((_BYTE *)this + 54) = 88;\n  *((_BYTE *)this + 55) = -34;\n  *((_BYTE *)this + 56) = -108;\n  *((_BYTE *)this + 57) = -48;\n  *((_BYTE *)this + 58) = 59;\n  *((_BYTE *)this + 59) = -66;\n  *((_BYTE *)this + 60) = -120;\n  *((_BYTE *)this + 61) = -44;\n  *((_BYTE *)this + 62) = 50;\n  *((_BYTE *)this + 63) = -74;\n  *((_BYTE *)this + 64) = 20;\n  *((_BYTE *)this + 65) = -126;\n  *((_BYTE *)this + 66) = -73;\n  *((_BYTE *)this + 67) = -81;\n  *((_BYTE *)this + 68) = 20;\n  *((_BYTE *)this + 69) = 84;\n  *((_BYTE *)this + 70) = 127;\n  *((_BYTE *)this + 71) = -49;\n  qmemcpy(this + 18, &quot;  03\\&quot;3   0 203\\&quot;   $ &quot;, 20);\n  sub_4030A0(this + 23);\n  sub_402DE0(this + 26);\n  for ( i = 0; i &lt; 40; ++i )\n    *((_BYTE *)this + i + 12) = 0;\n  return this;\n&#125;\n</code></pre>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-202202221822478\"></p>\n<p>来到校验flag的函数，可以发现存在虚函数的特征：</p>\n<pre><code class=\"c++\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )\n  &#123;\n    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);\n    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>这里this指针指向的首地址是<code>0x4124E4</code>，根据偏移可以映射：</p>\n<pre><code class=\"c++\">(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&gt; 0x4124F0 -&gt; sub_402500\n(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&gt; 0x4124FC -&gt; sub_4026E0\n(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&gt; 0x41250C -&gt; sub_402A00\n</code></pre>\n<p>映射：</p>\n<pre><code class=\"c\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( sub_402500() )\n  &#123;\n    sub_4026E0();\n    if ( sub_402A00() )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>但是在VS中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<h2 id=\"Reverse中虚函数-x2F-虚表浅析-5\"><a href=\"#Reverse中虚函数-x2F-虚表浅析-5\" class=\"headerlink\" title=\"Reverse中虚函数&#x2F;虚表浅析\"></a>Reverse中虚函数&#x2F;虚表浅析</h2><h3 id=\"this指针-5\"><a href=\"#this指针-5\" class=\"headerlink\" title=\"this指针\"></a>this指针</h3><p>在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：</p>\n<p>一个简单的demo来测试一下this指针：</p>\n<pre><code class=\"c\">int main() &#123;\n    struct Test&#123;\n        int a;\n        int b;\n        int c;\n    &#125;;\n    Test* test = new Test;\n    test-&gt;a = 100;\n    printf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-202202221821809\"></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同</strong></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-202202221821374\"></p>\n<p>demo2：</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n\nstruct Test &#123;\n    int a;\n    int b;\n    int c;\n    virtual void func1();\n    virtual void func2();\n    virtual void func3();\n\n&#125;;\n\nvoid Test::func1() &#123;\n    printf(&quot;func1&quot;);\n&#125;\n\nvoid Test::func2() &#123;\n    printf(&quot;func2&quot;);\n&#125;\n\nvoid Test::func3() &#123;\n    printf(&quot;func3&quot;);\n&#125;\n\nint main() &#123;\n\n    Test* test = new Test;\n    test-&gt;a = 100;\n    test-&gt;func1();\n    printf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为<code>func1</code>、<code>func2</code>、<code>func3</code>，我们注意到这里call的函数内容来自<code>[edx]</code>、<code>[edx+4]</code>、<code>[edx+8]</code></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-202202221822350\"></p>\n<p>VS的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类or结构体中，如果其虚函数的数量大于1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-202202221822816\"></p>\n<p>但是在VS中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-202202221822113\"></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-202202221822536\"></p>\n<h3 id=\"IDA加载该程序-4\"><a href=\"#IDA加载该程序-4\" class=\"headerlink\" title=\"IDA加载该程序\"></a>IDA加载该程序</h3><p>直接来到main函数：</p>\n<pre><code class=\"c\">int __cdecl main_0(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD *v4; // [esp+Ch] [ebp-DCh]\n  void *v5; // [esp+14h] [ebp-D4h]\n  _DWORD *v6; // [esp+E0h] [ebp-8h]\n\n  __CheckForDebuggerJustMyCode(&amp;unk_41C066);\n  v5 = operator new(0x10u);\n  if ( v5 )\n    v4 = (_DWORD *)sub_411460(v5);\n  else\n    v4 = 0;\n  v6 = v4;\n  v4[1] = 100;\n  (*(void (__thiscall **)(_DWORD *))*v6)(v6);\n  (*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n  (*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n  sub_411442(&quot;%d&quot;, *v4);\n  return 0;\n&#125;\n</code></pre>\n<p>根据源码，这一部分就是虚函数调用在IDA中的反编译结果：</p>\n<pre><code class=\"c++\">(*(void (__thiscall **)(_DWORD *))*v6)(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n</code></pre>\n<p>这里v6是指向v4，来到v4的初始化，可以看到存在一个<code>virtual function table</code>也就是虚函数表：</p>\n<pre><code class=\"c++\">_DWORD *__thiscall sub_411880(_DWORD *this)\n&#123;\n  *this = &amp;Test::`vftable&#39;;\n  return this;\n&#125;\n</code></pre>\n<p>根据前面VS中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-202202221822914\"></p>\n<p>基本上关于虚函数在IDA中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-4\"><a href=\"#一道逆向题-4\" class=\"headerlink\" title=\"一道逆向题\"></a>一道逆向题</h3><p>SWPUCTF2019 easyRE，同样来到main函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<pre><code class=\"c++\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF\n  _DWORD *v5; // [esp+4h] [ebp-88h]\n  _DWORD *v6; // [esp+8h] [ebp-84h]\n  int v7; // [esp+Ch] [ebp-80h]\n  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF\n  int v9; // [esp+88h] [ebp-4h]\n\n  if ( sub_40EF90() )\n    return 1;\n  sub_4026C0(0x6Cu);\n  sub_401FE0(v4[27], v5);\n  v9 = 0;\n  v6 = v4;\n  sub_40F360(v8);\n  sub_40F080(v4[0], v4[1]);\n  v5 = v4;\n  sub_40F360(v8);\n  sub_40F150(argc, (int)argv);\n  v7 = 0;\n  v9 = -1;\n  sub_4021C0(v8);\n  return v7;\n&#125;\n</code></pre>\n<p>进入sub_401FE0:</p>\n<pre><code class=\"c++\">_DWORD *__thiscall sub_401FE0(_DWORD *this)\n&#123;\n  int i; // [esp+4h] [ebp-14h]\n\n  *this = &amp;EASYRE::`vftable&#39;;\n  this[1] = 0;\n  *((_BYTE *)this + 52) = 8;\n  *((_BYTE *)this + 53) = -22;\n  *((_BYTE *)this + 54) = 88;\n  *((_BYTE *)this + 55) = -34;\n  *((_BYTE *)this + 56) = -108;\n  *((_BYTE *)this + 57) = -48;\n  *((_BYTE *)this + 58) = 59;\n  *((_BYTE *)this + 59) = -66;\n  *((_BYTE *)this + 60) = -120;\n  *((_BYTE *)this + 61) = -44;\n  *((_BYTE *)this + 62) = 50;\n  *((_BYTE *)this + 63) = -74;\n  *((_BYTE *)this + 64) = 20;\n  *((_BYTE *)this + 65) = -126;\n  *((_BYTE *)this + 66) = -73;\n  *((_BYTE *)this + 67) = -81;\n  *((_BYTE *)this + 68) = 20;\n  *((_BYTE *)this + 69) = 84;\n  *((_BYTE *)this + 70) = 127;\n  *((_BYTE *)this + 71) = -49;\n  qmemcpy(this + 18, &quot;  03\\&quot;3   0 203\\&quot;   $ &quot;, 20);\n  sub_4030A0(this + 23);\n  sub_402DE0(this + 26);\n  for ( i = 0; i &lt; 40; ++i )\n    *((_BYTE *)this + i + 12) = 0;\n  return this;\n&#125;\n</code></pre>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-202202221822478\"></p>\n<p>来到校验flag的函数，可以发现存在虚函数的特征：</p>\n<pre><code class=\"c++\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )\n  &#123;\n    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);\n    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>这里this指针指向的首地址是<code>0x4124E4</code>，根据偏移可以映射：</p>\n<pre><code class=\"c++\">(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&gt; 0x4124F0 -&gt; sub_402500\n(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&gt; 0x4124FC -&gt; sub_4026E0\n(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&gt; 0x41250C -&gt; sub_402A00\n</code></pre>\n<p>映射：</p>\n<pre><code class=\"c\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( sub_402500() )\n  &#123;\n    sub_4026E0();\n    if ( sub_402A00() )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<h2 id=\"Reverse中虚函数-x2F-虚表浅析-6\"><a href=\"#Reverse中虚函数-x2F-虚表浅析-6\" class=\"headerlink\" title=\"Reverse中虚函数&#x2F;虚表浅析\"></a>Reverse中虚函数&#x2F;虚表浅析</h2><h3 id=\"this指针-6\"><a href=\"#this指针-6\" class=\"headerlink\" title=\"this指针\"></a>this指针</h3><p>在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：</p>\n<p>一个简单的demo来测试一下this指针：</p>\n<pre><code class=\"c\">int main() &#123;\n    struct Test&#123;\n        int a;\n        int b;\n        int c;\n    &#125;;\n    Test* test = new Test;\n    test-&gt;a = 100;\n    printf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-202202221821809\"></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同</strong></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-202202221821374\"></p>\n<p>demo2：</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n\nstruct Test &#123;\n    int a;\n    int b;\n    int c;\n    virtual void func1();\n    virtual void func2();\n    virtual void func3();\n\n&#125;;\n\nvoid Test::func1() &#123;\n    printf(&quot;func1&quot;);\n&#125;\n\nvoid Test::func2() &#123;\n    printf(&quot;func2&quot;);\n&#125;\n\nvoid Test::func3() &#123;\n    printf(&quot;func3&quot;);\n&#125;\n\nint main() &#123;\n\n    Test* test = new Test;\n    test-&gt;a = 100;\n    test-&gt;func1();\n    printf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为<code>func1</code>、<code>func2</code>、<code>func3</code>，我们注意到这里call的函数内容来自<code>[edx]</code>、<code>[edx+4]</code>、<code>[edx+8]</code></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-202202221822350\"></p>\n<p>VS的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类or结构体中，如果其虚函数的数量大于1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-202202221822816\"></p>\n<p>但是在VS中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-202202221822113\"></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-202202221822536\"></p>\n<h3 id=\"IDA加载该程序-5\"><a href=\"#IDA加载该程序-5\" class=\"headerlink\" title=\"IDA加载该程序\"></a>IDA加载该程序</h3><p>直接来到main函数：</p>\n<pre><code class=\"c\">int __cdecl main_0(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD *v4; // [esp+Ch] [ebp-DCh]\n  void *v5; // [esp+14h] [ebp-D4h]\n  _DWORD *v6; // [esp+E0h] [ebp-8h]\n\n  __CheckForDebuggerJustMyCode(&amp;unk_41C066);\n  v5 = operator new(0x10u);\n  if ( v5 )\n    v4 = (_DWORD *)sub_411460(v5);\n  else\n    v4 = 0;\n  v6 = v4;\n  v4[1] = 100;\n  (*(void (__thiscall **)(_DWORD *))*v6)(v6);\n  (*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n  (*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n  sub_411442(&quot;%d&quot;, *v4);\n  return 0;\n&#125;\n</code></pre>\n<p>根据源码，这一部分就是虚函数调用在IDA中的反编译结果：</p>\n<pre><code class=\"c++\">(*(void (__thiscall **)(_DWORD *))*v6)(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n</code></pre>\n<p>这里v6是指向v4，来到v4的初始化，可以看到存在一个<code>virtual function table</code>也就是虚函数表：</p>\n<pre><code class=\"c++\">_DWORD *__thiscall sub_411880(_DWORD *this)\n&#123;\n  *this = &amp;Test::`vftable&#39;;\n  return this;\n&#125;\n</code></pre>\n<p>根据前面VS中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-202202221822914\"></p>\n<p>基本上关于虚函数在IDA中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-5\"><a href=\"#一道逆向题-5\" class=\"headerlink\" title=\"一道逆向题\"></a>一道逆向题</h3><p>SWPUCTF2019 easyRE，同样来到main函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<pre><code class=\"c++\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF\n  _DWORD *v5; // [esp+4h] [ebp-88h]\n  _DWORD *v6; // [esp+8h] [ebp-84h]\n  int v7; // [esp+Ch] [ebp-80h]\n  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF\n  int v9; // [esp+88h] [ebp-4h]\n\n  if ( sub_40EF90() )\n    return 1;\n  sub_4026C0(0x6Cu);\n  sub_401FE0(v4[27], v5);\n  v9 = 0;\n  v6 = v4;\n  sub_40F360(v8);\n  sub_40F080(v4[0], v4[1]);\n  v5 = v4;\n  sub_40F360(v8);\n  sub_40F150(argc, (int)argv);\n  v7 = 0;\n  v9 = -1;\n  sub_4021C0(v8);\n  return v7;\n&#125;\n</code></pre>\n<p>进入sub_401FE0:</p>\n<pre><code class=\"c++\">_DWORD *__thiscall sub_401FE0(_DWORD *this)\n&#123;\n  int i; // [esp+4h] [ebp-14h]\n\n  *this = &amp;EASYRE::`vftable&#39;;\n  this[1] = 0;\n  *((_BYTE *)this + 52) = 8;\n  *((_BYTE *)this + 53) = -22;\n  *((_BYTE *)this + 54) = 88;\n  *((_BYTE *)this + 55) = -34;\n  *((_BYTE *)this + 56) = -108;\n  *((_BYTE *)this + 57) = -48;\n  *((_BYTE *)this + 58) = 59;\n  *((_BYTE *)this + 59) = -66;\n  *((_BYTE *)this + 60) = -120;\n  *((_BYTE *)this + 61) = -44;\n  *((_BYTE *)this + 62) = 50;\n  *((_BYTE *)this + 63) = -74;\n  *((_BYTE *)this + 64) = 20;\n  *((_BYTE *)this + 65) = -126;\n  *((_BYTE *)this + 66) = -73;\n  *((_BYTE *)this + 67) = -81;\n  *((_BYTE *)this + 68) = 20;\n  *((_BYTE *)this + 69) = 84;\n  *((_BYTE *)this + 70) = 127;\n  *((_BYTE *)this + 71) = -49;\n  qmemcpy(this + 18, &quot;  03\\&quot;3   0 203\\&quot;   $ &quot;, 20);\n  sub_4030A0(this + 23);\n  sub_402DE0(this + 26);\n  for ( i = 0; i &lt; 40; ++i )\n    *((_BYTE *)this + i + 12) = 0;\n  return this;\n&#125;\n</code></pre>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-202202221822478\"></p>\n<p>来到校验flag的函数，可以发现存在虚函数的特征：</p>\n<pre><code class=\"c++\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )\n  &#123;\n    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);\n    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>这里this指针指向的首地址是<code>0x4124E4</code>，根据偏移可以映射：</p>\n<pre><code class=\"c++\">(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&gt; 0x4124F0 -&gt; sub_402500\n(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&gt; 0x4124FC -&gt; sub_4026E0\n(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&gt; 0x41250C -&gt; sub_402A00\n</code></pre>\n<p>映射：</p>\n<pre><code class=\"c\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( sub_402500() )\n  &#123;\n    sub_4026E0();\n    if ( sub_402A00() )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<h3 id=\"IDA加载该程序-6\"><a href=\"#IDA加载该程序-6\" class=\"headerlink\" title=\"IDA加载该程序\"></a>IDA加载该程序</h3><p>直接来到main函数：</p>\n<pre><code class=\"c\">int __cdecl main_0(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD *v4; // [esp+Ch] [ebp-DCh]\n  void *v5; // [esp+14h] [ebp-D4h]\n  _DWORD *v6; // [esp+E0h] [ebp-8h]\n\n  __CheckForDebuggerJustMyCode(&amp;unk_41C066);\n  v5 = operator new(0x10u);\n  if ( v5 )\n    v4 = (_DWORD *)sub_411460(v5);\n  else\n    v4 = 0;\n  v6 = v4;\n  v4[1] = 100;\n  (*(void (__thiscall **)(_DWORD *))*v6)(v6);\n  (*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n  (*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n  sub_411442(&quot;%d&quot;, *v4);\n  return 0;\n&#125;\n</code></pre>\n<p>根据源码，这一部分就是虚函数调用在IDA中的反编译结果：</p>\n<pre><code class=\"c++\">(*(void (__thiscall **)(_DWORD *))*v6)(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n</code></pre>\n<p>这里v6是指向v4，来到v4的初始化，可以看到存在一个<code>virtual function table</code>也就是虚函数表：</p>\n<pre><code class=\"c++\">_DWORD *__thiscall sub_411880(_DWORD *this)\n&#123;\n  *this = &amp;Test::`vftable&#39;;\n  return this;\n&#125;\n</code></pre>\n<p>根据前面VS中的调试可以知道这个表中存放的是增量链接：</p>\n<h2 id=\"Reverse中虚函数-x2F-虚表浅析-7\"><a href=\"#Reverse中虚函数-x2F-虚表浅析-7\" class=\"headerlink\" title=\"Reverse中虚函数&#x2F;虚表浅析\"></a>Reverse中虚函数&#x2F;虚表浅析</h2><h3 id=\"this指针-7\"><a href=\"#this指针-7\" class=\"headerlink\" title=\"this指针\"></a>this指针</h3><p>在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：</p>\n<p>一个简单的demo来测试一下this指针：</p>\n<pre><code class=\"c\">int main() &#123;\n    struct Test&#123;\n        int a;\n        int b;\n        int c;\n    &#125;;\n    Test* test = new Test;\n    test-&gt;a = 100;\n    printf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-202202221821809\"></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同</strong></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-202202221821374\"></p>\n<p>demo2：</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n\nstruct Test &#123;\n    int a;\n    int b;\n    int c;\n    virtual void func1();\n    virtual void func2();\n    virtual void func3();\n\n&#125;;\n\nvoid Test::func1() &#123;\n    printf(&quot;func1&quot;);\n&#125;\n\nvoid Test::func2() &#123;\n    printf(&quot;func2&quot;);\n&#125;\n\nvoid Test::func3() &#123;\n    printf(&quot;func3&quot;);\n&#125;\n\nint main() &#123;\n\n    Test* test = new Test;\n    test-&gt;a = 100;\n    test-&gt;func1();\n    printf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为<code>func1</code>、<code>func2</code>、<code>func3</code>，我们注意到这里call的函数内容来自<code>[edx]</code>、<code>[edx+4]</code>、<code>[edx+8]</code></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-202202221822350\"></p>\n<p>VS的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类or结构体中，如果其虚函数的数量大于1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-202202221822816\"></p>\n<p>但是在VS中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-202202221822113\"></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-202202221822536\"></p>\n<h3 id=\"IDA加载该程序-7\"><a href=\"#IDA加载该程序-7\" class=\"headerlink\" title=\"IDA加载该程序\"></a>IDA加载该程序</h3><p>直接来到main函数：</p>\n<pre><code class=\"c\">int __cdecl main_0(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD *v4; // [esp+Ch] [ebp-DCh]\n  void *v5; // [esp+14h] [ebp-D4h]\n  _DWORD *v6; // [esp+E0h] [ebp-8h]\n\n  __CheckForDebuggerJustMyCode(&amp;unk_41C066);\n  v5 = operator new(0x10u);\n  if ( v5 )\n    v4 = (_DWORD *)sub_411460(v5);\n  else\n    v4 = 0;\n  v6 = v4;\n  v4[1] = 100;\n  (*(void (__thiscall **)(_DWORD *))*v6)(v6);\n  (*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n  (*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n  sub_411442(&quot;%d&quot;, *v4);\n  return 0;\n&#125;\n</code></pre>\n<p>根据源码，这一部分就是虚函数调用在IDA中的反编译结果：</p>\n<pre><code class=\"c++\">(*(void (__thiscall **)(_DWORD *))*v6)(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n</code></pre>\n<p>这里v6是指向v4，来到v4的初始化，可以看到存在一个<code>virtual function table</code>也就是虚函数表：</p>\n<pre><code class=\"c++\">_DWORD *__thiscall sub_411880(_DWORD *this)\n&#123;\n  *this = &amp;Test::`vftable&#39;;\n  return this;\n&#125;\n</code></pre>\n<p>根据前面VS中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-202202221822914\"></p>\n<p>基本上关于虚函数在IDA中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-6\"><a href=\"#一道逆向题-6\" class=\"headerlink\" title=\"一道逆向题\"></a>一道逆向题</h3><p>SWPUCTF2019 easyRE，同样来到main函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<pre><code class=\"c++\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF\n  _DWORD *v5; // [esp+4h] [ebp-88h]\n  _DWORD *v6; // [esp+8h] [ebp-84h]\n  int v7; // [esp+Ch] [ebp-80h]\n  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF\n  int v9; // [esp+88h] [ebp-4h]\n\n  if ( sub_40EF90() )\n    return 1;\n  sub_4026C0(0x6Cu);\n  sub_401FE0(v4[27], v5);\n  v9 = 0;\n  v6 = v4;\n  sub_40F360(v8);\n  sub_40F080(v4[0], v4[1]);\n  v5 = v4;\n  sub_40F360(v8);\n  sub_40F150(argc, (int)argv);\n  v7 = 0;\n  v9 = -1;\n  sub_4021C0(v8);\n  return v7;\n&#125;\n</code></pre>\n<p>进入sub_401FE0:</p>\n<pre><code class=\"c++\">_DWORD *__thiscall sub_401FE0(_DWORD *this)\n&#123;\n  int i; // [esp+4h] [ebp-14h]\n\n  *this = &amp;EASYRE::`vftable&#39;;\n  this[1] = 0;\n  *((_BYTE *)this + 52) = 8;\n  *((_BYTE *)this + 53) = -22;\n  *((_BYTE *)this + 54) = 88;\n  *((_BYTE *)this + 55) = -34;\n  *((_BYTE *)this + 56) = -108;\n  *((_BYTE *)this + 57) = -48;\n  *((_BYTE *)this + 58) = 59;\n  *((_BYTE *)this + 59) = -66;\n  *((_BYTE *)this + 60) = -120;\n  *((_BYTE *)this + 61) = -44;\n  *((_BYTE *)this + 62) = 50;\n  *((_BYTE *)this + 63) = -74;\n  *((_BYTE *)this + 64) = 20;\n  *((_BYTE *)this + 65) = -126;\n  *((_BYTE *)this + 66) = -73;\n  *((_BYTE *)this + 67) = -81;\n  *((_BYTE *)this + 68) = 20;\n  *((_BYTE *)this + 69) = 84;\n  *((_BYTE *)this + 70) = 127;\n  *((_BYTE *)this + 71) = -49;\n  qmemcpy(this + 18, &quot;  03\\&quot;3   0 203\\&quot;   $ &quot;, 20);\n  sub_4030A0(this + 23);\n  sub_402DE0(this + 26);\n  for ( i = 0; i &lt; 40; ++i )\n    *((_BYTE *)this + i + 12) = 0;\n  return this;\n&#125;\n</code></pre>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-202202221822478\"></p>\n<p>来到校验flag的函数，可以发现存在虚函数的特征：</p>\n<pre><code class=\"c++\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )\n  &#123;\n    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);\n    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>这里this指针指向的首地址是<code>0x4124E4</code>，根据偏移可以映射：</p>\n<pre><code class=\"c++\">(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&gt; 0x4124F0 -&gt; sub_402500\n(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&gt; 0x4124FC -&gt; sub_4026E0\n(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&gt; 0x41250C -&gt; sub_402A00\n</code></pre>\n<p>映射：</p>\n<pre><code class=\"c\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( sub_402500() )\n  &#123;\n    sub_4026E0();\n    if ( sub_402A00() )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>基本上关于虚函数在IDA中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-7\"><a href=\"#一道逆向题-7\" class=\"headerlink\" title=\"一道逆向题\"></a>一道逆向题</h3><p>SWPUCTF2019 easyRE，同样来到main函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<pre><code class=\"c++\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF\n  _DWORD *v5; // [esp+4h] [ebp-88h]\n  _DWORD *v6; // [esp+8h] [ebp-84h]\n  int v7; // [esp+Ch] [ebp-80h]\n  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF\n  int v9; // [esp+88h] [ebp-4h]\n\n  if ( sub_40EF90() )\n    return 1;\n  sub_4026C0(0x6Cu);\n  sub_401FE0(v4[27], v5);\n  v9 = 0;\n  v6 = v4;\n  sub_40F360(v8);\n  sub_40F080(v4[0], v4[1]);\n  v5 = v4;\n  sub_40F360(v8);\n  sub_40F150(argc, (int)argv);\n  v7 = 0;\n  v9 = -1;\n  sub_4021C0(v8);\n  return v7;\n&#125;\n</code></pre>\n<p>进入sub_401FE0:</p>\n<pre><code class=\"c++\">_DWORD *__thiscall sub_401FE0(_DWORD *this)\n&#123;\n  int i; // [esp+4h] [ebp-14h]\n\n  *this = &amp;EASYRE::`vftable&#39;;\n  this[1] = 0;\n  *((_BYTE *)this + 52) = 8;\n  *((_BYTE *)this + 53) = -22;\n  *((_BYTE *)this + 54) = 88;\n  *((_BYTE *)this + 55) = -34;\n  *((_BYTE *)this + 56) = -108;\n  *((_BYTE *)this + 57) = -48;\n  *((_BYTE *)this + 58) = 59;\n  *((_BYTE *)this + 59) = -66;\n  *((_BYTE *)this + 60) = -120;\n  *((_BYTE *)this + 61) = -44;\n  *((_BYTE *)this + 62) = 50;\n  *((_BYTE *)this + 63) = -74;\n  *((_BYTE *)this + 64) = 20;\n  *((_BYTE *)this + 65) = -126;\n  *((_BYTE *)this + 66) = -73;\n  *((_BYTE *)this + 67) = -81;\n  *((_BYTE *)this + 68) = 20;\n  *((_BYTE *)this + 69) = 84;\n  *((_BYTE *)this + 70) = 127;\n  *((_BYTE *)this + 71) = -49;\n  qmemcpy(this + 18, &quot;  03\\&quot;3   0 203\\&quot;   $ &quot;, 20);\n  sub_4030A0(this + 23);\n  sub_402DE0(this + 26);\n  for ( i = 0; i &lt; 40; ++i )\n    *((_BYTE *)this + i + 12) = 0;\n  return this;\n&#125;\n</code></pre>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<h2 id=\"Reverse中虚函数-x2F-虚表浅析-8\"><a href=\"#Reverse中虚函数-x2F-虚表浅析-8\" class=\"headerlink\" title=\"Reverse中虚函数&#x2F;虚表浅析\"></a>Reverse中虚函数&#x2F;虚表浅析</h2><h3 id=\"this指针-8\"><a href=\"#this指针-8\" class=\"headerlink\" title=\"this指针\"></a>this指针</h3><p>在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：</p>\n<p>一个简单的demo来测试一下this指针：</p>\n<pre><code class=\"c\">int main() &#123;\n    struct Test&#123;\n        int a;\n        int b;\n        int c;\n    &#125;;\n    Test* test = new Test;\n    test-&gt;a = 100;\n    printf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-202202221821809\"></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同</strong></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-202202221821374\"></p>\n<p>demo2：</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n\nstruct Test &#123;\n    int a;\n    int b;\n    int c;\n    virtual void func1();\n    virtual void func2();\n    virtual void func3();\n\n&#125;;\n\nvoid Test::func1() &#123;\n    printf(&quot;func1&quot;);\n&#125;\n\nvoid Test::func2() &#123;\n    printf(&quot;func2&quot;);\n&#125;\n\nvoid Test::func3() &#123;\n    printf(&quot;func3&quot;);\n&#125;\n\nint main() &#123;\n\n    Test* test = new Test;\n    test-&gt;a = 100;\n    test-&gt;func1();\n    printf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为<code>func1</code>、<code>func2</code>、<code>func3</code>，我们注意到这里call的函数内容来自<code>[edx]</code>、<code>[edx+4]</code>、<code>[edx+8]</code></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-202202221822350\"></p>\n<p>VS的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类or结构体中，如果其虚函数的数量大于1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-202202221822816\"></p>\n<p>但是在VS中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-202202221822113\"></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-202202221822536\"></p>\n<h3 id=\"IDA加载该程序-8\"><a href=\"#IDA加载该程序-8\" class=\"headerlink\" title=\"IDA加载该程序\"></a>IDA加载该程序</h3><p>直接来到main函数：</p>\n<pre><code class=\"c\">int __cdecl main_0(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD *v4; // [esp+Ch] [ebp-DCh]\n  void *v5; // [esp+14h] [ebp-D4h]\n  _DWORD *v6; // [esp+E0h] [ebp-8h]\n\n  __CheckForDebuggerJustMyCode(&amp;unk_41C066);\n  v5 = operator new(0x10u);\n  if ( v5 )\n    v4 = (_DWORD *)sub_411460(v5);\n  else\n    v4 = 0;\n  v6 = v4;\n  v4[1] = 100;\n  (*(void (__thiscall **)(_DWORD *))*v6)(v6);\n  (*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n  (*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n  sub_411442(&quot;%d&quot;, *v4);\n  return 0;\n&#125;\n</code></pre>\n<p>根据源码，这一部分就是虚函数调用在IDA中的反编译结果：</p>\n<pre><code class=\"c++\">(*(void (__thiscall **)(_DWORD *))*v6)(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n</code></pre>\n<p>这里v6是指向v4，来到v4的初始化，可以看到存在一个<code>virtual function table</code>也就是虚函数表：</p>\n<pre><code class=\"c++\">_DWORD *__thiscall sub_411880(_DWORD *this)\n&#123;\n  *this = &amp;Test::`vftable&#39;;\n  return this;\n&#125;\n</code></pre>\n<p>根据前面VS中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-202202221822914\"></p>\n<p>基本上关于虚函数在IDA中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-8\"><a href=\"#一道逆向题-8\" class=\"headerlink\" title=\"一道逆向题\"></a>一道逆向题</h3><p>SWPUCTF2019 easyRE，同样来到main函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<pre><code class=\"c++\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF\n  _DWORD *v5; // [esp+4h] [ebp-88h]\n  _DWORD *v6; // [esp+8h] [ebp-84h]\n  int v7; // [esp+Ch] [ebp-80h]\n  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF\n  int v9; // [esp+88h] [ebp-4h]\n\n  if ( sub_40EF90() )\n    return 1;\n  sub_4026C0(0x6Cu);\n  sub_401FE0(v4[27], v5);\n  v9 = 0;\n  v6 = v4;\n  sub_40F360(v8);\n  sub_40F080(v4[0], v4[1]);\n  v5 = v4;\n  sub_40F360(v8);\n  sub_40F150(argc, (int)argv);\n  v7 = 0;\n  v9 = -1;\n  sub_4021C0(v8);\n  return v7;\n&#125;\n</code></pre>\n<p>进入sub_401FE0:</p>\n<pre><code class=\"c++\">_DWORD *__thiscall sub_401FE0(_DWORD *this)\n&#123;\n  int i; // [esp+4h] [ebp-14h]\n\n  *this = &amp;EASYRE::`vftable&#39;;\n  this[1] = 0;\n  *((_BYTE *)this + 52) = 8;\n  *((_BYTE *)this + 53) = -22;\n  *((_BYTE *)this + 54) = 88;\n  *((_BYTE *)this + 55) = -34;\n  *((_BYTE *)this + 56) = -108;\n  *((_BYTE *)this + 57) = -48;\n  *((_BYTE *)this + 58) = 59;\n  *((_BYTE *)this + 59) = -66;\n  *((_BYTE *)this + 60) = -120;\n  *((_BYTE *)this + 61) = -44;\n  *((_BYTE *)this + 62) = 50;\n  *((_BYTE *)this + 63) = -74;\n  *((_BYTE *)this + 64) = 20;\n  *((_BYTE *)this + 65) = -126;\n  *((_BYTE *)this + 66) = -73;\n  *((_BYTE *)this + 67) = -81;\n  *((_BYTE *)this + 68) = 20;\n  *((_BYTE *)this + 69) = 84;\n  *((_BYTE *)this + 70) = 127;\n  *((_BYTE *)this + 71) = -49;\n  qmemcpy(this + 18, &quot;  03\\&quot;3   0 203\\&quot;   $ &quot;, 20);\n  sub_4030A0(this + 23);\n  sub_402DE0(this + 26);\n  for ( i = 0; i &lt; 40; ++i )\n    *((_BYTE *)this + i + 12) = 0;\n  return this;\n&#125;\n</code></pre>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-202202221822478\"></p>\n<p>来到校验flag的函数，可以发现存在虚函数的特征：</p>\n<pre><code class=\"c++\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )\n  &#123;\n    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);\n    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>这里this指针指向的首地址是<code>0x4124E4</code>，根据偏移可以映射：</p>\n<pre><code class=\"c++\">(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&gt; 0x4124F0 -&gt; sub_402500\n(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&gt; 0x4124FC -&gt; sub_4026E0\n(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&gt; 0x41250C -&gt; sub_402A00\n</code></pre>\n<p>映射：</p>\n<pre><code class=\"c\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( sub_402500() )\n  &#123;\n    sub_4026E0();\n    if ( sub_402A00() )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>来到校验flag的函数，可以发现存在虚函数的特征：</p>\n<pre><code class=\"c++\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )\n  &#123;\n    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);\n    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>这里this指针指向的首地址是<code>0x4124E4</code>，根据偏移可以映射：</p>\n<pre><code class=\"c++\">(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&gt; 0x4124F0 -&gt; sub_402500\n(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&gt; 0x4124FC -&gt; sub_4026E0\n(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&gt; 0x41250C -&gt; sub_402A00\n</code></pre>\n<p>映射：</p>\n<pre><code class=\"c\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( sub_402500() )\n  &#123;\n    sub_4026E0();\n    if ( sub_402A00() )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n",
            "tags": [
                "C++"
            ]
        }
    ]
}