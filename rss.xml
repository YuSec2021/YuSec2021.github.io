<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>YuSec2021</title>
        <subtitle>YuSec Test RePWNCrypto</subtitle>
        <icon>https://yusec2021.github.io/images/favicon.ico</icon>
        <link>https://YuSec2021.github.io</link>
        <author>
          <name>YuSec</name>
        </author>
        <description>Record My Learning</description>
        <language>en</language>
        <pubDate>Mon, 21 Feb 2022 16:09:09 +0800</pubDate>
        <lastBuildDate>Mon, 21 Feb 2022 16:09:09 +0800</lastBuildDate>
        <category term="Reverse" />
        <category term=" Crypto" />
        <category term=" PWN" />
        <item>
            <guid isPermalink="true">https://yusec2021.github.io/2022/02/21/Splendid_MineCraft/</guid>
            <title>ACTF新生赛2020 Splendid_MineCraft</title>
            <link>https://yusec2021.github.io/2022/02/21/Splendid_MineCraft/</link>
            <category term="Reverse" scheme="https://yusec2021.github.io/tags/Reverse/" />
            <pubDate>Mon, 21 Feb 2022 16:09:09 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-1&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-1&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-2&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-2&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-3&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-3&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-4&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-4&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-5&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-5&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-6&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-6&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-7&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-7&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-8&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-8&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-9&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-9&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-10&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-10&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-11&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-11&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-12&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-12&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-13&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-13&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-14&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-14&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-15&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-15&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-16&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-16&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-17&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-17&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-18&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-18&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-19&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-19&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-20&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-20&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-21&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-21&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-22&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-22&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-23&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-23&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-24&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-24&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-25&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-25&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-26&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-26&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-27&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-27&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-28&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-28&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-29&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-29&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-30&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-30&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ACTF新生赛2020-Splendid-MineCraft-31&#34;&gt;&lt;a href=&#34;#ACTF新生赛2020-Splendid-MineCraft-31&#34; class=&#34;headerlink&#34; title=&#34;[ACTF新生赛2020]Splendid_MineCraft&#34;&gt;&lt;/a&gt;[ACTF新生赛2020]Splendid_MineCraft&lt;/h2&gt;&lt;p&gt;反编译源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  char *v3; // eax
  char *v4; // eax
  char v6; // [esp+0h] [ebp-68h]
  int i; // [esp+14h] [ebp-54h]
  char *v8; // [esp+18h] [ebp-50h]
  char v9; // [esp+20h] [ebp-48h]
  char flag[25]; // [esp+24h] [ebp-44h] BYREF
  char v11[25]; // [esp+25h] [ebp-43h] BYREF
  char v12; // [esp+3Dh] [ebp-2Bh]
  int v13; // [esp+44h] [ebp-24h]
  __int16 v14; // [esp+48h] [ebp-20h]
  char v15[4]; // [esp+4Ch] [ebp-1Ch]
  __int16 v16; // [esp+50h] [ebp-18h]
  int v17; // [esp+54h] [ebp-14h] BYREF
  __int16 v18; // [esp+58h] [ebp-10h]
  int v19; // [esp+5Ch] [ebp-Ch]
  __int16 v20; // [esp+60h] [ebp-8h]

  sub_401020(&amp;quot;%s\n&amp;quot;, (char)aWelcomeToActfS);
  sub_401050(&amp;quot;%s&amp;quot;, (char)flag);
  if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39; )
  &amp;#123;
    v12 = 0;
    v3 = strtok(flag, &amp;quot;_&amp;quot;);
    v17 = *(_DWORD *)(v3 + 5);
    v18 = *(_WORD *)(v3 + 9);
    v19 = *(_DWORD *)(v3 + 5);
    v20 = *(_WORD *)(v3 + 9);
    v4 = strtok(0, &amp;quot;_&amp;quot;);
    v13 = *(_DWORD *)v4;
    v14 = *((_WORD *)v4 + 2);
    v8 = strtok(0, &amp;quot;_&amp;quot;);
    *(_DWORD *)v15 = *(_DWORD *)v8;
    v16 = *((_WORD *)v8 + 2);
    dword_403354 = (int)&amp;amp;unk_4051D8;
    if ( ((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17) )
    &amp;#123;
      v9 = BYTE2(v19) ^ HIBYTE(v20) ^ v19 ^ HIBYTE(v19) ^ BYTE1(v19) ^ v20;
      for ( i = 256; i &amp;lt; 496; ++i )
        byte_405018[i] ^= v9;
      __asm &amp;#123; jmp     eax &amp;#125;
    &amp;#125;
  &amp;#125;
  sub_401020(&amp;quot;Wrong\n&amp;quot;, v6);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !strncmp(flag, &amp;quot;ACTF&amp;#123;&amp;quot;, 5u) &amp;amp;&amp;amp; v12 == &amp;#39;&amp;#125;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个判断是输入的flag的最后一个字符的地址-v11的起始地址是否等于26，应该就是需要flag的长度为26：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cyclic 26 -&amp;gt; flag&amp;#123;aaaabaaacaaadaaaeaaa&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212181827825.png&#34; alt=&#34;image-20211212181827825&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面两个判断就是判断flag的格式为：&lt;code&gt;ACTF&amp;#123;xxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;strtok，用&lt;code&gt;_&lt;/code&gt;将字符串分隔开，v3取的是最左边的一段字符，&lt;code&gt;ACTF&amp;#123;xxxx&lt;/code&gt;，注意v17是从第六个字符开始，取4个字符的长度，然后v18是从第10个字符开始，取两个字符，这样其实都可以推断出来整个flag的格式为&lt;code&gt;ACTF&amp;#123;xxxxxx_xxxxxx_xxxxxx&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;v3 = strtok(flag, &amp;quot;_&amp;quot;);
v17 = *(_DWORD *)(v3 + 5);
v18 = *(_WORD *)(v3 + 9);
v19 = *(_DWORD *)(v3 + 5);
v20 = *(_WORD *)(v3 + 9);
v4 = strtok(0, &amp;quot;_&amp;quot;);
v13 = *(_DWORD *)v4;
v14 = *((_WORD *)v4 + 2);
v8 = strtok(0, &amp;quot;_&amp;quot;);
*(_DWORD *)v15 = *(_DWORD *)v8;
v16 = *((_WORD *)v8 + 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;往下存在一个&lt;code&gt;unk_4051D8&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212183722900.png&#34; alt=&#34;image-20211212183722900&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现把&lt;code&gt;unk_4051D8&lt;/code&gt;当成函数执行：&lt;code&gt;((int (__cdecl *)(int *))unk_4051D8)(&amp;amp;v17)&lt;/code&gt;，说明上面的一大段数据应该是字节码，然后将v17当成参数传入该函数中，重新运行，输入&lt;code&gt;ACTF&amp;#123;aaaaaa_bbbbbb_cccccc&amp;#125;&lt;/code&gt;，用x32dbg动态跟：&lt;/p&gt;
&lt;p&gt;第一个循环：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212215926952.png&#34; alt=&#34;image-20211212215926952&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;esi = 0xE351DD
for edi in range(0, 0x151):
    tmp = byte ptr [esi + edi + 0x1F]
    [esi+edi+0x1F] = tmp ^ 0x72
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230654068.png&#34; alt=&#34;image-20211212230654068&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到EIP，发现就是通过循环解密出后面需要执行的字节码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212230935974.png&#34; alt=&#34;image-20211212230935974&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密之后的push ebp才是真正的函数开始，该函数先是往内存写值，一个是&lt;code&gt;3@1b;b&lt;/code&gt;，一个是&lt;code&gt;Welcome&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231406269.png&#34; alt=&#34;image-20211212231406269&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下对刚刚写入的字符串的进行循环异或，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212231713546.png&#34; alt=&#34;image-20211212231713546&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
res = &amp;#39;&amp;#39;
for i in range(0, len(a)):
    res += chr(a[i] ^ b[i] + 0x23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6次循环后得到：&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212233654525.png&#34; alt=&#34;image-20211212233654525&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后出循环，test eax, eax，说明eax是作为函数执行结果，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211212234011240.png&#34; alt=&#34;image-20211212234011240&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行执行输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACTF&amp;#123;abcdef_hijklm_opqrst&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理完第一个strtok之后会得到一个字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;，中间的Rv是固定的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213232914763.png&#34; alt=&#34;image-20211213232914763&#34;&gt;&lt;/p&gt;
&lt;p&gt;三次strtok处理完之后会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233135397.png&#34; alt=&#34;image-20211213233135397&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后来到字节码部分，注意传进来的字符串为：&lt;code&gt;abcdefRvabcdef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233228219.png&#34; alt=&#34;image-20211213233228219&#34;&gt;&lt;/p&gt;
&lt;p&gt;进来之后先对字节码进行解密，解谜之后从0x9F515C开始才是函数处理的开始，注意传入的参数由EDX指向：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233405286.png&#34; alt=&#34;image-20211213233405286&#34;&gt;&lt;/p&gt;
&lt;p&gt;随后生成&lt;code&gt;3@1b;b&lt;/code&gt;和&lt;code&gt;welcome&lt;/code&gt;，对这两个值进行异或再加上0x23，然后跟传入的字符串进行对比，不难发现预期值应该是两个相等的，往下走完循环拿完处理后的结果为&lt;code&gt;yOu0y*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213233907366.png&#34; alt=&#34;image-20211213233907366&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234107801.png&#34; alt=&#34;image-20211213234107801&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时相等了，跳转不实现：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234225491.png&#34; alt=&#34;image-20211213234225491&#34;&gt;&lt;/p&gt;
&lt;p&gt;将edx作为计数器来存储相等的个数，最后对比是否全部相等，将返回值置为1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211213234415857.png&#34; alt=&#34;image-20211213234415857&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下来到第二个部分的验证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211214101314551.png&#34; alt=&#34;image-20211214101314551&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = &amp;#39;yOu0y*&amp;#39;
key = res[0] ^ res[1] ^ res[3] ^ res[0] ^ res[5] ^ res[2] = 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215110249558.png&#34; alt=&#34;image-20211215110249558&#34;&gt;&lt;/p&gt;
&lt;p&gt;异或之后的值作为key，然后对：405018开始的值进行异或，跟第一个函数一样，通过这个key对字节码进行解密，然后再执行，这里的内容就是第二部分字符串的验证:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085046486.png&#34; alt=&#34;image-20211215085046486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215085805863.png&#34; alt=&#34;image-20211215085805863&#34;&gt;&lt;/p&gt;
&lt;p&gt;开局几个循环啥事都没干就是将输入的第二部分字符串进行memcpy，到这个位置才真正对字符串进行处理：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091013268.png&#34; alt=&#34;image-20211215091013268&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下的mov很重要，EAX此时的值为0x705018，也就是该函数的字节码首地址，这里异或的结果作为数组下标，将字节码以byte的形式存储到EBX：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091206850.png&#34; alt=&#34;image-20211215091206850&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下从0x705018+0x166取值与上面通过偏移拿到的值进行比较：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215091509928.png&#34; alt=&#34;image-20211215091509928&#34;&gt;&lt;/p&gt;
&lt;p&gt;edi作为计数器，回到异或之前可以看到ecx的值来自于edi：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092843105.png&#34; alt=&#34;image-20211215092843105&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215092045179.png&#34; alt=&#34;image-20211215092045179&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215111022353.png&#34; alt=&#34;image-20211215111022353&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到异或逻辑为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;xxxxxx&amp;#39;
byte_405018 = [...]
for i in range(0, len(flag2)):
    cmp byte_405018[flag2[i] ^ (i+0x83)],  ord(str2[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [...]
for i in range(0, len(res2)):
  flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;byte_405018，用Ghidra的字节复制复制下来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;[ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215103806688.png&#34; alt=&#34;image-20211215103806688&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到flag2：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113140388.png&#34; alt=&#34;image-20211215113140388&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三部分字符串发现就是直接进行strncmp:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215113450451.png&#34; alt=&#34;image-20211215113450451&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以得到第三部分的字符串为：&lt;code&gt;5mcsM&amp;lt;&lt;/code&gt;，最终flag：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;f&#34;&gt;ACTF&amp;#123;yOu0y*_knowo3_5mcsM&amp;lt;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;flag_prefix = &amp;#39;ACTF&amp;#123;&amp;#39;
flag_suffix = &amp;#39;&amp;#125;&amp;#39;
flag3 = &amp;#39;5mcsM&amp;lt;&amp;#39;

a = &amp;#39;3@1b;b&amp;#39;
b = &amp;#39;elcome&amp;#39;
flag1 = &amp;#39;&amp;#39;
for i in range(0, len(a)):    
    flag1 += chr((ord(a[i]) ^ ord(b[i])) + 0x23)

res2 = [0x30,4,4,3,0x30,0x63]
flag2 = &amp;#39;&amp;#39;
byte_405018 = [ 0xf6, 0xa3, 0x5b, 0x9d, 0xe0, 0x95, 0x98, 0x68, 0x8c, 0x65, 0xbb, 0x76, 0x89, 0xd4, 0x09, 0xfd, 0xf3, 0x5c, 0x3c, 0x4c, 0x36, 0x8e, 0x4d, 0xc4, 0x80, 0x44, 0xd6, 0xa9, 0x01, 0x32, 0x77, 0x29, 0x90, 0xbc, 0xc0, 0xa8, 0xd8, 0xf9, 0xe1, 0x1d, 0xe4, 0x67, 0x7d, 0x2a, 0x2c, 0x59, 0x9e, 0x3d, 0x7a, 0x34, 0x11, 0x43, 0x74, 0xd1, 0x62, 0x60, 0x02, 0x4b, 0xae, 0x99, 0x57, 0xc6, 0x73, 0xb0, 0x33, 0x18, 0x2b, 0xfe, 0xb9, 0x85, 0xb6, 0xd9, 0xde, 0x7b, 0xcf, 0x4f, 0xb3, 0xd5, 0x08, 0x7c, 0x0a, 0x71, 0x12, 0x06, 0x37, 0xff, 0x7f, 0xb7, 0x46, 0x42, 0x25, 0xc9, 0xd0, 0x50, 0x52, 0xce, 0xbd, 0x6c, 0xe5, 0x6f, 0xa5, 0x15, 0xed, 0x64, 0xf0, 0x23, 0x35, 0xe7, 0x0c, 0x61, 0xa4, 0xd7, 0x51, 0x75, 0x9a, 0xf2, 0x1e, 0xeb, 0x58, 0xf1, 0x94, 0xc3, 0x2f, 0x56, 0xf7, 0xe6, 0x86, 0x47, 0xfb, 0x83, 0x5e, 0xcc, 0x21, 0x4a, 0x24, 0x07, 0x1c, 0x8a, 0x5a, 0x17, 0x1b, 0xda, 0xec, 0x38, 0x0e, 0x7e, 0xb4, 0x48, 0x88, 0xf4, 0xb8, 0x27, 0x91, 0x00, 0x13, 0x97, 0xbe, 0x53, 0xc2, 0xe8, 0xea, 0x1a, 0xe9, 0x2d, 0x14, 0x0b, 0xbf, 0xb5, 0x40, 0x79, 0xd2, 0x3e, 0x19, 0x5d, 0xf8, 0x69, 0x39, 0x5f, 0xdb, 0xfa, 0xb2, 0x8b, 0x6e, 0xa2, 0xdf, 0x16, 0xe2, 0x63, 0xb1, 0x20, 0xcb, 0xba, 0xee, 0x8d, 0xaa, 0xc8, 0xc7, 0xc5, 0x05, 0x66, 0x6d, 0x3a, 0x45, 0x72, 0x0d, 0xca, 0x84, 0x4e, 0xf5, 0x31, 0x6b, 0x92, 0xdc, 0xdd, 0x9c, 0x3f, 0x55, 0x96, 0xa1, 0x9f, 0xcd, 0x9b, 0xe3, 0xa0, 0xa7, 0xfc, 0xc1, 0x78, 0x10, 0x2e, 0x82, 0x8f, 0x30, 0x54, 0x04, 0xac, 0x41, 0x93, 0xd3, 0x3b, 0xef, 0x03, 0x81, 0x70, 0xa6, 0x1f, 0x22, 0x26, 0x28, 0x6a, 0xab, 0x87, 0xad, 0x49, 0x0f, 0xaf ]
for i in range(0, len(res2)):
    flag2 += chr((0x83+i)^ byte_405018.index(res2[i]))


flag = flag_prefix + flag1 + &amp;#39;_&amp;#39; + flag2 + &amp;#39;_&amp;#39; + flag3 + flag_suffix
print(flag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20211215115036210.png&#34; alt=&#34;image-20211215115036210&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://yusec2021.github.io/2022/02/17/VirtualFunction/</guid>
            <title>虚函数以及虚表在IDA中的体现</title>
            <link>https://yusec2021.github.io/2022/02/17/VirtualFunction/</link>
            <category term="C++" scheme="https://yusec2021.github.io/tags/C/" />
            <pubDate>Thu, 17 Feb 2022 18:00:09 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;Reverse中虚函数-x2F-虚表浅析&#34;&gt;&lt;a href=&#34;#Reverse中虚函数-x2F-虚表浅析&#34; class=&#34;headerlink&#34; title=&#34;Reverse中虚函数&amp;#x2F;虚表浅析&#34;&gt;&lt;/a&gt;Reverse中虚函数&amp;#x2F;虚表浅析&lt;/h2&gt;&lt;h3 id=&#34;this指针&#34;&gt;&lt;a href=&#34;#this指针&#34; class=&#34;headerlink&#34; title=&#34;this指针&#34;&gt;&lt;/a&gt;this指针&lt;/h3&gt;&lt;p&gt;在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：&lt;/p&gt;
&lt;p&gt;一个简单的demo来测试一下this指针：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int main() &amp;#123;
    struct Test&amp;#123;
        int a;
        int b;
        int c;
    &amp;#125;;
    Test* test = new Test;
    test-&amp;gt;a = 100;
    printf(&amp;quot;%d&amp;quot;, *test);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：&lt;/p&gt;
&lt;h2 id=&#34;Reverse中虚函数-x2F-虚表浅析-1&#34;&gt;&lt;a href=&#34;#Reverse中虚函数-x2F-虚表浅析-1&#34; class=&#34;headerlink&#34; title=&#34;Reverse中虚函数&amp;#x2F;虚表浅析&#34;&gt;&lt;/a&gt;Reverse中虚函数&amp;#x2F;虚表浅析&lt;/h2&gt;&lt;h3 id=&#34;this指针-1&#34;&gt;&lt;a href=&#34;#this指针-1&#34; class=&#34;headerlink&#34; title=&#34;this指针&#34;&gt;&lt;/a&gt;this指针&lt;/h3&gt;&lt;p&gt;在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：&lt;/p&gt;
&lt;p&gt;一个简单的demo来测试一下this指针：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int main() &amp;#123;
    struct Test&amp;#123;
        int a;
        int b;
        int c;
    &amp;#125;;
    Test* test = new Test;
    test-&amp;gt;a = 100;
    printf(&amp;quot;%d&amp;quot;, *test);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png&#34; alt=&#34;image-202202221821809&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png&#34; alt=&#34;image-202202221821374&#34;&gt;&lt;/p&gt;
&lt;p&gt;demo2：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;


struct Test &amp;#123;
    int a;
    int b;
    int c;
    virtual void func1();
    virtual void func2();
    virtual void func3();

&amp;#125;;

void Test::func1() &amp;#123;
    printf(&amp;quot;func1&amp;quot;);
&amp;#125;

void Test::func2() &amp;#123;
    printf(&amp;quot;func2&amp;quot;);
&amp;#125;

void Test::func3() &amp;#123;
    printf(&amp;quot;func3&amp;quot;);
&amp;#125;

int main() &amp;#123;

    Test* test = new Test;
    test-&amp;gt;a = 100;
    test-&amp;gt;func1();
    printf(&amp;quot;%d&amp;quot;, *test);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为&lt;code&gt;func1&lt;/code&gt;、&lt;code&gt;func2&lt;/code&gt;、&lt;code&gt;func3&lt;/code&gt;，我们注意到这里call的函数内容来自&lt;code&gt;[edx]&lt;/code&gt;、&lt;code&gt;[edx+4]&lt;/code&gt;、&lt;code&gt;[edx+8]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png&#34; alt=&#34;image-202202221822350&#34;&gt;&lt;/p&gt;
&lt;p&gt;VS的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类or结构体中，如果其虚函数的数量大于1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png&#34; alt=&#34;image-202202221822816&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是在VS中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png&#34; alt=&#34;image-202202221822113&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png&#34; alt=&#34;image-202202221822536&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;IDA加载该程序&#34;&gt;&lt;a href=&#34;#IDA加载该程序&#34; class=&#34;headerlink&#34; title=&#34;IDA加载该程序&#34;&gt;&lt;/a&gt;IDA加载该程序&lt;/h3&gt;&lt;p&gt;直接来到main函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main_0(int argc, const char **argv, const char **envp)
&amp;#123;
  _DWORD *v4; // [esp+Ch] [ebp-DCh]
  void *v5; // [esp+14h] [ebp-D4h]
  _DWORD *v6; // [esp+E0h] [ebp-8h]

  __CheckForDebuggerJustMyCode(&amp;amp;unk_41C066);
  v5 = operator new(0x10u);
  if ( v5 )
    v4 = (_DWORD *)sub_411460(v5);
  else
    v4 = 0;
  v6 = v4;
  v4[1] = 100;
  (*(void (__thiscall **)(_DWORD *))*v6)(v6);
  (*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);
  (*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);
  sub_411442(&amp;quot;%d&amp;quot;, *v4);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据源码，这一部分就是虚函数调用在IDA中的反编译结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;(*(void (__thiscall **)(_DWORD *))*v6)(v6);
(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);
(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里v6是指向v4，来到v4的初始化，可以看到存在一个&lt;code&gt;virtual function table&lt;/code&gt;也就是虚函数表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;_DWORD *__thiscall sub_411880(_DWORD *this)
&amp;#123;
  *this = &amp;amp;Test::`vftable&amp;#39;;
  return this;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据前面VS中的调试可以知道这个表中存放的是增量链接：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png&#34; alt=&#34;image-202202221822914&#34;&gt;&lt;/p&gt;
&lt;p&gt;基本上关于虚函数在IDA中的体现就介绍完了&lt;/p&gt;
&lt;h3 id=&#34;一道逆向题&#34;&gt;&lt;a href=&#34;#一道逆向题&#34; class=&#34;headerlink&#34; title=&#34;一道逆向题&#34;&gt;&lt;/a&gt;一道逆向题&lt;/h3&gt;&lt;p&gt;SWPUCTF2019 easyRE，同样来到main函数，本文重点在虚函数的创建以及体现，其他部分不做分析：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF
  _DWORD *v5; // [esp+4h] [ebp-88h]
  _DWORD *v6; // [esp+8h] [ebp-84h]
  int v7; // [esp+Ch] [ebp-80h]
  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF
  int v9; // [esp+88h] [ebp-4h]

  if ( sub_40EF90() )
    return 1;
  sub_4026C0(0x6Cu);
  sub_401FE0(v4[27], v5);
  v9 = 0;
  v6 = v4;
  sub_40F360(v8);
  sub_40F080(v4[0], v4[1]);
  v5 = v4;
  sub_40F360(v8);
  sub_40F150(argc, (int)argv);
  v7 = 0;
  v9 = -1;
  sub_4021C0(v8);
  return v7;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入sub_401FE0:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;_DWORD *__thiscall sub_401FE0(_DWORD *this)
&amp;#123;
  int i; // [esp+4h] [ebp-14h]

  *this = &amp;amp;EASYRE::`vftable&amp;#39;;
  this[1] = 0;
  *((_BYTE *)this + 52) = 8;
  *((_BYTE *)this + 53) = -22;
  *((_BYTE *)this + 54) = 88;
  *((_BYTE *)this + 55) = -34;
  *((_BYTE *)this + 56) = -108;
  *((_BYTE *)this + 57) = -48;
  *((_BYTE *)this + 58) = 59;
  *((_BYTE *)this + 59) = -66;
  *((_BYTE *)this + 60) = -120;
  *((_BYTE *)this + 61) = -44;
  *((_BYTE *)this + 62) = 50;
  *((_BYTE *)this + 63) = -74;
  *((_BYTE *)this + 64) = 20;
  *((_BYTE *)this + 65) = -126;
  *((_BYTE *)this + 66) = -73;
  *((_BYTE *)this + 67) = -81;
  *((_BYTE *)this + 68) = 20;
  *((_BYTE *)this + 69) = 84;
  *((_BYTE *)this + 70) = 127;
  *((_BYTE *)this + 71) = -49;
  qmemcpy(this + 18, &amp;quot;  03\&amp;quot;3   0 203\&amp;quot;   $ &amp;quot;, 20);
  sub_4030A0(this + 23);
  sub_402DE0(this + 26);
  for ( i = 0; i &amp;lt; 40; ++i )
    *((_BYTE *)this + i + 12) = 0;
  return this;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png&#34; alt=&#34;image-202202221822478&#34;&gt;&lt;/p&gt;
&lt;p&gt;来到校验flag的函数，可以发现存在虚函数的特征：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;BOOL __thiscall sub_4024B0(_DWORD *this, int flag)
&amp;#123;
  BOOL result; // eax

  this[2] = flag;
  result = 0;
  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )
  &amp;#123;
    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )
      result = 1;
  &amp;#125;
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里this指针指向的首地址是&lt;code&gt;0x4124E4&lt;/code&gt;，根据偏移可以映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&amp;gt; 0x4124F0 -&amp;gt; sub_402500
(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&amp;gt; 0x4124FC -&amp;gt; sub_4026E0
(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&amp;gt; 0x41250C -&amp;gt; sub_402A00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;BOOL __thiscall sub_4024B0(_DWORD *this, int flag)
&amp;#123;
  BOOL result; // eax

  this[2] = flag;
  result = 0;
  if ( sub_402500() )
  &amp;#123;
    sub_4026E0();
    if ( sub_402A00() )
      result = 1;
  &amp;#125;
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;Reverse中虚函数-x2F-虚表浅析-2&#34;&gt;&lt;a href=&#34;#Reverse中虚函数-x2F-虚表浅析-2&#34; class=&#34;headerlink&#34; title=&#34;Reverse中虚函数&amp;#x2F;虚表浅析&#34;&gt;&lt;/a&gt;Reverse中虚函数&amp;#x2F;虚表浅析&lt;/h2&gt;&lt;h3 id=&#34;this指针-2&#34;&gt;&lt;a href=&#34;#this指针-2&#34; class=&#34;headerlink&#34; title=&#34;this指针&#34;&gt;&lt;/a&gt;this指针&lt;/h3&gt;&lt;p&gt;在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：&lt;/p&gt;
&lt;p&gt;一个简单的demo来测试一下this指针：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int main() &amp;#123;
    struct Test&amp;#123;
        int a;
        int b;
        int c;
    &amp;#125;;
    Test* test = new Test;
    test-&amp;gt;a = 100;
    printf(&amp;quot;%d&amp;quot;, *test);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png&#34; alt=&#34;image-202202221821809&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png&#34; alt=&#34;image-202202221821374&#34;&gt;&lt;/p&gt;
&lt;p&gt;demo2：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;


struct Test &amp;#123;
    int a;
    int b;
    int c;
    virtual void func1();
    virtual void func2();
    virtual void func3();

&amp;#125;;

void Test::func1() &amp;#123;
    printf(&amp;quot;func1&amp;quot;);
&amp;#125;

void Test::func2() &amp;#123;
    printf(&amp;quot;func2&amp;quot;);
&amp;#125;

void Test::func3() &amp;#123;
    printf(&amp;quot;func3&amp;quot;);
&amp;#125;

int main() &amp;#123;

    Test* test = new Test;
    test-&amp;gt;a = 100;
    test-&amp;gt;func1();
    printf(&amp;quot;%d&amp;quot;, *test);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为&lt;code&gt;func1&lt;/code&gt;、&lt;code&gt;func2&lt;/code&gt;、&lt;code&gt;func3&lt;/code&gt;，我们注意到这里call的函数内容来自&lt;code&gt;[edx]&lt;/code&gt;、&lt;code&gt;[edx+4]&lt;/code&gt;、&lt;code&gt;[edx+8]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png&#34; alt=&#34;image-202202221822350&#34;&gt;&lt;/p&gt;
&lt;p&gt;VS的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类or结构体中，如果其虚函数的数量大于1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png&#34; alt=&#34;image-202202221822816&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是在VS中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png&#34; alt=&#34;image-202202221822113&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png&#34; alt=&#34;image-202202221822536&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;IDA加载该程序-1&#34;&gt;&lt;a href=&#34;#IDA加载该程序-1&#34; class=&#34;headerlink&#34; title=&#34;IDA加载该程序&#34;&gt;&lt;/a&gt;IDA加载该程序&lt;/h3&gt;&lt;p&gt;直接来到main函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main_0(int argc, const char **argv, const char **envp)
&amp;#123;
  _DWORD *v4; // [esp+Ch] [ebp-DCh]
  void *v5; // [esp+14h] [ebp-D4h]
  _DWORD *v6; // [esp+E0h] [ebp-8h]

  __CheckForDebuggerJustMyCode(&amp;amp;unk_41C066);
  v5 = operator new(0x10u);
  if ( v5 )
    v4 = (_DWORD *)sub_411460(v5);
  else
    v4 = 0;
  v6 = v4;
  v4[1] = 100;
  (*(void (__thiscall **)(_DWORD *))*v6)(v6);
  (*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);
  (*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);
  sub_411442(&amp;quot;%d&amp;quot;, *v4);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据源码，这一部分就是虚函数调用在IDA中的反编译结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;(*(void (__thiscall **)(_DWORD *))*v6)(v6);
(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);
(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里v6是指向v4，来到v4的初始化，可以看到存在一个&lt;code&gt;virtual function table&lt;/code&gt;也就是虚函数表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;_DWORD *__thiscall sub_411880(_DWORD *this)
&amp;#123;
  *this = &amp;amp;Test::`vftable&amp;#39;;
  return this;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据前面VS中的调试可以知道这个表中存放的是增量链接：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png&#34; alt=&#34;image-202202221822914&#34;&gt;&lt;/p&gt;
&lt;p&gt;基本上关于虚函数在IDA中的体现就介绍完了&lt;/p&gt;
&lt;h3 id=&#34;一道逆向题-1&#34;&gt;&lt;a href=&#34;#一道逆向题-1&#34; class=&#34;headerlink&#34; title=&#34;一道逆向题&#34;&gt;&lt;/a&gt;一道逆向题&lt;/h3&gt;&lt;p&gt;SWPUCTF2019 easyRE，同样来到main函数，本文重点在虚函数的创建以及体现，其他部分不做分析：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF
  _DWORD *v5; // [esp+4h] [ebp-88h]
  _DWORD *v6; // [esp+8h] [ebp-84h]
  int v7; // [esp+Ch] [ebp-80h]
  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF
  int v9; // [esp+88h] [ebp-4h]

  if ( sub_40EF90() )
    return 1;
  sub_4026C0(0x6Cu);
  sub_401FE0(v4[27], v5);
  v9 = 0;
  v6 = v4;
  sub_40F360(v8);
  sub_40F080(v4[0], v4[1]);
  v5 = v4;
  sub_40F360(v8);
  sub_40F150(argc, (int)argv);
  v7 = 0;
  v9 = -1;
  sub_4021C0(v8);
  return v7;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入sub_401FE0:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;_DWORD *__thiscall sub_401FE0(_DWORD *this)
&amp;#123;
  int i; // [esp+4h] [ebp-14h]

  *this = &amp;amp;EASYRE::`vftable&amp;#39;;
  this[1] = 0;
  *((_BYTE *)this + 52) = 8;
  *((_BYTE *)this + 53) = -22;
  *((_BYTE *)this + 54) = 88;
  *((_BYTE *)this + 55) = -34;
  *((_BYTE *)this + 56) = -108;
  *((_BYTE *)this + 57) = -48;
  *((_BYTE *)this + 58) = 59;
  *((_BYTE *)this + 59) = -66;
  *((_BYTE *)this + 60) = -120;
  *((_BYTE *)this + 61) = -44;
  *((_BYTE *)this + 62) = 50;
  *((_BYTE *)this + 63) = -74;
  *((_BYTE *)this + 64) = 20;
  *((_BYTE *)this + 65) = -126;
  *((_BYTE *)this + 66) = -73;
  *((_BYTE *)this + 67) = -81;
  *((_BYTE *)this + 68) = 20;
  *((_BYTE *)this + 69) = 84;
  *((_BYTE *)this + 70) = 127;
  *((_BYTE *)this + 71) = -49;
  qmemcpy(this + 18, &amp;quot;  03\&amp;quot;3   0 203\&amp;quot;   $ &amp;quot;, 20);
  sub_4030A0(this + 23);
  sub_402DE0(this + 26);
  for ( i = 0; i &amp;lt; 40; ++i )
    *((_BYTE *)this + i + 12) = 0;
  return this;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png&#34; alt=&#34;image-202202221822478&#34;&gt;&lt;/p&gt;
&lt;p&gt;来到校验flag的函数，可以发现存在虚函数的特征：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;BOOL __thiscall sub_4024B0(_DWORD *this, int flag)
&amp;#123;
  BOOL result; // eax

  this[2] = flag;
  result = 0;
  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )
  &amp;#123;
    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )
      result = 1;
  &amp;#125;
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里this指针指向的首地址是&lt;code&gt;0x4124E4&lt;/code&gt;，根据偏移可以映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&amp;gt; 0x4124F0 -&amp;gt; sub_402500
(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&amp;gt; 0x4124FC -&amp;gt; sub_4026E0
(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&amp;gt; 0x41250C -&amp;gt; sub_402A00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;BOOL __thiscall sub_4024B0(_DWORD *this, int flag)
&amp;#123;
  BOOL result; // eax

  this[2] = flag;
  result = 0;
  if ( sub_402500() )
  &amp;#123;
    sub_4026E0();
    if ( sub_402A00() )
      result = 1;
  &amp;#125;
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;demo2：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;


struct Test &amp;#123;
    int a;
    int b;
    int c;
    virtual void func1();
    virtual void func2();
    virtual void func3();

&amp;#125;;

void Test::func1() &amp;#123;
    printf(&amp;quot;func1&amp;quot;);
&amp;#125;

void Test::func2() &amp;#123;
    printf(&amp;quot;func2&amp;quot;);
&amp;#125;

void Test::func3() &amp;#123;
    printf(&amp;quot;func3&amp;quot;);
&amp;#125;

int main() &amp;#123;

    Test* test = new Test;
    test-&amp;gt;a = 100;
    test-&amp;gt;func1();
    printf(&amp;quot;%d&amp;quot;, *test);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为&lt;code&gt;func1&lt;/code&gt;、&lt;code&gt;func2&lt;/code&gt;、&lt;code&gt;func3&lt;/code&gt;，我们注意到这里call的函数内容来自&lt;code&gt;[edx]&lt;/code&gt;、&lt;code&gt;[edx+4]&lt;/code&gt;、&lt;code&gt;[edx+8]&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;Reverse中虚函数-x2F-虚表浅析-3&#34;&gt;&lt;a href=&#34;#Reverse中虚函数-x2F-虚表浅析-3&#34; class=&#34;headerlink&#34; title=&#34;Reverse中虚函数&amp;#x2F;虚表浅析&#34;&gt;&lt;/a&gt;Reverse中虚函数&amp;#x2F;虚表浅析&lt;/h2&gt;&lt;h3 id=&#34;this指针-3&#34;&gt;&lt;a href=&#34;#this指针-3&#34; class=&#34;headerlink&#34; title=&#34;this指针&#34;&gt;&lt;/a&gt;this指针&lt;/h3&gt;&lt;p&gt;在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：&lt;/p&gt;
&lt;p&gt;一个简单的demo来测试一下this指针：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int main() &amp;#123;
    struct Test&amp;#123;
        int a;
        int b;
        int c;
    &amp;#125;;
    Test* test = new Test;
    test-&amp;gt;a = 100;
    printf(&amp;quot;%d&amp;quot;, *test);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png&#34; alt=&#34;image-202202221821809&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png&#34; alt=&#34;image-202202221821374&#34;&gt;&lt;/p&gt;
&lt;p&gt;demo2：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;


struct Test &amp;#123;
    int a;
    int b;
    int c;
    virtual void func1();
    virtual void func2();
    virtual void func3();

&amp;#125;;

void Test::func1() &amp;#123;
    printf(&amp;quot;func1&amp;quot;);
&amp;#125;

void Test::func2() &amp;#123;
    printf(&amp;quot;func2&amp;quot;);
&amp;#125;

void Test::func3() &amp;#123;
    printf(&amp;quot;func3&amp;quot;);
&amp;#125;

int main() &amp;#123;

    Test* test = new Test;
    test-&amp;gt;a = 100;
    test-&amp;gt;func1();
    printf(&amp;quot;%d&amp;quot;, *test);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为&lt;code&gt;func1&lt;/code&gt;、&lt;code&gt;func2&lt;/code&gt;、&lt;code&gt;func3&lt;/code&gt;，我们注意到这里call的函数内容来自&lt;code&gt;[edx]&lt;/code&gt;、&lt;code&gt;[edx+4]&lt;/code&gt;、&lt;code&gt;[edx+8]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png&#34; alt=&#34;image-202202221822350&#34;&gt;&lt;/p&gt;
&lt;p&gt;VS的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类or结构体中，如果其虚函数的数量大于1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png&#34; alt=&#34;image-202202221822816&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是在VS中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png&#34; alt=&#34;image-202202221822113&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png&#34; alt=&#34;image-202202221822536&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;IDA加载该程序-2&#34;&gt;&lt;a href=&#34;#IDA加载该程序-2&#34; class=&#34;headerlink&#34; title=&#34;IDA加载该程序&#34;&gt;&lt;/a&gt;IDA加载该程序&lt;/h3&gt;&lt;p&gt;直接来到main函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main_0(int argc, const char **argv, const char **envp)
&amp;#123;
  _DWORD *v4; // [esp+Ch] [ebp-DCh]
  void *v5; // [esp+14h] [ebp-D4h]
  _DWORD *v6; // [esp+E0h] [ebp-8h]

  __CheckForDebuggerJustMyCode(&amp;amp;unk_41C066);
  v5 = operator new(0x10u);
  if ( v5 )
    v4 = (_DWORD *)sub_411460(v5);
  else
    v4 = 0;
  v6 = v4;
  v4[1] = 100;
  (*(void (__thiscall **)(_DWORD *))*v6)(v6);
  (*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);
  (*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);
  sub_411442(&amp;quot;%d&amp;quot;, *v4);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据源码，这一部分就是虚函数调用在IDA中的反编译结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;(*(void (__thiscall **)(_DWORD *))*v6)(v6);
(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);
(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里v6是指向v4，来到v4的初始化，可以看到存在一个&lt;code&gt;virtual function table&lt;/code&gt;也就是虚函数表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;_DWORD *__thiscall sub_411880(_DWORD *this)
&amp;#123;
  *this = &amp;amp;Test::`vftable&amp;#39;;
  return this;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据前面VS中的调试可以知道这个表中存放的是增量链接：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png&#34; alt=&#34;image-202202221822914&#34;&gt;&lt;/p&gt;
&lt;p&gt;基本上关于虚函数在IDA中的体现就介绍完了&lt;/p&gt;
&lt;h3 id=&#34;一道逆向题-2&#34;&gt;&lt;a href=&#34;#一道逆向题-2&#34; class=&#34;headerlink&#34; title=&#34;一道逆向题&#34;&gt;&lt;/a&gt;一道逆向题&lt;/h3&gt;&lt;p&gt;SWPUCTF2019 easyRE，同样来到main函数，本文重点在虚函数的创建以及体现，其他部分不做分析：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF
  _DWORD *v5; // [esp+4h] [ebp-88h]
  _DWORD *v6; // [esp+8h] [ebp-84h]
  int v7; // [esp+Ch] [ebp-80h]
  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF
  int v9; // [esp+88h] [ebp-4h]

  if ( sub_40EF90() )
    return 1;
  sub_4026C0(0x6Cu);
  sub_401FE0(v4[27], v5);
  v9 = 0;
  v6 = v4;
  sub_40F360(v8);
  sub_40F080(v4[0], v4[1]);
  v5 = v4;
  sub_40F360(v8);
  sub_40F150(argc, (int)argv);
  v7 = 0;
  v9 = -1;
  sub_4021C0(v8);
  return v7;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入sub_401FE0:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;_DWORD *__thiscall sub_401FE0(_DWORD *this)
&amp;#123;
  int i; // [esp+4h] [ebp-14h]

  *this = &amp;amp;EASYRE::`vftable&amp;#39;;
  this[1] = 0;
  *((_BYTE *)this + 52) = 8;
  *((_BYTE *)this + 53) = -22;
  *((_BYTE *)this + 54) = 88;
  *((_BYTE *)this + 55) = -34;
  *((_BYTE *)this + 56) = -108;
  *((_BYTE *)this + 57) = -48;
  *((_BYTE *)this + 58) = 59;
  *((_BYTE *)this + 59) = -66;
  *((_BYTE *)this + 60) = -120;
  *((_BYTE *)this + 61) = -44;
  *((_BYTE *)this + 62) = 50;
  *((_BYTE *)this + 63) = -74;
  *((_BYTE *)this + 64) = 20;
  *((_BYTE *)this + 65) = -126;
  *((_BYTE *)this + 66) = -73;
  *((_BYTE *)this + 67) = -81;
  *((_BYTE *)this + 68) = 20;
  *((_BYTE *)this + 69) = 84;
  *((_BYTE *)this + 70) = 127;
  *((_BYTE *)this + 71) = -49;
  qmemcpy(this + 18, &amp;quot;  03\&amp;quot;3   0 203\&amp;quot;   $ &amp;quot;, 20);
  sub_4030A0(this + 23);
  sub_402DE0(this + 26);
  for ( i = 0; i &amp;lt; 40; ++i )
    *((_BYTE *)this + i + 12) = 0;
  return this;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png&#34; alt=&#34;image-202202221822478&#34;&gt;&lt;/p&gt;
&lt;p&gt;来到校验flag的函数，可以发现存在虚函数的特征：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;BOOL __thiscall sub_4024B0(_DWORD *this, int flag)
&amp;#123;
  BOOL result; // eax

  this[2] = flag;
  result = 0;
  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )
  &amp;#123;
    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )
      result = 1;
  &amp;#125;
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里this指针指向的首地址是&lt;code&gt;0x4124E4&lt;/code&gt;，根据偏移可以映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&amp;gt; 0x4124F0 -&amp;gt; sub_402500
(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&amp;gt; 0x4124FC -&amp;gt; sub_4026E0
(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&amp;gt; 0x41250C -&amp;gt; sub_402A00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;BOOL __thiscall sub_4024B0(_DWORD *this, int flag)
&amp;#123;
  BOOL result; // eax

  this[2] = flag;
  result = 0;
  if ( sub_402500() )
  &amp;#123;
    sub_4026E0();
    if ( sub_402A00() )
      result = 1;
  &amp;#125;
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;VS的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类or结构体中，如果其虚函数的数量大于1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：&lt;/p&gt;
&lt;h2 id=&#34;Reverse中虚函数-x2F-虚表浅析-4&#34;&gt;&lt;a href=&#34;#Reverse中虚函数-x2F-虚表浅析-4&#34; class=&#34;headerlink&#34; title=&#34;Reverse中虚函数&amp;#x2F;虚表浅析&#34;&gt;&lt;/a&gt;Reverse中虚函数&amp;#x2F;虚表浅析&lt;/h2&gt;&lt;h3 id=&#34;this指针-4&#34;&gt;&lt;a href=&#34;#this指针-4&#34; class=&#34;headerlink&#34; title=&#34;this指针&#34;&gt;&lt;/a&gt;this指针&lt;/h3&gt;&lt;p&gt;在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：&lt;/p&gt;
&lt;p&gt;一个简单的demo来测试一下this指针：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int main() &amp;#123;
    struct Test&amp;#123;
        int a;
        int b;
        int c;
    &amp;#125;;
    Test* test = new Test;
    test-&amp;gt;a = 100;
    printf(&amp;quot;%d&amp;quot;, *test);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png&#34; alt=&#34;image-202202221821809&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png&#34; alt=&#34;image-202202221821374&#34;&gt;&lt;/p&gt;
&lt;p&gt;demo2：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;


struct Test &amp;#123;
    int a;
    int b;
    int c;
    virtual void func1();
    virtual void func2();
    virtual void func3();

&amp;#125;;

void Test::func1() &amp;#123;
    printf(&amp;quot;func1&amp;quot;);
&amp;#125;

void Test::func2() &amp;#123;
    printf(&amp;quot;func2&amp;quot;);
&amp;#125;

void Test::func3() &amp;#123;
    printf(&amp;quot;func3&amp;quot;);
&amp;#125;

int main() &amp;#123;

    Test* test = new Test;
    test-&amp;gt;a = 100;
    test-&amp;gt;func1();
    printf(&amp;quot;%d&amp;quot;, *test);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为&lt;code&gt;func1&lt;/code&gt;、&lt;code&gt;func2&lt;/code&gt;、&lt;code&gt;func3&lt;/code&gt;，我们注意到这里call的函数内容来自&lt;code&gt;[edx]&lt;/code&gt;、&lt;code&gt;[edx+4]&lt;/code&gt;、&lt;code&gt;[edx+8]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png&#34; alt=&#34;image-202202221822350&#34;&gt;&lt;/p&gt;
&lt;p&gt;VS的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类or结构体中，如果其虚函数的数量大于1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png&#34; alt=&#34;image-202202221822816&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是在VS中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png&#34; alt=&#34;image-202202221822113&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png&#34; alt=&#34;image-202202221822536&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;IDA加载该程序-3&#34;&gt;&lt;a href=&#34;#IDA加载该程序-3&#34; class=&#34;headerlink&#34; title=&#34;IDA加载该程序&#34;&gt;&lt;/a&gt;IDA加载该程序&lt;/h3&gt;&lt;p&gt;直接来到main函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main_0(int argc, const char **argv, const char **envp)
&amp;#123;
  _DWORD *v4; // [esp+Ch] [ebp-DCh]
  void *v5; // [esp+14h] [ebp-D4h]
  _DWORD *v6; // [esp+E0h] [ebp-8h]

  __CheckForDebuggerJustMyCode(&amp;amp;unk_41C066);
  v5 = operator new(0x10u);
  if ( v5 )
    v4 = (_DWORD *)sub_411460(v5);
  else
    v4 = 0;
  v6 = v4;
  v4[1] = 100;
  (*(void (__thiscall **)(_DWORD *))*v6)(v6);
  (*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);
  (*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);
  sub_411442(&amp;quot;%d&amp;quot;, *v4);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据源码，这一部分就是虚函数调用在IDA中的反编译结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;(*(void (__thiscall **)(_DWORD *))*v6)(v6);
(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);
(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里v6是指向v4，来到v4的初始化，可以看到存在一个&lt;code&gt;virtual function table&lt;/code&gt;也就是虚函数表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;_DWORD *__thiscall sub_411880(_DWORD *this)
&amp;#123;
  *this = &amp;amp;Test::`vftable&amp;#39;;
  return this;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据前面VS中的调试可以知道这个表中存放的是增量链接：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png&#34; alt=&#34;image-202202221822914&#34;&gt;&lt;/p&gt;
&lt;p&gt;基本上关于虚函数在IDA中的体现就介绍完了&lt;/p&gt;
&lt;h3 id=&#34;一道逆向题-3&#34;&gt;&lt;a href=&#34;#一道逆向题-3&#34; class=&#34;headerlink&#34; title=&#34;一道逆向题&#34;&gt;&lt;/a&gt;一道逆向题&lt;/h3&gt;&lt;p&gt;SWPUCTF2019 easyRE，同样来到main函数，本文重点在虚函数的创建以及体现，其他部分不做分析：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF
  _DWORD *v5; // [esp+4h] [ebp-88h]
  _DWORD *v6; // [esp+8h] [ebp-84h]
  int v7; // [esp+Ch] [ebp-80h]
  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF
  int v9; // [esp+88h] [ebp-4h]

  if ( sub_40EF90() )
    return 1;
  sub_4026C0(0x6Cu);
  sub_401FE0(v4[27], v5);
  v9 = 0;
  v6 = v4;
  sub_40F360(v8);
  sub_40F080(v4[0], v4[1]);
  v5 = v4;
  sub_40F360(v8);
  sub_40F150(argc, (int)argv);
  v7 = 0;
  v9 = -1;
  sub_4021C0(v8);
  return v7;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入sub_401FE0:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;_DWORD *__thiscall sub_401FE0(_DWORD *this)
&amp;#123;
  int i; // [esp+4h] [ebp-14h]

  *this = &amp;amp;EASYRE::`vftable&amp;#39;;
  this[1] = 0;
  *((_BYTE *)this + 52) = 8;
  *((_BYTE *)this + 53) = -22;
  *((_BYTE *)this + 54) = 88;
  *((_BYTE *)this + 55) = -34;
  *((_BYTE *)this + 56) = -108;
  *((_BYTE *)this + 57) = -48;
  *((_BYTE *)this + 58) = 59;
  *((_BYTE *)this + 59) = -66;
  *((_BYTE *)this + 60) = -120;
  *((_BYTE *)this + 61) = -44;
  *((_BYTE *)this + 62) = 50;
  *((_BYTE *)this + 63) = -74;
  *((_BYTE *)this + 64) = 20;
  *((_BYTE *)this + 65) = -126;
  *((_BYTE *)this + 66) = -73;
  *((_BYTE *)this + 67) = -81;
  *((_BYTE *)this + 68) = 20;
  *((_BYTE *)this + 69) = 84;
  *((_BYTE *)this + 70) = 127;
  *((_BYTE *)this + 71) = -49;
  qmemcpy(this + 18, &amp;quot;  03\&amp;quot;3   0 203\&amp;quot;   $ &amp;quot;, 20);
  sub_4030A0(this + 23);
  sub_402DE0(this + 26);
  for ( i = 0; i &amp;lt; 40; ++i )
    *((_BYTE *)this + i + 12) = 0;
  return this;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png&#34; alt=&#34;image-202202221822478&#34;&gt;&lt;/p&gt;
&lt;p&gt;来到校验flag的函数，可以发现存在虚函数的特征：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;BOOL __thiscall sub_4024B0(_DWORD *this, int flag)
&amp;#123;
  BOOL result; // eax

  this[2] = flag;
  result = 0;
  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )
  &amp;#123;
    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )
      result = 1;
  &amp;#125;
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里this指针指向的首地址是&lt;code&gt;0x4124E4&lt;/code&gt;，根据偏移可以映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&amp;gt; 0x4124F0 -&amp;gt; sub_402500
(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&amp;gt; 0x4124FC -&amp;gt; sub_4026E0
(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&amp;gt; 0x41250C -&amp;gt; sub_402A00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;BOOL __thiscall sub_4024B0(_DWORD *this, int flag)
&amp;#123;
  BOOL result; // eax

  this[2] = flag;
  result = 0;
  if ( sub_402500() )
  &amp;#123;
    sub_4026E0();
    if ( sub_402A00() )
      result = 1;
  &amp;#125;
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是在VS中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：&lt;/p&gt;
&lt;h2 id=&#34;Reverse中虚函数-x2F-虚表浅析-5&#34;&gt;&lt;a href=&#34;#Reverse中虚函数-x2F-虚表浅析-5&#34; class=&#34;headerlink&#34; title=&#34;Reverse中虚函数&amp;#x2F;虚表浅析&#34;&gt;&lt;/a&gt;Reverse中虚函数&amp;#x2F;虚表浅析&lt;/h2&gt;&lt;h3 id=&#34;this指针-5&#34;&gt;&lt;a href=&#34;#this指针-5&#34; class=&#34;headerlink&#34; title=&#34;this指针&#34;&gt;&lt;/a&gt;this指针&lt;/h3&gt;&lt;p&gt;在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：&lt;/p&gt;
&lt;p&gt;一个简单的demo来测试一下this指针：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int main() &amp;#123;
    struct Test&amp;#123;
        int a;
        int b;
        int c;
    &amp;#125;;
    Test* test = new Test;
    test-&amp;gt;a = 100;
    printf(&amp;quot;%d&amp;quot;, *test);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png&#34; alt=&#34;image-202202221821809&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png&#34; alt=&#34;image-202202221821374&#34;&gt;&lt;/p&gt;
&lt;p&gt;demo2：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;


struct Test &amp;#123;
    int a;
    int b;
    int c;
    virtual void func1();
    virtual void func2();
    virtual void func3();

&amp;#125;;

void Test::func1() &amp;#123;
    printf(&amp;quot;func1&amp;quot;);
&amp;#125;

void Test::func2() &amp;#123;
    printf(&amp;quot;func2&amp;quot;);
&amp;#125;

void Test::func3() &amp;#123;
    printf(&amp;quot;func3&amp;quot;);
&amp;#125;

int main() &amp;#123;

    Test* test = new Test;
    test-&amp;gt;a = 100;
    test-&amp;gt;func1();
    printf(&amp;quot;%d&amp;quot;, *test);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为&lt;code&gt;func1&lt;/code&gt;、&lt;code&gt;func2&lt;/code&gt;、&lt;code&gt;func3&lt;/code&gt;，我们注意到这里call的函数内容来自&lt;code&gt;[edx]&lt;/code&gt;、&lt;code&gt;[edx+4]&lt;/code&gt;、&lt;code&gt;[edx+8]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png&#34; alt=&#34;image-202202221822350&#34;&gt;&lt;/p&gt;
&lt;p&gt;VS的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类or结构体中，如果其虚函数的数量大于1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png&#34; alt=&#34;image-202202221822816&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是在VS中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png&#34; alt=&#34;image-202202221822113&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png&#34; alt=&#34;image-202202221822536&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;IDA加载该程序-4&#34;&gt;&lt;a href=&#34;#IDA加载该程序-4&#34; class=&#34;headerlink&#34; title=&#34;IDA加载该程序&#34;&gt;&lt;/a&gt;IDA加载该程序&lt;/h3&gt;&lt;p&gt;直接来到main函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main_0(int argc, const char **argv, const char **envp)
&amp;#123;
  _DWORD *v4; // [esp+Ch] [ebp-DCh]
  void *v5; // [esp+14h] [ebp-D4h]
  _DWORD *v6; // [esp+E0h] [ebp-8h]

  __CheckForDebuggerJustMyCode(&amp;amp;unk_41C066);
  v5 = operator new(0x10u);
  if ( v5 )
    v4 = (_DWORD *)sub_411460(v5);
  else
    v4 = 0;
  v6 = v4;
  v4[1] = 100;
  (*(void (__thiscall **)(_DWORD *))*v6)(v6);
  (*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);
  (*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);
  sub_411442(&amp;quot;%d&amp;quot;, *v4);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据源码，这一部分就是虚函数调用在IDA中的反编译结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;(*(void (__thiscall **)(_DWORD *))*v6)(v6);
(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);
(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里v6是指向v4，来到v4的初始化，可以看到存在一个&lt;code&gt;virtual function table&lt;/code&gt;也就是虚函数表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;_DWORD *__thiscall sub_411880(_DWORD *this)
&amp;#123;
  *this = &amp;amp;Test::`vftable&amp;#39;;
  return this;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据前面VS中的调试可以知道这个表中存放的是增量链接：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png&#34; alt=&#34;image-202202221822914&#34;&gt;&lt;/p&gt;
&lt;p&gt;基本上关于虚函数在IDA中的体现就介绍完了&lt;/p&gt;
&lt;h3 id=&#34;一道逆向题-4&#34;&gt;&lt;a href=&#34;#一道逆向题-4&#34; class=&#34;headerlink&#34; title=&#34;一道逆向题&#34;&gt;&lt;/a&gt;一道逆向题&lt;/h3&gt;&lt;p&gt;SWPUCTF2019 easyRE，同样来到main函数，本文重点在虚函数的创建以及体现，其他部分不做分析：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF
  _DWORD *v5; // [esp+4h] [ebp-88h]
  _DWORD *v6; // [esp+8h] [ebp-84h]
  int v7; // [esp+Ch] [ebp-80h]
  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF
  int v9; // [esp+88h] [ebp-4h]

  if ( sub_40EF90() )
    return 1;
  sub_4026C0(0x6Cu);
  sub_401FE0(v4[27], v5);
  v9 = 0;
  v6 = v4;
  sub_40F360(v8);
  sub_40F080(v4[0], v4[1]);
  v5 = v4;
  sub_40F360(v8);
  sub_40F150(argc, (int)argv);
  v7 = 0;
  v9 = -1;
  sub_4021C0(v8);
  return v7;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入sub_401FE0:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;_DWORD *__thiscall sub_401FE0(_DWORD *this)
&amp;#123;
  int i; // [esp+4h] [ebp-14h]

  *this = &amp;amp;EASYRE::`vftable&amp;#39;;
  this[1] = 0;
  *((_BYTE *)this + 52) = 8;
  *((_BYTE *)this + 53) = -22;
  *((_BYTE *)this + 54) = 88;
  *((_BYTE *)this + 55) = -34;
  *((_BYTE *)this + 56) = -108;
  *((_BYTE *)this + 57) = -48;
  *((_BYTE *)this + 58) = 59;
  *((_BYTE *)this + 59) = -66;
  *((_BYTE *)this + 60) = -120;
  *((_BYTE *)this + 61) = -44;
  *((_BYTE *)this + 62) = 50;
  *((_BYTE *)this + 63) = -74;
  *((_BYTE *)this + 64) = 20;
  *((_BYTE *)this + 65) = -126;
  *((_BYTE *)this + 66) = -73;
  *((_BYTE *)this + 67) = -81;
  *((_BYTE *)this + 68) = 20;
  *((_BYTE *)this + 69) = 84;
  *((_BYTE *)this + 70) = 127;
  *((_BYTE *)this + 71) = -49;
  qmemcpy(this + 18, &amp;quot;  03\&amp;quot;3   0 203\&amp;quot;   $ &amp;quot;, 20);
  sub_4030A0(this + 23);
  sub_402DE0(this + 26);
  for ( i = 0; i &amp;lt; 40; ++i )
    *((_BYTE *)this + i + 12) = 0;
  return this;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png&#34; alt=&#34;image-202202221822478&#34;&gt;&lt;/p&gt;
&lt;p&gt;来到校验flag的函数，可以发现存在虚函数的特征：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;BOOL __thiscall sub_4024B0(_DWORD *this, int flag)
&amp;#123;
  BOOL result; // eax

  this[2] = flag;
  result = 0;
  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )
  &amp;#123;
    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )
      result = 1;
  &amp;#125;
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里this指针指向的首地址是&lt;code&gt;0x4124E4&lt;/code&gt;，根据偏移可以映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&amp;gt; 0x4124F0 -&amp;gt; sub_402500
(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&amp;gt; 0x4124FC -&amp;gt; sub_4026E0
(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&amp;gt; 0x41250C -&amp;gt; sub_402A00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;BOOL __thiscall sub_4024B0(_DWORD *this, int flag)
&amp;#123;
  BOOL result; // eax

  this[2] = flag;
  result = 0;
  if ( sub_402500() )
  &amp;#123;
    sub_4026E0();
    if ( sub_402A00() )
      result = 1;
  &amp;#125;
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Reverse中虚函数-x2F-虚表浅析-6&#34;&gt;&lt;a href=&#34;#Reverse中虚函数-x2F-虚表浅析-6&#34; class=&#34;headerlink&#34; title=&#34;Reverse中虚函数&amp;#x2F;虚表浅析&#34;&gt;&lt;/a&gt;Reverse中虚函数&amp;#x2F;虚表浅析&lt;/h2&gt;&lt;h3 id=&#34;this指针-6&#34;&gt;&lt;a href=&#34;#this指针-6&#34; class=&#34;headerlink&#34; title=&#34;this指针&#34;&gt;&lt;/a&gt;this指针&lt;/h3&gt;&lt;p&gt;在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：&lt;/p&gt;
&lt;p&gt;一个简单的demo来测试一下this指针：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int main() &amp;#123;
    struct Test&amp;#123;
        int a;
        int b;
        int c;
    &amp;#125;;
    Test* test = new Test;
    test-&amp;gt;a = 100;
    printf(&amp;quot;%d&amp;quot;, *test);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png&#34; alt=&#34;image-202202221821809&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png&#34; alt=&#34;image-202202221821374&#34;&gt;&lt;/p&gt;
&lt;p&gt;demo2：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;


struct Test &amp;#123;
    int a;
    int b;
    int c;
    virtual void func1();
    virtual void func2();
    virtual void func3();

&amp;#125;;

void Test::func1() &amp;#123;
    printf(&amp;quot;func1&amp;quot;);
&amp;#125;

void Test::func2() &amp;#123;
    printf(&amp;quot;func2&amp;quot;);
&amp;#125;

void Test::func3() &amp;#123;
    printf(&amp;quot;func3&amp;quot;);
&amp;#125;

int main() &amp;#123;

    Test* test = new Test;
    test-&amp;gt;a = 100;
    test-&amp;gt;func1();
    printf(&amp;quot;%d&amp;quot;, *test);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为&lt;code&gt;func1&lt;/code&gt;、&lt;code&gt;func2&lt;/code&gt;、&lt;code&gt;func3&lt;/code&gt;，我们注意到这里call的函数内容来自&lt;code&gt;[edx]&lt;/code&gt;、&lt;code&gt;[edx+4]&lt;/code&gt;、&lt;code&gt;[edx+8]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png&#34; alt=&#34;image-202202221822350&#34;&gt;&lt;/p&gt;
&lt;p&gt;VS的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类or结构体中，如果其虚函数的数量大于1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png&#34; alt=&#34;image-202202221822816&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是在VS中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png&#34; alt=&#34;image-202202221822113&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png&#34; alt=&#34;image-202202221822536&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;IDA加载该程序-5&#34;&gt;&lt;a href=&#34;#IDA加载该程序-5&#34; class=&#34;headerlink&#34; title=&#34;IDA加载该程序&#34;&gt;&lt;/a&gt;IDA加载该程序&lt;/h3&gt;&lt;p&gt;直接来到main函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main_0(int argc, const char **argv, const char **envp)
&amp;#123;
  _DWORD *v4; // [esp+Ch] [ebp-DCh]
  void *v5; // [esp+14h] [ebp-D4h]
  _DWORD *v6; // [esp+E0h] [ebp-8h]

  __CheckForDebuggerJustMyCode(&amp;amp;unk_41C066);
  v5 = operator new(0x10u);
  if ( v5 )
    v4 = (_DWORD *)sub_411460(v5);
  else
    v4 = 0;
  v6 = v4;
  v4[1] = 100;
  (*(void (__thiscall **)(_DWORD *))*v6)(v6);
  (*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);
  (*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);
  sub_411442(&amp;quot;%d&amp;quot;, *v4);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据源码，这一部分就是虚函数调用在IDA中的反编译结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;(*(void (__thiscall **)(_DWORD *))*v6)(v6);
(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);
(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里v6是指向v4，来到v4的初始化，可以看到存在一个&lt;code&gt;virtual function table&lt;/code&gt;也就是虚函数表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;_DWORD *__thiscall sub_411880(_DWORD *this)
&amp;#123;
  *this = &amp;amp;Test::`vftable&amp;#39;;
  return this;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据前面VS中的调试可以知道这个表中存放的是增量链接：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png&#34; alt=&#34;image-202202221822914&#34;&gt;&lt;/p&gt;
&lt;p&gt;基本上关于虚函数在IDA中的体现就介绍完了&lt;/p&gt;
&lt;h3 id=&#34;一道逆向题-5&#34;&gt;&lt;a href=&#34;#一道逆向题-5&#34; class=&#34;headerlink&#34; title=&#34;一道逆向题&#34;&gt;&lt;/a&gt;一道逆向题&lt;/h3&gt;&lt;p&gt;SWPUCTF2019 easyRE，同样来到main函数，本文重点在虚函数的创建以及体现，其他部分不做分析：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF
  _DWORD *v5; // [esp+4h] [ebp-88h]
  _DWORD *v6; // [esp+8h] [ebp-84h]
  int v7; // [esp+Ch] [ebp-80h]
  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF
  int v9; // [esp+88h] [ebp-4h]

  if ( sub_40EF90() )
    return 1;
  sub_4026C0(0x6Cu);
  sub_401FE0(v4[27], v5);
  v9 = 0;
  v6 = v4;
  sub_40F360(v8);
  sub_40F080(v4[0], v4[1]);
  v5 = v4;
  sub_40F360(v8);
  sub_40F150(argc, (int)argv);
  v7 = 0;
  v9 = -1;
  sub_4021C0(v8);
  return v7;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入sub_401FE0:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;_DWORD *__thiscall sub_401FE0(_DWORD *this)
&amp;#123;
  int i; // [esp+4h] [ebp-14h]

  *this = &amp;amp;EASYRE::`vftable&amp;#39;;
  this[1] = 0;
  *((_BYTE *)this + 52) = 8;
  *((_BYTE *)this + 53) = -22;
  *((_BYTE *)this + 54) = 88;
  *((_BYTE *)this + 55) = -34;
  *((_BYTE *)this + 56) = -108;
  *((_BYTE *)this + 57) = -48;
  *((_BYTE *)this + 58) = 59;
  *((_BYTE *)this + 59) = -66;
  *((_BYTE *)this + 60) = -120;
  *((_BYTE *)this + 61) = -44;
  *((_BYTE *)this + 62) = 50;
  *((_BYTE *)this + 63) = -74;
  *((_BYTE *)this + 64) = 20;
  *((_BYTE *)this + 65) = -126;
  *((_BYTE *)this + 66) = -73;
  *((_BYTE *)this + 67) = -81;
  *((_BYTE *)this + 68) = 20;
  *((_BYTE *)this + 69) = 84;
  *((_BYTE *)this + 70) = 127;
  *((_BYTE *)this + 71) = -49;
  qmemcpy(this + 18, &amp;quot;  03\&amp;quot;3   0 203\&amp;quot;   $ &amp;quot;, 20);
  sub_4030A0(this + 23);
  sub_402DE0(this + 26);
  for ( i = 0; i &amp;lt; 40; ++i )
    *((_BYTE *)this + i + 12) = 0;
  return this;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png&#34; alt=&#34;image-202202221822478&#34;&gt;&lt;/p&gt;
&lt;p&gt;来到校验flag的函数，可以发现存在虚函数的特征：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;BOOL __thiscall sub_4024B0(_DWORD *this, int flag)
&amp;#123;
  BOOL result; // eax

  this[2] = flag;
  result = 0;
  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )
  &amp;#123;
    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )
      result = 1;
  &amp;#125;
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里this指针指向的首地址是&lt;code&gt;0x4124E4&lt;/code&gt;，根据偏移可以映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&amp;gt; 0x4124F0 -&amp;gt; sub_402500
(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&amp;gt; 0x4124FC -&amp;gt; sub_4026E0
(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&amp;gt; 0x41250C -&amp;gt; sub_402A00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;BOOL __thiscall sub_4024B0(_DWORD *this, int flag)
&amp;#123;
  BOOL result; // eax

  this[2] = flag;
  result = 0;
  if ( sub_402500() )
  &amp;#123;
    sub_4026E0();
    if ( sub_402A00() )
      result = 1;
  &amp;#125;
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;IDA加载该程序-6&#34;&gt;&lt;a href=&#34;#IDA加载该程序-6&#34; class=&#34;headerlink&#34; title=&#34;IDA加载该程序&#34;&gt;&lt;/a&gt;IDA加载该程序&lt;/h3&gt;&lt;p&gt;直接来到main函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main_0(int argc, const char **argv, const char **envp)
&amp;#123;
  _DWORD *v4; // [esp+Ch] [ebp-DCh]
  void *v5; // [esp+14h] [ebp-D4h]
  _DWORD *v6; // [esp+E0h] [ebp-8h]

  __CheckForDebuggerJustMyCode(&amp;amp;unk_41C066);
  v5 = operator new(0x10u);
  if ( v5 )
    v4 = (_DWORD *)sub_411460(v5);
  else
    v4 = 0;
  v6 = v4;
  v4[1] = 100;
  (*(void (__thiscall **)(_DWORD *))*v6)(v6);
  (*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);
  (*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);
  sub_411442(&amp;quot;%d&amp;quot;, *v4);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据源码，这一部分就是虚函数调用在IDA中的反编译结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;(*(void (__thiscall **)(_DWORD *))*v6)(v6);
(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);
(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里v6是指向v4，来到v4的初始化，可以看到存在一个&lt;code&gt;virtual function table&lt;/code&gt;也就是虚函数表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;_DWORD *__thiscall sub_411880(_DWORD *this)
&amp;#123;
  *this = &amp;amp;Test::`vftable&amp;#39;;
  return this;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据前面VS中的调试可以知道这个表中存放的是增量链接：&lt;/p&gt;
&lt;h2 id=&#34;Reverse中虚函数-x2F-虚表浅析-7&#34;&gt;&lt;a href=&#34;#Reverse中虚函数-x2F-虚表浅析-7&#34; class=&#34;headerlink&#34; title=&#34;Reverse中虚函数&amp;#x2F;虚表浅析&#34;&gt;&lt;/a&gt;Reverse中虚函数&amp;#x2F;虚表浅析&lt;/h2&gt;&lt;h3 id=&#34;this指针-7&#34;&gt;&lt;a href=&#34;#this指针-7&#34; class=&#34;headerlink&#34; title=&#34;this指针&#34;&gt;&lt;/a&gt;this指针&lt;/h3&gt;&lt;p&gt;在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：&lt;/p&gt;
&lt;p&gt;一个简单的demo来测试一下this指针：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int main() &amp;#123;
    struct Test&amp;#123;
        int a;
        int b;
        int c;
    &amp;#125;;
    Test* test = new Test;
    test-&amp;gt;a = 100;
    printf(&amp;quot;%d&amp;quot;, *test);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png&#34; alt=&#34;image-202202221821809&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png&#34; alt=&#34;image-202202221821374&#34;&gt;&lt;/p&gt;
&lt;p&gt;demo2：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;


struct Test &amp;#123;
    int a;
    int b;
    int c;
    virtual void func1();
    virtual void func2();
    virtual void func3();

&amp;#125;;

void Test::func1() &amp;#123;
    printf(&amp;quot;func1&amp;quot;);
&amp;#125;

void Test::func2() &amp;#123;
    printf(&amp;quot;func2&amp;quot;);
&amp;#125;

void Test::func3() &amp;#123;
    printf(&amp;quot;func3&amp;quot;);
&amp;#125;

int main() &amp;#123;

    Test* test = new Test;
    test-&amp;gt;a = 100;
    test-&amp;gt;func1();
    printf(&amp;quot;%d&amp;quot;, *test);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为&lt;code&gt;func1&lt;/code&gt;、&lt;code&gt;func2&lt;/code&gt;、&lt;code&gt;func3&lt;/code&gt;，我们注意到这里call的函数内容来自&lt;code&gt;[edx]&lt;/code&gt;、&lt;code&gt;[edx+4]&lt;/code&gt;、&lt;code&gt;[edx+8]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png&#34; alt=&#34;image-202202221822350&#34;&gt;&lt;/p&gt;
&lt;p&gt;VS的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类or结构体中，如果其虚函数的数量大于1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png&#34; alt=&#34;image-202202221822816&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是在VS中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png&#34; alt=&#34;image-202202221822113&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png&#34; alt=&#34;image-202202221822536&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;IDA加载该程序-7&#34;&gt;&lt;a href=&#34;#IDA加载该程序-7&#34; class=&#34;headerlink&#34; title=&#34;IDA加载该程序&#34;&gt;&lt;/a&gt;IDA加载该程序&lt;/h3&gt;&lt;p&gt;直接来到main函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main_0(int argc, const char **argv, const char **envp)
&amp;#123;
  _DWORD *v4; // [esp+Ch] [ebp-DCh]
  void *v5; // [esp+14h] [ebp-D4h]
  _DWORD *v6; // [esp+E0h] [ebp-8h]

  __CheckForDebuggerJustMyCode(&amp;amp;unk_41C066);
  v5 = operator new(0x10u);
  if ( v5 )
    v4 = (_DWORD *)sub_411460(v5);
  else
    v4 = 0;
  v6 = v4;
  v4[1] = 100;
  (*(void (__thiscall **)(_DWORD *))*v6)(v6);
  (*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);
  (*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);
  sub_411442(&amp;quot;%d&amp;quot;, *v4);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据源码，这一部分就是虚函数调用在IDA中的反编译结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;(*(void (__thiscall **)(_DWORD *))*v6)(v6);
(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);
(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里v6是指向v4，来到v4的初始化，可以看到存在一个&lt;code&gt;virtual function table&lt;/code&gt;也就是虚函数表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;_DWORD *__thiscall sub_411880(_DWORD *this)
&amp;#123;
  *this = &amp;amp;Test::`vftable&amp;#39;;
  return this;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据前面VS中的调试可以知道这个表中存放的是增量链接：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png&#34; alt=&#34;image-202202221822914&#34;&gt;&lt;/p&gt;
&lt;p&gt;基本上关于虚函数在IDA中的体现就介绍完了&lt;/p&gt;
&lt;h3 id=&#34;一道逆向题-6&#34;&gt;&lt;a href=&#34;#一道逆向题-6&#34; class=&#34;headerlink&#34; title=&#34;一道逆向题&#34;&gt;&lt;/a&gt;一道逆向题&lt;/h3&gt;&lt;p&gt;SWPUCTF2019 easyRE，同样来到main函数，本文重点在虚函数的创建以及体现，其他部分不做分析：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF
  _DWORD *v5; // [esp+4h] [ebp-88h]
  _DWORD *v6; // [esp+8h] [ebp-84h]
  int v7; // [esp+Ch] [ebp-80h]
  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF
  int v9; // [esp+88h] [ebp-4h]

  if ( sub_40EF90() )
    return 1;
  sub_4026C0(0x6Cu);
  sub_401FE0(v4[27], v5);
  v9 = 0;
  v6 = v4;
  sub_40F360(v8);
  sub_40F080(v4[0], v4[1]);
  v5 = v4;
  sub_40F360(v8);
  sub_40F150(argc, (int)argv);
  v7 = 0;
  v9 = -1;
  sub_4021C0(v8);
  return v7;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入sub_401FE0:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;_DWORD *__thiscall sub_401FE0(_DWORD *this)
&amp;#123;
  int i; // [esp+4h] [ebp-14h]

  *this = &amp;amp;EASYRE::`vftable&amp;#39;;
  this[1] = 0;
  *((_BYTE *)this + 52) = 8;
  *((_BYTE *)this + 53) = -22;
  *((_BYTE *)this + 54) = 88;
  *((_BYTE *)this + 55) = -34;
  *((_BYTE *)this + 56) = -108;
  *((_BYTE *)this + 57) = -48;
  *((_BYTE *)this + 58) = 59;
  *((_BYTE *)this + 59) = -66;
  *((_BYTE *)this + 60) = -120;
  *((_BYTE *)this + 61) = -44;
  *((_BYTE *)this + 62) = 50;
  *((_BYTE *)this + 63) = -74;
  *((_BYTE *)this + 64) = 20;
  *((_BYTE *)this + 65) = -126;
  *((_BYTE *)this + 66) = -73;
  *((_BYTE *)this + 67) = -81;
  *((_BYTE *)this + 68) = 20;
  *((_BYTE *)this + 69) = 84;
  *((_BYTE *)this + 70) = 127;
  *((_BYTE *)this + 71) = -49;
  qmemcpy(this + 18, &amp;quot;  03\&amp;quot;3   0 203\&amp;quot;   $ &amp;quot;, 20);
  sub_4030A0(this + 23);
  sub_402DE0(this + 26);
  for ( i = 0; i &amp;lt; 40; ++i )
    *((_BYTE *)this + i + 12) = 0;
  return this;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png&#34; alt=&#34;image-202202221822478&#34;&gt;&lt;/p&gt;
&lt;p&gt;来到校验flag的函数，可以发现存在虚函数的特征：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;BOOL __thiscall sub_4024B0(_DWORD *this, int flag)
&amp;#123;
  BOOL result; // eax

  this[2] = flag;
  result = 0;
  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )
  &amp;#123;
    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )
      result = 1;
  &amp;#125;
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里this指针指向的首地址是&lt;code&gt;0x4124E4&lt;/code&gt;，根据偏移可以映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&amp;gt; 0x4124F0 -&amp;gt; sub_402500
(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&amp;gt; 0x4124FC -&amp;gt; sub_4026E0
(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&amp;gt; 0x41250C -&amp;gt; sub_402A00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;BOOL __thiscall sub_4024B0(_DWORD *this, int flag)
&amp;#123;
  BOOL result; // eax

  this[2] = flag;
  result = 0;
  if ( sub_402500() )
  &amp;#123;
    sub_4026E0();
    if ( sub_402A00() )
      result = 1;
  &amp;#125;
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;基本上关于虚函数在IDA中的体现就介绍完了&lt;/p&gt;
&lt;h3 id=&#34;一道逆向题-7&#34;&gt;&lt;a href=&#34;#一道逆向题-7&#34; class=&#34;headerlink&#34; title=&#34;一道逆向题&#34;&gt;&lt;/a&gt;一道逆向题&lt;/h3&gt;&lt;p&gt;SWPUCTF2019 easyRE，同样来到main函数，本文重点在虚函数的创建以及体现，其他部分不做分析：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF
  _DWORD *v5; // [esp+4h] [ebp-88h]
  _DWORD *v6; // [esp+8h] [ebp-84h]
  int v7; // [esp+Ch] [ebp-80h]
  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF
  int v9; // [esp+88h] [ebp-4h]

  if ( sub_40EF90() )
    return 1;
  sub_4026C0(0x6Cu);
  sub_401FE0(v4[27], v5);
  v9 = 0;
  v6 = v4;
  sub_40F360(v8);
  sub_40F080(v4[0], v4[1]);
  v5 = v4;
  sub_40F360(v8);
  sub_40F150(argc, (int)argv);
  v7 = 0;
  v9 = -1;
  sub_4021C0(v8);
  return v7;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入sub_401FE0:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;_DWORD *__thiscall sub_401FE0(_DWORD *this)
&amp;#123;
  int i; // [esp+4h] [ebp-14h]

  *this = &amp;amp;EASYRE::`vftable&amp;#39;;
  this[1] = 0;
  *((_BYTE *)this + 52) = 8;
  *((_BYTE *)this + 53) = -22;
  *((_BYTE *)this + 54) = 88;
  *((_BYTE *)this + 55) = -34;
  *((_BYTE *)this + 56) = -108;
  *((_BYTE *)this + 57) = -48;
  *((_BYTE *)this + 58) = 59;
  *((_BYTE *)this + 59) = -66;
  *((_BYTE *)this + 60) = -120;
  *((_BYTE *)this + 61) = -44;
  *((_BYTE *)this + 62) = 50;
  *((_BYTE *)this + 63) = -74;
  *((_BYTE *)this + 64) = 20;
  *((_BYTE *)this + 65) = -126;
  *((_BYTE *)this + 66) = -73;
  *((_BYTE *)this + 67) = -81;
  *((_BYTE *)this + 68) = 20;
  *((_BYTE *)this + 69) = 84;
  *((_BYTE *)this + 70) = 127;
  *((_BYTE *)this + 71) = -49;
  qmemcpy(this + 18, &amp;quot;  03\&amp;quot;3   0 203\&amp;quot;   $ &amp;quot;, 20);
  sub_4030A0(this + 23);
  sub_402DE0(this + 26);
  for ( i = 0; i &amp;lt; 40; ++i )
    *((_BYTE *)this + i + 12) = 0;
  return this;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：&lt;/p&gt;
&lt;h2 id=&#34;Reverse中虚函数-x2F-虚表浅析-8&#34;&gt;&lt;a href=&#34;#Reverse中虚函数-x2F-虚表浅析-8&#34; class=&#34;headerlink&#34; title=&#34;Reverse中虚函数&amp;#x2F;虚表浅析&#34;&gt;&lt;/a&gt;Reverse中虚函数&amp;#x2F;虚表浅析&lt;/h2&gt;&lt;h3 id=&#34;this指针-8&#34;&gt;&lt;a href=&#34;#this指针-8&#34; class=&#34;headerlink&#34; title=&#34;this指针&#34;&gt;&lt;/a&gt;this指针&lt;/h3&gt;&lt;p&gt;在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：&lt;/p&gt;
&lt;p&gt;一个简单的demo来测试一下this指针：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int main() &amp;#123;
    struct Test&amp;#123;
        int a;
        int b;
        int c;
    &amp;#125;;
    Test* test = new Test;
    test-&amp;gt;a = 100;
    printf(&amp;quot;%d&amp;quot;, *test);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png&#34; alt=&#34;image-202202221821809&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png&#34; alt=&#34;image-202202221821374&#34;&gt;&lt;/p&gt;
&lt;p&gt;demo2：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;


struct Test &amp;#123;
    int a;
    int b;
    int c;
    virtual void func1();
    virtual void func2();
    virtual void func3();

&amp;#125;;

void Test::func1() &amp;#123;
    printf(&amp;quot;func1&amp;quot;);
&amp;#125;

void Test::func2() &amp;#123;
    printf(&amp;quot;func2&amp;quot;);
&amp;#125;

void Test::func3() &amp;#123;
    printf(&amp;quot;func3&amp;quot;);
&amp;#125;

int main() &amp;#123;

    Test* test = new Test;
    test-&amp;gt;a = 100;
    test-&amp;gt;func1();
    printf(&amp;quot;%d&amp;quot;, *test);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为&lt;code&gt;func1&lt;/code&gt;、&lt;code&gt;func2&lt;/code&gt;、&lt;code&gt;func3&lt;/code&gt;，我们注意到这里call的函数内容来自&lt;code&gt;[edx]&lt;/code&gt;、&lt;code&gt;[edx+4]&lt;/code&gt;、&lt;code&gt;[edx+8]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png&#34; alt=&#34;image-202202221822350&#34;&gt;&lt;/p&gt;
&lt;p&gt;VS的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类or结构体中，如果其虚函数的数量大于1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png&#34; alt=&#34;image-202202221822816&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是在VS中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png&#34; alt=&#34;image-202202221822113&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png&#34; alt=&#34;image-202202221822536&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;IDA加载该程序-8&#34;&gt;&lt;a href=&#34;#IDA加载该程序-8&#34; class=&#34;headerlink&#34; title=&#34;IDA加载该程序&#34;&gt;&lt;/a&gt;IDA加载该程序&lt;/h3&gt;&lt;p&gt;直接来到main函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;int __cdecl main_0(int argc, const char **argv, const char **envp)
&amp;#123;
  _DWORD *v4; // [esp+Ch] [ebp-DCh]
  void *v5; // [esp+14h] [ebp-D4h]
  _DWORD *v6; // [esp+E0h] [ebp-8h]

  __CheckForDebuggerJustMyCode(&amp;amp;unk_41C066);
  v5 = operator new(0x10u);
  if ( v5 )
    v4 = (_DWORD *)sub_411460(v5);
  else
    v4 = 0;
  v6 = v4;
  v4[1] = 100;
  (*(void (__thiscall **)(_DWORD *))*v6)(v6);
  (*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);
  (*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);
  sub_411442(&amp;quot;%d&amp;quot;, *v4);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据源码，这一部分就是虚函数调用在IDA中的反编译结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;(*(void (__thiscall **)(_DWORD *))*v6)(v6);
(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);
(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里v6是指向v4，来到v4的初始化，可以看到存在一个&lt;code&gt;virtual function table&lt;/code&gt;也就是虚函数表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;_DWORD *__thiscall sub_411880(_DWORD *this)
&amp;#123;
  *this = &amp;amp;Test::`vftable&amp;#39;;
  return this;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据前面VS中的调试可以知道这个表中存放的是增量链接：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png&#34; alt=&#34;image-202202221822914&#34;&gt;&lt;/p&gt;
&lt;p&gt;基本上关于虚函数在IDA中的体现就介绍完了&lt;/p&gt;
&lt;h3 id=&#34;一道逆向题-8&#34;&gt;&lt;a href=&#34;#一道逆向题-8&#34; class=&#34;headerlink&#34; title=&#34;一道逆向题&#34;&gt;&lt;/a&gt;一道逆向题&lt;/h3&gt;&lt;p&gt;SWPUCTF2019 easyRE，同样来到main函数，本文重点在虚函数的创建以及体现，其他部分不做分析：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;int __cdecl main(int argc, const char **argv, const char **envp)
&amp;#123;
  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF
  _DWORD *v5; // [esp+4h] [ebp-88h]
  _DWORD *v6; // [esp+8h] [ebp-84h]
  int v7; // [esp+Ch] [ebp-80h]
  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF
  int v9; // [esp+88h] [ebp-4h]

  if ( sub_40EF90() )
    return 1;
  sub_4026C0(0x6Cu);
  sub_401FE0(v4[27], v5);
  v9 = 0;
  v6 = v4;
  sub_40F360(v8);
  sub_40F080(v4[0], v4[1]);
  v5 = v4;
  sub_40F360(v8);
  sub_40F150(argc, (int)argv);
  v7 = 0;
  v9 = -1;
  sub_4021C0(v8);
  return v7;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入sub_401FE0:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;_DWORD *__thiscall sub_401FE0(_DWORD *this)
&amp;#123;
  int i; // [esp+4h] [ebp-14h]

  *this = &amp;amp;EASYRE::`vftable&amp;#39;;
  this[1] = 0;
  *((_BYTE *)this + 52) = 8;
  *((_BYTE *)this + 53) = -22;
  *((_BYTE *)this + 54) = 88;
  *((_BYTE *)this + 55) = -34;
  *((_BYTE *)this + 56) = -108;
  *((_BYTE *)this + 57) = -48;
  *((_BYTE *)this + 58) = 59;
  *((_BYTE *)this + 59) = -66;
  *((_BYTE *)this + 60) = -120;
  *((_BYTE *)this + 61) = -44;
  *((_BYTE *)this + 62) = 50;
  *((_BYTE *)this + 63) = -74;
  *((_BYTE *)this + 64) = 20;
  *((_BYTE *)this + 65) = -126;
  *((_BYTE *)this + 66) = -73;
  *((_BYTE *)this + 67) = -81;
  *((_BYTE *)this + 68) = 20;
  *((_BYTE *)this + 69) = 84;
  *((_BYTE *)this + 70) = 127;
  *((_BYTE *)this + 71) = -49;
  qmemcpy(this + 18, &amp;quot;  03\&amp;quot;3   0 203\&amp;quot;   $ &amp;quot;, 20);
  sub_4030A0(this + 23);
  sub_402DE0(this + 26);
  for ( i = 0; i &amp;lt; 40; ++i )
    *((_BYTE *)this + i + 12) = 0;
  return this;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png&#34; alt=&#34;image-202202221822478&#34;&gt;&lt;/p&gt;
&lt;p&gt;来到校验flag的函数，可以发现存在虚函数的特征：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;BOOL __thiscall sub_4024B0(_DWORD *this, int flag)
&amp;#123;
  BOOL result; // eax

  this[2] = flag;
  result = 0;
  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )
  &amp;#123;
    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )
      result = 1;
  &amp;#125;
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里this指针指向的首地址是&lt;code&gt;0x4124E4&lt;/code&gt;，根据偏移可以映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&amp;gt; 0x4124F0 -&amp;gt; sub_402500
(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&amp;gt; 0x4124FC -&amp;gt; sub_4026E0
(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&amp;gt; 0x41250C -&amp;gt; sub_402A00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;BOOL __thiscall sub_4024B0(_DWORD *this, int flag)
&amp;#123;
  BOOL result; // eax

  this[2] = flag;
  result = 0;
  if ( sub_402500() )
  &amp;#123;
    sub_4026E0();
    if ( sub_402A00() )
      result = 1;
  &amp;#125;
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;来到校验flag的函数，可以发现存在虚函数的特征：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;BOOL __thiscall sub_4024B0(_DWORD *this, int flag)
&amp;#123;
  BOOL result; // eax

  this[2] = flag;
  result = 0;
  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )
  &amp;#123;
    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )
      result = 1;
  &amp;#125;
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里this指针指向的首地址是&lt;code&gt;0x4124E4&lt;/code&gt;，根据偏移可以映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&amp;gt; 0x4124F0 -&amp;gt; sub_402500
(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&amp;gt; 0x4124FC -&amp;gt; sub_4026E0
(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&amp;gt; 0x41250C -&amp;gt; sub_402A00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;BOOL __thiscall sub_4024B0(_DWORD *this, int flag)
&amp;#123;
  BOOL result; // eax

  this[2] = flag;
  result = 0;
  if ( sub_402500() )
  &amp;#123;
    sub_4026E0();
    if ( sub_402A00() )
      result = 1;
  &amp;#125;
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
    </channel>
</rss>
