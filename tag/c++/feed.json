{
    "version": "https://jsonfeed.org/version/1",
    "title": "YuSec2021 • All posts by \"c++\" tag",
    "description": "Record Some Tricks",
    "home_page_url": "https://YuSec2021.github.io",
    "items": [
        {
            "id": "https://yusec2021.github.io/2022/02/17/VirtualFunction/",
            "url": "https://yusec2021.github.io/2022/02/17/VirtualFunction/",
            "title": "虚函数及虚表逆向浅析",
            "date_published": "2022-02-17T10:00:09.000Z",
            "content_html": "<h2 id=\"reverse中虚函数虚表浅析\"><a class=\"markdownIt-Anchor\" href=\"#reverse中虚函数虚表浅析\">#</a> Reverse 中虚函数 / 虚表浅析</h2>\n<h3 id=\"this指针\"><a class=\"markdownIt-Anchor\" href=\"#this指针\">#</a> this 指针</h3>\n<p>在 C++ 的类中，需要研究一个非常重要并且特殊的指针就是 this 指针：</p>\n<p>一个简单的 demo 来测试一下 this 指针：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tTest<span class=\"token operator\">*</span> test <span class=\"token operator\">=</span> new Test<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\ttest<span class=\"token operator\">-></span>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，直接取 test 的值就是 a 的值，这里的 test 就是 this 指针本身，而 this 指针的特性就是指向类的首地址，在对类进行内存分配时，this 指针会默认指向该类的首地址：</p>\n<h2 id=\"reverse中虚函数虚表浅析-2\"><a class=\"markdownIt-Anchor\" href=\"#reverse中虚函数虚表浅析-2\">#</a> Reverse 中虚函数 / 虚表浅析</h2>\n<h3 id=\"this指针-2\"><a class=\"markdownIt-Anchor\" href=\"#this指针-2\">#</a> this 指针</h3>\n<p>在 C++ 的类中，需要研究一个非常重要并且特殊的指针就是 this 指针：</p>\n<p>一个简单的 demo 来测试一下 this 指针：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tTest<span class=\"token operator\">*</span> test <span class=\"token operator\">=</span> new Test<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\ttest<span class=\"token operator\">-></span>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，直接取 test 的值就是 a 的值，这里的 test 就是 this 指针本身，而 this 指针的特性就是指向类的首地址，在对类进行内存分配时，this 指针会默认指向该类的首地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-202202221821809\" loading=\"lazy\"></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以 demo 中用 struct 和 class 的结果相同</strong></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-202202221821374\" loading=\"lazy\"></p>\n<p>demo2：</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n\nstruct Test &#123;\n\tint a;\n\tint b;\n\tint c;\n\tvirtual void func1();\n\tvirtual void func2();\n\tvirtual void func3();\n\n&#125;;\n\nvoid Test::func1() &#123;\n\tprintf(&quot;func1&quot;);\n&#125;\n\nvoid Test::func2() &#123;\n\tprintf(&quot;func2&quot;);\n&#125;\n\nvoid Test::func3() &#123;\n\tprintf(&quot;func3&quot;);\n&#125;\n\nint main() &#123;\n\n\tTest* test = new Test;\n\ttest-&gt;a = 100;\n\ttest-&gt;func1();\n\tprintf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名：：方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为 <code>func1</code> 、 <code>func2</code> 、 <code>func3</code> ，我们注意到这里 call 的函数内容来自 <code>[edx]</code> 、 <code>[edx+4]</code> 、 <code>[edx+8]</code></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-202202221822350\" loading=\"lazy\"></p>\n<p>VS 的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类 or 结构体中，如果其虚函数的数量大于 1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-202202221822816\" loading=\"lazy\"></p>\n<p>但是在 VS 中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-202202221822113\" loading=\"lazy\"></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-202202221822536\" loading=\"lazy\"></p>\n<h3 id=\"ida加载该程序\"><a class=\"markdownIt-Anchor\" href=\"#ida加载该程序\">#</a> IDA 加载该程序</h3>\n<p>直接来到 main 函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main_0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-DCh]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+14h] [ebp-D4h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+E0h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">__CheckForDebuggerJustMyCode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>unk_41C066<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v5 <span class=\"token operator\">=</span> operator <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v5 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">sub_411460</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  v6 <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  v4<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">sub_411442</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>根据源码，这一部分就是虚函数调用在 IDA 中的反编译结果：</p>\n<pre><code class=\"language-c++\">(*(void (__thiscall **)(_DWORD *))*v6)(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n</code></pre>\n<p>这里 v6 是指向 v4，来到 v4 的初始化，可以看到存在一个 <code>virtual function table</code>  也就是虚函数表：</p>\n<pre><code class=\"language-c++\">_DWORD *__thiscall sub_411880(_DWORD *this)\n&#123;\n  *this = &amp;Test::`vftable';\n  return this;\n&#125;\n</code></pre>\n<p>根据前面 VS 中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-202202221822914\" loading=\"lazy\"></p>\n<p>基本上关于虚函数在 IDA 中的体现就介绍完了</p>\n<h3 id=\"一道逆向题\"><a class=\"markdownIt-Anchor\" href=\"#一道逆向题\">#</a> 一道逆向题</h3>\n<p>SWPUCTF2019 easyRE，同样来到 main 函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<pre><code class=\"language-c++\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF\n  _DWORD *v5; // [esp+4h] [ebp-88h]\n  _DWORD *v6; // [esp+8h] [ebp-84h]\n  int v7; // [esp+Ch] [ebp-80h]\n  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF\n  int v9; // [esp+88h] [ebp-4h]\n\n  if ( sub_40EF90() )\n    return 1;\n  sub_4026C0(0x6Cu);\n  sub_401FE0(v4[27], v5);\n  v9 = 0;\n  v6 = v4;\n  sub_40F360(v8);\n  sub_40F080(v4[0], v4[1]);\n  v5 = v4;\n  sub_40F360(v8);\n  sub_40F150(argc, (int)argv);\n  v7 = 0;\n  v9 = -1;\n  sub_4021C0(v8);\n  return v7;\n&#125;\n</code></pre>\n<p>进入 sub_401FE0:</p>\n<pre><code class=\"language-c++\">_DWORD *__thiscall sub_401FE0(_DWORD *this)\n&#123;\n  int i; // [esp+4h] [ebp-14h]\n\n  *this = &amp;EASYRE::`vftable';\n  this[1] = 0;\n  *((_BYTE *)this + 52) = 8;\n  *((_BYTE *)this + 53) = -22;\n  *((_BYTE *)this + 54) = 88;\n  *((_BYTE *)this + 55) = -34;\n  *((_BYTE *)this + 56) = -108;\n  *((_BYTE *)this + 57) = -48;\n  *((_BYTE *)this + 58) = 59;\n  *((_BYTE *)this + 59) = -66;\n  *((_BYTE *)this + 60) = -120;\n  *((_BYTE *)this + 61) = -44;\n  *((_BYTE *)this + 62) = 50;\n  *((_BYTE *)this + 63) = -74;\n  *((_BYTE *)this + 64) = 20;\n  *((_BYTE *)this + 65) = -126;\n  *((_BYTE *)this + 66) = -73;\n  *((_BYTE *)this + 67) = -81;\n  *((_BYTE *)this + 68) = 20;\n  *((_BYTE *)this + 69) = 84;\n  *((_BYTE *)this + 70) = 127;\n  *((_BYTE *)this + 71) = -49;\n  qmemcpy(this + 18, &quot;  03\\&quot;3   0 203\\&quot;   $ &quot;, 20);\n  sub_4030A0(this + 23);\n  sub_402DE0(this + 26);\n  for ( i = 0; i &lt; 40; ++i )\n    *((_BYTE *)this + i + 12) = 0;\n  return this;\n&#125;\n</code></pre>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-202202221822478\" loading=\"lazy\"></p>\n<p>来到校验 flag 的函数，可以发现存在虚函数的特征：</p>\n<pre><code class=\"language-c++\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )\n  &#123;\n    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);\n    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>这里 this 指针指向的首地址是 <code>0x4124E4</code> ，根据偏移可以映射：</p>\n<pre><code class=\"language-c++\">(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&gt; 0x4124F0 -&gt; sub_402500\n(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&gt; 0x4124FC -&gt; sub_4026E0\n(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&gt; 0x41250C -&gt; sub_402A00\n</code></pre>\n<p>映射：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL __thiscall <span class=\"token function\">sub_4024B0</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span>this<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  BOOL result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  this<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sub_402500</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">sub_4026E0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sub_402A00</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"end\"><a class=\"markdownIt-Anchor\" href=\"#end\">#</a> End</h3>\n<p><strong>关于类和结构体：其底层实现是一样的，所以 demo 中用 struct 和 class 的结果相同</strong></p>\n<h2 id=\"reverse中虚函数虚表浅析-3\"><a class=\"markdownIt-Anchor\" href=\"#reverse中虚函数虚表浅析-3\">#</a> Reverse 中虚函数 / 虚表浅析</h2>\n<h3 id=\"this指针-3\"><a class=\"markdownIt-Anchor\" href=\"#this指针-3\">#</a> this 指针</h3>\n<p>在 C++ 的类中，需要研究一个非常重要并且特殊的指针就是 this 指针：</p>\n<p>一个简单的 demo 来测试一下 this 指针：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tTest<span class=\"token operator\">*</span> test <span class=\"token operator\">=</span> new Test<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\ttest<span class=\"token operator\">-></span>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，直接取 test 的值就是 a 的值，这里的 test 就是 this 指针本身，而 this 指针的特性就是指向类的首地址，在对类进行内存分配时，this 指针会默认指向该类的首地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-202202221821809\" loading=\"lazy\"></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以 demo 中用 struct 和 class 的结果相同</strong></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-202202221821374\" loading=\"lazy\"></p>\n<p>demo2：</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n\nstruct Test &#123;\n\tint a;\n\tint b;\n\tint c;\n\tvirtual void func1();\n\tvirtual void func2();\n\tvirtual void func3();\n\n&#125;;\n\nvoid Test::func1() &#123;\n\tprintf(&quot;func1&quot;);\n&#125;\n\nvoid Test::func2() &#123;\n\tprintf(&quot;func2&quot;);\n&#125;\n\nvoid Test::func3() &#123;\n\tprintf(&quot;func3&quot;);\n&#125;\n\nint main() &#123;\n\n\tTest* test = new Test;\n\ttest-&gt;a = 100;\n\ttest-&gt;func1();\n\tprintf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名：：方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为 <code>func1</code> 、 <code>func2</code> 、 <code>func3</code> ，我们注意到这里 call 的函数内容来自 <code>[edx]</code> 、 <code>[edx+4]</code> 、 <code>[edx+8]</code></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-202202221822350\" loading=\"lazy\"></p>\n<p>VS 的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类 or 结构体中，如果其虚函数的数量大于 1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-202202221822816\" loading=\"lazy\"></p>\n<p>但是在 VS 中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-202202221822113\" loading=\"lazy\"></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-202202221822536\" loading=\"lazy\"></p>\n<h3 id=\"ida加载该程序-2\"><a class=\"markdownIt-Anchor\" href=\"#ida加载该程序-2\">#</a> IDA 加载该程序</h3>\n<p>直接来到 main 函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main_0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-DCh]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+14h] [ebp-D4h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+E0h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">__CheckForDebuggerJustMyCode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>unk_41C066<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v5 <span class=\"token operator\">=</span> operator <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v5 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">sub_411460</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  v6 <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  v4<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">sub_411442</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>根据源码，这一部分就是虚函数调用在 IDA 中的反编译结果：</p>\n<pre><code class=\"language-c++\">(*(void (__thiscall **)(_DWORD *))*v6)(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n</code></pre>\n<p>这里 v6 是指向 v4，来到 v4 的初始化，可以看到存在一个 <code>virtual function table</code>  也就是虚函数表：</p>\n<pre><code class=\"language-c++\">_DWORD *__thiscall sub_411880(_DWORD *this)\n&#123;\n  *this = &amp;Test::`vftable';\n  return this;\n&#125;\n</code></pre>\n<p>根据前面 VS 中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-202202221822914\" loading=\"lazy\"></p>\n<p>基本上关于虚函数在 IDA 中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-2\"><a class=\"markdownIt-Anchor\" href=\"#一道逆向题-2\">#</a> 一道逆向题</h3>\n<p>SWPUCTF2019 easyRE，同样来到 main 函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<pre><code class=\"language-c++\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF\n  _DWORD *v5; // [esp+4h] [ebp-88h]\n  _DWORD *v6; // [esp+8h] [ebp-84h]\n  int v7; // [esp+Ch] [ebp-80h]\n  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF\n  int v9; // [esp+88h] [ebp-4h]\n\n  if ( sub_40EF90() )\n    return 1;\n  sub_4026C0(0x6Cu);\n  sub_401FE0(v4[27], v5);\n  v9 = 0;\n  v6 = v4;\n  sub_40F360(v8);\n  sub_40F080(v4[0], v4[1]);\n  v5 = v4;\n  sub_40F360(v8);\n  sub_40F150(argc, (int)argv);\n  v7 = 0;\n  v9 = -1;\n  sub_4021C0(v8);\n  return v7;\n&#125;\n</code></pre>\n<p>进入 sub_401FE0:</p>\n<pre><code class=\"language-c++\">_DWORD *__thiscall sub_401FE0(_DWORD *this)\n&#123;\n  int i; // [esp+4h] [ebp-14h]\n\n  *this = &amp;EASYRE::`vftable';\n  this[1] = 0;\n  *((_BYTE *)this + 52) = 8;\n  *((_BYTE *)this + 53) = -22;\n  *((_BYTE *)this + 54) = 88;\n  *((_BYTE *)this + 55) = -34;\n  *((_BYTE *)this + 56) = -108;\n  *((_BYTE *)this + 57) = -48;\n  *((_BYTE *)this + 58) = 59;\n  *((_BYTE *)this + 59) = -66;\n  *((_BYTE *)this + 60) = -120;\n  *((_BYTE *)this + 61) = -44;\n  *((_BYTE *)this + 62) = 50;\n  *((_BYTE *)this + 63) = -74;\n  *((_BYTE *)this + 64) = 20;\n  *((_BYTE *)this + 65) = -126;\n  *((_BYTE *)this + 66) = -73;\n  *((_BYTE *)this + 67) = -81;\n  *((_BYTE *)this + 68) = 20;\n  *((_BYTE *)this + 69) = 84;\n  *((_BYTE *)this + 70) = 127;\n  *((_BYTE *)this + 71) = -49;\n  qmemcpy(this + 18, &quot;  03\\&quot;3   0 203\\&quot;   $ &quot;, 20);\n  sub_4030A0(this + 23);\n  sub_402DE0(this + 26);\n  for ( i = 0; i &lt; 40; ++i )\n    *((_BYTE *)this + i + 12) = 0;\n  return this;\n&#125;\n</code></pre>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-202202221822478\" loading=\"lazy\"></p>\n<p>来到校验 flag 的函数，可以发现存在虚函数的特征：</p>\n<pre><code class=\"language-c++\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )\n  &#123;\n    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);\n    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>这里 this 指针指向的首地址是 <code>0x4124E4</code> ，根据偏移可以映射：</p>\n<pre><code class=\"language-c++\">(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&gt; 0x4124F0 -&gt; sub_402500\n(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&gt; 0x4124FC -&gt; sub_4026E0\n(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&gt; 0x41250C -&gt; sub_402A00\n</code></pre>\n<p>映射：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL __thiscall <span class=\"token function\">sub_4024B0</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span>this<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  BOOL result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  this<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sub_402500</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">sub_4026E0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sub_402A00</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"end-2\"><a class=\"markdownIt-Anchor\" href=\"#end-2\">#</a> End</h3>\n<p>demo2：</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n\nstruct Test &#123;\n\tint a;\n\tint b;\n\tint c;\n\tvirtual void func1();\n\tvirtual void func2();\n\tvirtual void func3();\n\n&#125;;\n\nvoid Test::func1() &#123;\n\tprintf(&quot;func1&quot;);\n&#125;\n\nvoid Test::func2() &#123;\n\tprintf(&quot;func2&quot;);\n&#125;\n\nvoid Test::func3() &#123;\n\tprintf(&quot;func3&quot;);\n&#125;\n\nint main() &#123;\n\n\tTest* test = new Test;\n\ttest-&gt;a = 100;\n\ttest-&gt;func1();\n\tprintf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名：：方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为 <code>func1</code> 、 <code>func2</code> 、 <code>func3</code> ，我们注意到这里 call 的函数内容来自 <code>[edx]</code> 、 <code>[edx+4]</code> 、 <code>[edx+8]</code></p>\n<h2 id=\"reverse中虚函数虚表浅析-4\"><a class=\"markdownIt-Anchor\" href=\"#reverse中虚函数虚表浅析-4\">#</a> Reverse 中虚函数 / 虚表浅析</h2>\n<h3 id=\"this指针-4\"><a class=\"markdownIt-Anchor\" href=\"#this指针-4\">#</a> this 指针</h3>\n<p>在 C++ 的类中，需要研究一个非常重要并且特殊的指针就是 this 指针：</p>\n<p>一个简单的 demo 来测试一下 this 指针：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tTest<span class=\"token operator\">*</span> test <span class=\"token operator\">=</span> new Test<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\ttest<span class=\"token operator\">-></span>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，直接取 test 的值就是 a 的值，这里的 test 就是 this 指针本身，而 this 指针的特性就是指向类的首地址，在对类进行内存分配时，this 指针会默认指向该类的首地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-202202221821809\" loading=\"lazy\"></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以 demo 中用 struct 和 class 的结果相同</strong></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-202202221821374\" loading=\"lazy\"></p>\n<p>demo2：</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n\nstruct Test &#123;\n\tint a;\n\tint b;\n\tint c;\n\tvirtual void func1();\n\tvirtual void func2();\n\tvirtual void func3();\n\n&#125;;\n\nvoid Test::func1() &#123;\n\tprintf(&quot;func1&quot;);\n&#125;\n\nvoid Test::func2() &#123;\n\tprintf(&quot;func2&quot;);\n&#125;\n\nvoid Test::func3() &#123;\n\tprintf(&quot;func3&quot;);\n&#125;\n\nint main() &#123;\n\n\tTest* test = new Test;\n\ttest-&gt;a = 100;\n\ttest-&gt;func1();\n\tprintf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名：：方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为 <code>func1</code> 、 <code>func2</code> 、 <code>func3</code> ，我们注意到这里 call 的函数内容来自 <code>[edx]</code> 、 <code>[edx+4]</code> 、 <code>[edx+8]</code></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-202202221822350\" loading=\"lazy\"></p>\n<p>VS 的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类 or 结构体中，如果其虚函数的数量大于 1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-202202221822816\" loading=\"lazy\"></p>\n<p>但是在 VS 中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-202202221822113\" loading=\"lazy\"></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-202202221822536\" loading=\"lazy\"></p>\n<h3 id=\"ida加载该程序-3\"><a class=\"markdownIt-Anchor\" href=\"#ida加载该程序-3\">#</a> IDA 加载该程序</h3>\n<p>直接来到 main 函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main_0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-DCh]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+14h] [ebp-D4h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+E0h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">__CheckForDebuggerJustMyCode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>unk_41C066<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v5 <span class=\"token operator\">=</span> operator <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v5 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">sub_411460</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  v6 <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  v4<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">sub_411442</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>根据源码，这一部分就是虚函数调用在 IDA 中的反编译结果：</p>\n<pre><code class=\"language-c++\">(*(void (__thiscall **)(_DWORD *))*v6)(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n</code></pre>\n<p>这里 v6 是指向 v4，来到 v4 的初始化，可以看到存在一个 <code>virtual function table</code>  也就是虚函数表：</p>\n<pre><code class=\"language-c++\">_DWORD *__thiscall sub_411880(_DWORD *this)\n&#123;\n  *this = &amp;Test::`vftable';\n  return this;\n&#125;\n</code></pre>\n<p>根据前面 VS 中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-202202221822914\" loading=\"lazy\"></p>\n<p>基本上关于虚函数在 IDA 中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-3\"><a class=\"markdownIt-Anchor\" href=\"#一道逆向题-3\">#</a> 一道逆向题</h3>\n<p>SWPUCTF2019 easyRE，同样来到 main 函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<pre><code class=\"language-c++\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF\n  _DWORD *v5; // [esp+4h] [ebp-88h]\n  _DWORD *v6; // [esp+8h] [ebp-84h]\n  int v7; // [esp+Ch] [ebp-80h]\n  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF\n  int v9; // [esp+88h] [ebp-4h]\n\n  if ( sub_40EF90() )\n    return 1;\n  sub_4026C0(0x6Cu);\n  sub_401FE0(v4[27], v5);\n  v9 = 0;\n  v6 = v4;\n  sub_40F360(v8);\n  sub_40F080(v4[0], v4[1]);\n  v5 = v4;\n  sub_40F360(v8);\n  sub_40F150(argc, (int)argv);\n  v7 = 0;\n  v9 = -1;\n  sub_4021C0(v8);\n  return v7;\n&#125;\n</code></pre>\n<p>进入 sub_401FE0:</p>\n<pre><code class=\"language-c++\">_DWORD *__thiscall sub_401FE0(_DWORD *this)\n&#123;\n  int i; // [esp+4h] [ebp-14h]\n\n  *this = &amp;EASYRE::`vftable';\n  this[1] = 0;\n  *((_BYTE *)this + 52) = 8;\n  *((_BYTE *)this + 53) = -22;\n  *((_BYTE *)this + 54) = 88;\n  *((_BYTE *)this + 55) = -34;\n  *((_BYTE *)this + 56) = -108;\n  *((_BYTE *)this + 57) = -48;\n  *((_BYTE *)this + 58) = 59;\n  *((_BYTE *)this + 59) = -66;\n  *((_BYTE *)this + 60) = -120;\n  *((_BYTE *)this + 61) = -44;\n  *((_BYTE *)this + 62) = 50;\n  *((_BYTE *)this + 63) = -74;\n  *((_BYTE *)this + 64) = 20;\n  *((_BYTE *)this + 65) = -126;\n  *((_BYTE *)this + 66) = -73;\n  *((_BYTE *)this + 67) = -81;\n  *((_BYTE *)this + 68) = 20;\n  *((_BYTE *)this + 69) = 84;\n  *((_BYTE *)this + 70) = 127;\n  *((_BYTE *)this + 71) = -49;\n  qmemcpy(this + 18, &quot;  03\\&quot;3   0 203\\&quot;   $ &quot;, 20);\n  sub_4030A0(this + 23);\n  sub_402DE0(this + 26);\n  for ( i = 0; i &lt; 40; ++i )\n    *((_BYTE *)this + i + 12) = 0;\n  return this;\n&#125;\n</code></pre>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-202202221822478\" loading=\"lazy\"></p>\n<p>来到校验 flag 的函数，可以发现存在虚函数的特征：</p>\n<pre><code class=\"language-c++\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )\n  &#123;\n    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);\n    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>这里 this 指针指向的首地址是 <code>0x4124E4</code> ，根据偏移可以映射：</p>\n<pre><code class=\"language-c++\">(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&gt; 0x4124F0 -&gt; sub_402500\n(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&gt; 0x4124FC -&gt; sub_4026E0\n(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&gt; 0x41250C -&gt; sub_402A00\n</code></pre>\n<p>映射：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL __thiscall <span class=\"token function\">sub_4024B0</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span>this<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  BOOL result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  this<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sub_402500</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">sub_4026E0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sub_402A00</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"end-3\"><a class=\"markdownIt-Anchor\" href=\"#end-3\">#</a> End</h3>\n<p>VS 的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类 or 结构体中，如果其虚函数的数量大于 1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<h2 id=\"reverse中虚函数虚表浅析-5\"><a class=\"markdownIt-Anchor\" href=\"#reverse中虚函数虚表浅析-5\">#</a> Reverse 中虚函数 / 虚表浅析</h2>\n<h3 id=\"this指针-5\"><a class=\"markdownIt-Anchor\" href=\"#this指针-5\">#</a> this 指针</h3>\n<p>在 C++ 的类中，需要研究一个非常重要并且特殊的指针就是 this 指针：</p>\n<p>一个简单的 demo 来测试一下 this 指针：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tTest<span class=\"token operator\">*</span> test <span class=\"token operator\">=</span> new Test<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\ttest<span class=\"token operator\">-></span>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，直接取 test 的值就是 a 的值，这里的 test 就是 this 指针本身，而 this 指针的特性就是指向类的首地址，在对类进行内存分配时，this 指针会默认指向该类的首地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-202202221821809\" loading=\"lazy\"></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以 demo 中用 struct 和 class 的结果相同</strong></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-202202221821374\" loading=\"lazy\"></p>\n<p>demo2：</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n\nstruct Test &#123;\n\tint a;\n\tint b;\n\tint c;\n\tvirtual void func1();\n\tvirtual void func2();\n\tvirtual void func3();\n\n&#125;;\n\nvoid Test::func1() &#123;\n\tprintf(&quot;func1&quot;);\n&#125;\n\nvoid Test::func2() &#123;\n\tprintf(&quot;func2&quot;);\n&#125;\n\nvoid Test::func3() &#123;\n\tprintf(&quot;func3&quot;);\n&#125;\n\nint main() &#123;\n\n\tTest* test = new Test;\n\ttest-&gt;a = 100;\n\ttest-&gt;func1();\n\tprintf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名：：方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为 <code>func1</code> 、 <code>func2</code> 、 <code>func3</code> ，我们注意到这里 call 的函数内容来自 <code>[edx]</code> 、 <code>[edx+4]</code> 、 <code>[edx+8]</code></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-202202221822350\" loading=\"lazy\"></p>\n<p>VS 的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类 or 结构体中，如果其虚函数的数量大于 1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-202202221822816\" loading=\"lazy\"></p>\n<p>但是在 VS 中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-202202221822113\" loading=\"lazy\"></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-202202221822536\" loading=\"lazy\"></p>\n<h3 id=\"ida加载该程序-4\"><a class=\"markdownIt-Anchor\" href=\"#ida加载该程序-4\">#</a> IDA 加载该程序</h3>\n<p>直接来到 main 函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main_0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-DCh]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+14h] [ebp-D4h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+E0h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">__CheckForDebuggerJustMyCode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>unk_41C066<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v5 <span class=\"token operator\">=</span> operator <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v5 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">sub_411460</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  v6 <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  v4<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">sub_411442</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>根据源码，这一部分就是虚函数调用在 IDA 中的反编译结果：</p>\n<pre><code class=\"language-c++\">(*(void (__thiscall **)(_DWORD *))*v6)(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n</code></pre>\n<p>这里 v6 是指向 v4，来到 v4 的初始化，可以看到存在一个 <code>virtual function table</code>  也就是虚函数表：</p>\n<pre><code class=\"language-c++\">_DWORD *__thiscall sub_411880(_DWORD *this)\n&#123;\n  *this = &amp;Test::`vftable';\n  return this;\n&#125;\n</code></pre>\n<p>根据前面 VS 中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-202202221822914\" loading=\"lazy\"></p>\n<p>基本上关于虚函数在 IDA 中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-4\"><a class=\"markdownIt-Anchor\" href=\"#一道逆向题-4\">#</a> 一道逆向题</h3>\n<p>SWPUCTF2019 easyRE，同样来到 main 函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<pre><code class=\"language-c++\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF\n  _DWORD *v5; // [esp+4h] [ebp-88h]\n  _DWORD *v6; // [esp+8h] [ebp-84h]\n  int v7; // [esp+Ch] [ebp-80h]\n  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF\n  int v9; // [esp+88h] [ebp-4h]\n\n  if ( sub_40EF90() )\n    return 1;\n  sub_4026C0(0x6Cu);\n  sub_401FE0(v4[27], v5);\n  v9 = 0;\n  v6 = v4;\n  sub_40F360(v8);\n  sub_40F080(v4[0], v4[1]);\n  v5 = v4;\n  sub_40F360(v8);\n  sub_40F150(argc, (int)argv);\n  v7 = 0;\n  v9 = -1;\n  sub_4021C0(v8);\n  return v7;\n&#125;\n</code></pre>\n<p>进入 sub_401FE0:</p>\n<pre><code class=\"language-c++\">_DWORD *__thiscall sub_401FE0(_DWORD *this)\n&#123;\n  int i; // [esp+4h] [ebp-14h]\n\n  *this = &amp;EASYRE::`vftable';\n  this[1] = 0;\n  *((_BYTE *)this + 52) = 8;\n  *((_BYTE *)this + 53) = -22;\n  *((_BYTE *)this + 54) = 88;\n  *((_BYTE *)this + 55) = -34;\n  *((_BYTE *)this + 56) = -108;\n  *((_BYTE *)this + 57) = -48;\n  *((_BYTE *)this + 58) = 59;\n  *((_BYTE *)this + 59) = -66;\n  *((_BYTE *)this + 60) = -120;\n  *((_BYTE *)this + 61) = -44;\n  *((_BYTE *)this + 62) = 50;\n  *((_BYTE *)this + 63) = -74;\n  *((_BYTE *)this + 64) = 20;\n  *((_BYTE *)this + 65) = -126;\n  *((_BYTE *)this + 66) = -73;\n  *((_BYTE *)this + 67) = -81;\n  *((_BYTE *)this + 68) = 20;\n  *((_BYTE *)this + 69) = 84;\n  *((_BYTE *)this + 70) = 127;\n  *((_BYTE *)this + 71) = -49;\n  qmemcpy(this + 18, &quot;  03\\&quot;3   0 203\\&quot;   $ &quot;, 20);\n  sub_4030A0(this + 23);\n  sub_402DE0(this + 26);\n  for ( i = 0; i &lt; 40; ++i )\n    *((_BYTE *)this + i + 12) = 0;\n  return this;\n&#125;\n</code></pre>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-202202221822478\" loading=\"lazy\"></p>\n<p>来到校验 flag 的函数，可以发现存在虚函数的特征：</p>\n<pre><code class=\"language-c++\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )\n  &#123;\n    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);\n    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>这里 this 指针指向的首地址是 <code>0x4124E4</code> ，根据偏移可以映射：</p>\n<pre><code class=\"language-c++\">(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&gt; 0x4124F0 -&gt; sub_402500\n(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&gt; 0x4124FC -&gt; sub_4026E0\n(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&gt; 0x41250C -&gt; sub_402A00\n</code></pre>\n<p>映射：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL __thiscall <span class=\"token function\">sub_4024B0</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span>this<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  BOOL result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  this<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sub_402500</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">sub_4026E0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sub_402A00</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"end-4\"><a class=\"markdownIt-Anchor\" href=\"#end-4\">#</a> End</h3>\n<p>但是在 VS 中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<h2 id=\"reverse中虚函数虚表浅析-6\"><a class=\"markdownIt-Anchor\" href=\"#reverse中虚函数虚表浅析-6\">#</a> Reverse 中虚函数 / 虚表浅析</h2>\n<h3 id=\"this指针-6\"><a class=\"markdownIt-Anchor\" href=\"#this指针-6\">#</a> this 指针</h3>\n<p>在 C++ 的类中，需要研究一个非常重要并且特殊的指针就是 this 指针：</p>\n<p>一个简单的 demo 来测试一下 this 指针：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tTest<span class=\"token operator\">*</span> test <span class=\"token operator\">=</span> new Test<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\ttest<span class=\"token operator\">-></span>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，直接取 test 的值就是 a 的值，这里的 test 就是 this 指针本身，而 this 指针的特性就是指向类的首地址，在对类进行内存分配时，this 指针会默认指向该类的首地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-202202221821809\" loading=\"lazy\"></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以 demo 中用 struct 和 class 的结果相同</strong></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-202202221821374\" loading=\"lazy\"></p>\n<p>demo2：</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n\nstruct Test &#123;\n\tint a;\n\tint b;\n\tint c;\n\tvirtual void func1();\n\tvirtual void func2();\n\tvirtual void func3();\n\n&#125;;\n\nvoid Test::func1() &#123;\n\tprintf(&quot;func1&quot;);\n&#125;\n\nvoid Test::func2() &#123;\n\tprintf(&quot;func2&quot;);\n&#125;\n\nvoid Test::func3() &#123;\n\tprintf(&quot;func3&quot;);\n&#125;\n\nint main() &#123;\n\n\tTest* test = new Test;\n\ttest-&gt;a = 100;\n\ttest-&gt;func1();\n\tprintf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名：：方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为 <code>func1</code> 、 <code>func2</code> 、 <code>func3</code> ，我们注意到这里 call 的函数内容来自 <code>[edx]</code> 、 <code>[edx+4]</code> 、 <code>[edx+8]</code></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-202202221822350\" loading=\"lazy\"></p>\n<p>VS 的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类 or 结构体中，如果其虚函数的数量大于 1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-202202221822816\" loading=\"lazy\"></p>\n<p>但是在 VS 中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-202202221822113\" loading=\"lazy\"></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-202202221822536\" loading=\"lazy\"></p>\n<h3 id=\"ida加载该程序-5\"><a class=\"markdownIt-Anchor\" href=\"#ida加载该程序-5\">#</a> IDA 加载该程序</h3>\n<p>直接来到 main 函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main_0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-DCh]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+14h] [ebp-D4h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+E0h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">__CheckForDebuggerJustMyCode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>unk_41C066<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v5 <span class=\"token operator\">=</span> operator <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v5 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">sub_411460</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  v6 <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  v4<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">sub_411442</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>根据源码，这一部分就是虚函数调用在 IDA 中的反编译结果：</p>\n<pre><code class=\"language-c++\">(*(void (__thiscall **)(_DWORD *))*v6)(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n</code></pre>\n<p>这里 v6 是指向 v4，来到 v4 的初始化，可以看到存在一个 <code>virtual function table</code>  也就是虚函数表：</p>\n<pre><code class=\"language-c++\">_DWORD *__thiscall sub_411880(_DWORD *this)\n&#123;\n  *this = &amp;Test::`vftable';\n  return this;\n&#125;\n</code></pre>\n<p>根据前面 VS 中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-202202221822914\" loading=\"lazy\"></p>\n<p>基本上关于虚函数在 IDA 中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-5\"><a class=\"markdownIt-Anchor\" href=\"#一道逆向题-5\">#</a> 一道逆向题</h3>\n<p>SWPUCTF2019 easyRE，同样来到 main 函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<pre><code class=\"language-c++\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF\n  _DWORD *v5; // [esp+4h] [ebp-88h]\n  _DWORD *v6; // [esp+8h] [ebp-84h]\n  int v7; // [esp+Ch] [ebp-80h]\n  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF\n  int v9; // [esp+88h] [ebp-4h]\n\n  if ( sub_40EF90() )\n    return 1;\n  sub_4026C0(0x6Cu);\n  sub_401FE0(v4[27], v5);\n  v9 = 0;\n  v6 = v4;\n  sub_40F360(v8);\n  sub_40F080(v4[0], v4[1]);\n  v5 = v4;\n  sub_40F360(v8);\n  sub_40F150(argc, (int)argv);\n  v7 = 0;\n  v9 = -1;\n  sub_4021C0(v8);\n  return v7;\n&#125;\n</code></pre>\n<p>进入 sub_401FE0:</p>\n<pre><code class=\"language-c++\">_DWORD *__thiscall sub_401FE0(_DWORD *this)\n&#123;\n  int i; // [esp+4h] [ebp-14h]\n\n  *this = &amp;EASYRE::`vftable';\n  this[1] = 0;\n  *((_BYTE *)this + 52) = 8;\n  *((_BYTE *)this + 53) = -22;\n  *((_BYTE *)this + 54) = 88;\n  *((_BYTE *)this + 55) = -34;\n  *((_BYTE *)this + 56) = -108;\n  *((_BYTE *)this + 57) = -48;\n  *((_BYTE *)this + 58) = 59;\n  *((_BYTE *)this + 59) = -66;\n  *((_BYTE *)this + 60) = -120;\n  *((_BYTE *)this + 61) = -44;\n  *((_BYTE *)this + 62) = 50;\n  *((_BYTE *)this + 63) = -74;\n  *((_BYTE *)this + 64) = 20;\n  *((_BYTE *)this + 65) = -126;\n  *((_BYTE *)this + 66) = -73;\n  *((_BYTE *)this + 67) = -81;\n  *((_BYTE *)this + 68) = 20;\n  *((_BYTE *)this + 69) = 84;\n  *((_BYTE *)this + 70) = 127;\n  *((_BYTE *)this + 71) = -49;\n  qmemcpy(this + 18, &quot;  03\\&quot;3   0 203\\&quot;   $ &quot;, 20);\n  sub_4030A0(this + 23);\n  sub_402DE0(this + 26);\n  for ( i = 0; i &lt; 40; ++i )\n    *((_BYTE *)this + i + 12) = 0;\n  return this;\n&#125;\n</code></pre>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-202202221822478\" loading=\"lazy\"></p>\n<p>来到校验 flag 的函数，可以发现存在虚函数的特征：</p>\n<pre><code class=\"language-c++\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )\n  &#123;\n    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);\n    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>这里 this 指针指向的首地址是 <code>0x4124E4</code> ，根据偏移可以映射：</p>\n<pre><code class=\"language-c++\">(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&gt; 0x4124F0 -&gt; sub_402500\n(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&gt; 0x4124FC -&gt; sub_4026E0\n(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&gt; 0x41250C -&gt; sub_402A00\n</code></pre>\n<p>映射：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL __thiscall <span class=\"token function\">sub_4024B0</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span>this<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  BOOL result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  this<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sub_402500</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">sub_4026E0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sub_402A00</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"end-5\"><a class=\"markdownIt-Anchor\" href=\"#end-5\">#</a> End</h3>\n<h2 id=\"reverse中虚函数虚表浅析-7\"><a class=\"markdownIt-Anchor\" href=\"#reverse中虚函数虚表浅析-7\">#</a> Reverse 中虚函数 / 虚表浅析</h2>\n<h3 id=\"this指针-7\"><a class=\"markdownIt-Anchor\" href=\"#this指针-7\">#</a> this 指针</h3>\n<p>在 C++ 的类中，需要研究一个非常重要并且特殊的指针就是 this 指针：</p>\n<p>一个简单的 demo 来测试一下 this 指针：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tTest<span class=\"token operator\">*</span> test <span class=\"token operator\">=</span> new Test<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\ttest<span class=\"token operator\">-></span>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，直接取 test 的值就是 a 的值，这里的 test 就是 this 指针本身，而 this 指针的特性就是指向类的首地址，在对类进行内存分配时，this 指针会默认指向该类的首地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-202202221821809\" loading=\"lazy\"></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以 demo 中用 struct 和 class 的结果相同</strong></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-202202221821374\" loading=\"lazy\"></p>\n<p>demo2：</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n\nstruct Test &#123;\n\tint a;\n\tint b;\n\tint c;\n\tvirtual void func1();\n\tvirtual void func2();\n\tvirtual void func3();\n\n&#125;;\n\nvoid Test::func1() &#123;\n\tprintf(&quot;func1&quot;);\n&#125;\n\nvoid Test::func2() &#123;\n\tprintf(&quot;func2&quot;);\n&#125;\n\nvoid Test::func3() &#123;\n\tprintf(&quot;func3&quot;);\n&#125;\n\nint main() &#123;\n\n\tTest* test = new Test;\n\ttest-&gt;a = 100;\n\ttest-&gt;func1();\n\tprintf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名：：方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为 <code>func1</code> 、 <code>func2</code> 、 <code>func3</code> ，我们注意到这里 call 的函数内容来自 <code>[edx]</code> 、 <code>[edx+4]</code> 、 <code>[edx+8]</code></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-202202221822350\" loading=\"lazy\"></p>\n<p>VS 的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类 or 结构体中，如果其虚函数的数量大于 1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-202202221822816\" loading=\"lazy\"></p>\n<p>但是在 VS 中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-202202221822113\" loading=\"lazy\"></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-202202221822536\" loading=\"lazy\"></p>\n<h3 id=\"ida加载该程序-6\"><a class=\"markdownIt-Anchor\" href=\"#ida加载该程序-6\">#</a> IDA 加载该程序</h3>\n<p>直接来到 main 函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main_0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-DCh]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+14h] [ebp-D4h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+E0h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">__CheckForDebuggerJustMyCode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>unk_41C066<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v5 <span class=\"token operator\">=</span> operator <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v5 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">sub_411460</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  v6 <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  v4<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">sub_411442</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>根据源码，这一部分就是虚函数调用在 IDA 中的反编译结果：</p>\n<pre><code class=\"language-c++\">(*(void (__thiscall **)(_DWORD *))*v6)(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n</code></pre>\n<p>这里 v6 是指向 v4，来到 v4 的初始化，可以看到存在一个 <code>virtual function table</code>  也就是虚函数表：</p>\n<pre><code class=\"language-c++\">_DWORD *__thiscall sub_411880(_DWORD *this)\n&#123;\n  *this = &amp;Test::`vftable';\n  return this;\n&#125;\n</code></pre>\n<p>根据前面 VS 中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-202202221822914\" loading=\"lazy\"></p>\n<p>基本上关于虚函数在 IDA 中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-6\"><a class=\"markdownIt-Anchor\" href=\"#一道逆向题-6\">#</a> 一道逆向题</h3>\n<p>SWPUCTF2019 easyRE，同样来到 main 函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<pre><code class=\"language-c++\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF\n  _DWORD *v5; // [esp+4h] [ebp-88h]\n  _DWORD *v6; // [esp+8h] [ebp-84h]\n  int v7; // [esp+Ch] [ebp-80h]\n  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF\n  int v9; // [esp+88h] [ebp-4h]\n\n  if ( sub_40EF90() )\n    return 1;\n  sub_4026C0(0x6Cu);\n  sub_401FE0(v4[27], v5);\n  v9 = 0;\n  v6 = v4;\n  sub_40F360(v8);\n  sub_40F080(v4[0], v4[1]);\n  v5 = v4;\n  sub_40F360(v8);\n  sub_40F150(argc, (int)argv);\n  v7 = 0;\n  v9 = -1;\n  sub_4021C0(v8);\n  return v7;\n&#125;\n</code></pre>\n<p>进入 sub_401FE0:</p>\n<pre><code class=\"language-c++\">_DWORD *__thiscall sub_401FE0(_DWORD *this)\n&#123;\n  int i; // [esp+4h] [ebp-14h]\n\n  *this = &amp;EASYRE::`vftable';\n  this[1] = 0;\n  *((_BYTE *)this + 52) = 8;\n  *((_BYTE *)this + 53) = -22;\n  *((_BYTE *)this + 54) = 88;\n  *((_BYTE *)this + 55) = -34;\n  *((_BYTE *)this + 56) = -108;\n  *((_BYTE *)this + 57) = -48;\n  *((_BYTE *)this + 58) = 59;\n  *((_BYTE *)this + 59) = -66;\n  *((_BYTE *)this + 60) = -120;\n  *((_BYTE *)this + 61) = -44;\n  *((_BYTE *)this + 62) = 50;\n  *((_BYTE *)this + 63) = -74;\n  *((_BYTE *)this + 64) = 20;\n  *((_BYTE *)this + 65) = -126;\n  *((_BYTE *)this + 66) = -73;\n  *((_BYTE *)this + 67) = -81;\n  *((_BYTE *)this + 68) = 20;\n  *((_BYTE *)this + 69) = 84;\n  *((_BYTE *)this + 70) = 127;\n  *((_BYTE *)this + 71) = -49;\n  qmemcpy(this + 18, &quot;  03\\&quot;3   0 203\\&quot;   $ &quot;, 20);\n  sub_4030A0(this + 23);\n  sub_402DE0(this + 26);\n  for ( i = 0; i &lt; 40; ++i )\n    *((_BYTE *)this + i + 12) = 0;\n  return this;\n&#125;\n</code></pre>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-202202221822478\" loading=\"lazy\"></p>\n<p>来到校验 flag 的函数，可以发现存在虚函数的特征：</p>\n<pre><code class=\"language-c++\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )\n  &#123;\n    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);\n    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>这里 this 指针指向的首地址是 <code>0x4124E4</code> ，根据偏移可以映射：</p>\n<pre><code class=\"language-c++\">(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&gt; 0x4124F0 -&gt; sub_402500\n(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&gt; 0x4124FC -&gt; sub_4026E0\n(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&gt; 0x41250C -&gt; sub_402A00\n</code></pre>\n<p>映射：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL __thiscall <span class=\"token function\">sub_4024B0</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span>this<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  BOOL result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  this<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sub_402500</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">sub_4026E0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sub_402A00</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"end-6\"><a class=\"markdownIt-Anchor\" href=\"#end-6\">#</a> End</h3>\n<h3 id=\"ida加载该程序-7\"><a class=\"markdownIt-Anchor\" href=\"#ida加载该程序-7\">#</a> IDA 加载该程序</h3>\n<p>直接来到 main 函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main_0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-DCh]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+14h] [ebp-D4h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+E0h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">__CheckForDebuggerJustMyCode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>unk_41C066<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v5 <span class=\"token operator\">=</span> operator <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v5 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">sub_411460</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  v6 <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  v4<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">sub_411442</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>根据源码，这一部分就是虚函数调用在 IDA 中的反编译结果：</p>\n<pre><code class=\"language-c++\">(*(void (__thiscall **)(_DWORD *))*v6)(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n</code></pre>\n<p>这里 v6 是指向 v4，来到 v4 的初始化，可以看到存在一个 <code>virtual function table</code>  也就是虚函数表：</p>\n<pre><code class=\"language-c++\">_DWORD *__thiscall sub_411880(_DWORD *this)\n&#123;\n  *this = &amp;Test::`vftable';\n  return this;\n&#125;\n</code></pre>\n<p>根据前面 VS 中的调试可以知道这个表中存放的是增量链接：</p>\n<h2 id=\"reverse中虚函数虚表浅析-8\"><a class=\"markdownIt-Anchor\" href=\"#reverse中虚函数虚表浅析-8\">#</a> Reverse 中虚函数 / 虚表浅析</h2>\n<h3 id=\"this指针-8\"><a class=\"markdownIt-Anchor\" href=\"#this指针-8\">#</a> this 指针</h3>\n<p>在 C++ 的类中，需要研究一个非常重要并且特殊的指针就是 this 指针：</p>\n<p>一个简单的 demo 来测试一下 this 指针：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tTest<span class=\"token operator\">*</span> test <span class=\"token operator\">=</span> new Test<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\ttest<span class=\"token operator\">-></span>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，直接取 test 的值就是 a 的值，这里的 test 就是 this 指针本身，而 this 指针的特性就是指向类的首地址，在对类进行内存分配时，this 指针会默认指向该类的首地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-202202221821809\" loading=\"lazy\"></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以 demo 中用 struct 和 class 的结果相同</strong></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-202202221821374\" loading=\"lazy\"></p>\n<p>demo2：</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n\nstruct Test &#123;\n\tint a;\n\tint b;\n\tint c;\n\tvirtual void func1();\n\tvirtual void func2();\n\tvirtual void func3();\n\n&#125;;\n\nvoid Test::func1() &#123;\n\tprintf(&quot;func1&quot;);\n&#125;\n\nvoid Test::func2() &#123;\n\tprintf(&quot;func2&quot;);\n&#125;\n\nvoid Test::func3() &#123;\n\tprintf(&quot;func3&quot;);\n&#125;\n\nint main() &#123;\n\n\tTest* test = new Test;\n\ttest-&gt;a = 100;\n\ttest-&gt;func1();\n\tprintf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名：：方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为 <code>func1</code> 、 <code>func2</code> 、 <code>func3</code> ，我们注意到这里 call 的函数内容来自 <code>[edx]</code> 、 <code>[edx+4]</code> 、 <code>[edx+8]</code></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-202202221822350\" loading=\"lazy\"></p>\n<p>VS 的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类 or 结构体中，如果其虚函数的数量大于 1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-202202221822816\" loading=\"lazy\"></p>\n<p>但是在 VS 中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-202202221822113\" loading=\"lazy\"></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-202202221822536\" loading=\"lazy\"></p>\n<h3 id=\"ida加载该程序-8\"><a class=\"markdownIt-Anchor\" href=\"#ida加载该程序-8\">#</a> IDA 加载该程序</h3>\n<p>直接来到 main 函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main_0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-DCh]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+14h] [ebp-D4h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+E0h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">__CheckForDebuggerJustMyCode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>unk_41C066<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v5 <span class=\"token operator\">=</span> operator <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v5 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">sub_411460</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  v6 <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  v4<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">sub_411442</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>根据源码，这一部分就是虚函数调用在 IDA 中的反编译结果：</p>\n<pre><code class=\"language-c++\">(*(void (__thiscall **)(_DWORD *))*v6)(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n</code></pre>\n<p>这里 v6 是指向 v4，来到 v4 的初始化，可以看到存在一个 <code>virtual function table</code>  也就是虚函数表：</p>\n<pre><code class=\"language-c++\">_DWORD *__thiscall sub_411880(_DWORD *this)\n&#123;\n  *this = &amp;Test::`vftable';\n  return this;\n&#125;\n</code></pre>\n<p>根据前面 VS 中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-202202221822914\" loading=\"lazy\"></p>\n<p>基本上关于虚函数在 IDA 中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-7\"><a class=\"markdownIt-Anchor\" href=\"#一道逆向题-7\">#</a> 一道逆向题</h3>\n<p>SWPUCTF2019 easyRE，同样来到 main 函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<pre><code class=\"language-c++\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF\n  _DWORD *v5; // [esp+4h] [ebp-88h]\n  _DWORD *v6; // [esp+8h] [ebp-84h]\n  int v7; // [esp+Ch] [ebp-80h]\n  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF\n  int v9; // [esp+88h] [ebp-4h]\n\n  if ( sub_40EF90() )\n    return 1;\n  sub_4026C0(0x6Cu);\n  sub_401FE0(v4[27], v5);\n  v9 = 0;\n  v6 = v4;\n  sub_40F360(v8);\n  sub_40F080(v4[0], v4[1]);\n  v5 = v4;\n  sub_40F360(v8);\n  sub_40F150(argc, (int)argv);\n  v7 = 0;\n  v9 = -1;\n  sub_4021C0(v8);\n  return v7;\n&#125;\n</code></pre>\n<p>进入 sub_401FE0:</p>\n<pre><code class=\"language-c++\">_DWORD *__thiscall sub_401FE0(_DWORD *this)\n&#123;\n  int i; // [esp+4h] [ebp-14h]\n\n  *this = &amp;EASYRE::`vftable';\n  this[1] = 0;\n  *((_BYTE *)this + 52) = 8;\n  *((_BYTE *)this + 53) = -22;\n  *((_BYTE *)this + 54) = 88;\n  *((_BYTE *)this + 55) = -34;\n  *((_BYTE *)this + 56) = -108;\n  *((_BYTE *)this + 57) = -48;\n  *((_BYTE *)this + 58) = 59;\n  *((_BYTE *)this + 59) = -66;\n  *((_BYTE *)this + 60) = -120;\n  *((_BYTE *)this + 61) = -44;\n  *((_BYTE *)this + 62) = 50;\n  *((_BYTE *)this + 63) = -74;\n  *((_BYTE *)this + 64) = 20;\n  *((_BYTE *)this + 65) = -126;\n  *((_BYTE *)this + 66) = -73;\n  *((_BYTE *)this + 67) = -81;\n  *((_BYTE *)this + 68) = 20;\n  *((_BYTE *)this + 69) = 84;\n  *((_BYTE *)this + 70) = 127;\n  *((_BYTE *)this + 71) = -49;\n  qmemcpy(this + 18, &quot;  03\\&quot;3   0 203\\&quot;   $ &quot;, 20);\n  sub_4030A0(this + 23);\n  sub_402DE0(this + 26);\n  for ( i = 0; i &lt; 40; ++i )\n    *((_BYTE *)this + i + 12) = 0;\n  return this;\n&#125;\n</code></pre>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-202202221822478\" loading=\"lazy\"></p>\n<p>来到校验 flag 的函数，可以发现存在虚函数的特征：</p>\n<pre><code class=\"language-c++\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )\n  &#123;\n    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);\n    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>这里 this 指针指向的首地址是 <code>0x4124E4</code> ，根据偏移可以映射：</p>\n<pre><code class=\"language-c++\">(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&gt; 0x4124F0 -&gt; sub_402500\n(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&gt; 0x4124FC -&gt; sub_4026E0\n(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&gt; 0x41250C -&gt; sub_402A00\n</code></pre>\n<p>映射：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL __thiscall <span class=\"token function\">sub_4024B0</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span>this<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  BOOL result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  this<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sub_402500</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">sub_4026E0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sub_402A00</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"end-7\"><a class=\"markdownIt-Anchor\" href=\"#end-7\">#</a> End</h3>\n<p>基本上关于虚函数在 IDA 中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-8\"><a class=\"markdownIt-Anchor\" href=\"#一道逆向题-8\">#</a> 一道逆向题</h3>\n<p>SWPUCTF2019 easyRE，同样来到 main 函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<pre><code class=\"language-c++\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF\n  _DWORD *v5; // [esp+4h] [ebp-88h]\n  _DWORD *v6; // [esp+8h] [ebp-84h]\n  int v7; // [esp+Ch] [ebp-80h]\n  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF\n  int v9; // [esp+88h] [ebp-4h]\n\n  if ( sub_40EF90() )\n    return 1;\n  sub_4026C0(0x6Cu);\n  sub_401FE0(v4[27], v5);\n  v9 = 0;\n  v6 = v4;\n  sub_40F360(v8);\n  sub_40F080(v4[0], v4[1]);\n  v5 = v4;\n  sub_40F360(v8);\n  sub_40F150(argc, (int)argv);\n  v7 = 0;\n  v9 = -1;\n  sub_4021C0(v8);\n  return v7;\n&#125;\n</code></pre>\n<p>进入 sub_401FE0:</p>\n<pre><code class=\"language-c++\">_DWORD *__thiscall sub_401FE0(_DWORD *this)\n&#123;\n  int i; // [esp+4h] [ebp-14h]\n\n  *this = &amp;EASYRE::`vftable';\n  this[1] = 0;\n  *((_BYTE *)this + 52) = 8;\n  *((_BYTE *)this + 53) = -22;\n  *((_BYTE *)this + 54) = 88;\n  *((_BYTE *)this + 55) = -34;\n  *((_BYTE *)this + 56) = -108;\n  *((_BYTE *)this + 57) = -48;\n  *((_BYTE *)this + 58) = 59;\n  *((_BYTE *)this + 59) = -66;\n  *((_BYTE *)this + 60) = -120;\n  *((_BYTE *)this + 61) = -44;\n  *((_BYTE *)this + 62) = 50;\n  *((_BYTE *)this + 63) = -74;\n  *((_BYTE *)this + 64) = 20;\n  *((_BYTE *)this + 65) = -126;\n  *((_BYTE *)this + 66) = -73;\n  *((_BYTE *)this + 67) = -81;\n  *((_BYTE *)this + 68) = 20;\n  *((_BYTE *)this + 69) = 84;\n  *((_BYTE *)this + 70) = 127;\n  *((_BYTE *)this + 71) = -49;\n  qmemcpy(this + 18, &quot;  03\\&quot;3   0 203\\&quot;   $ &quot;, 20);\n  sub_4030A0(this + 23);\n  sub_402DE0(this + 26);\n  for ( i = 0; i &lt; 40; ++i )\n    *((_BYTE *)this + i + 12) = 0;\n  return this;\n&#125;\n</code></pre>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<h2 id=\"reverse中虚函数虚表浅析-9\"><a class=\"markdownIt-Anchor\" href=\"#reverse中虚函数虚表浅析-9\">#</a> Reverse 中虚函数 / 虚表浅析</h2>\n<h3 id=\"this指针-9\"><a class=\"markdownIt-Anchor\" href=\"#this指针-9\">#</a> this 指针</h3>\n<p>在 C++ 的类中，需要研究一个非常重要并且特殊的指针就是 this 指针：</p>\n<p>一个简单的 demo 来测试一下 this 指针：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tTest<span class=\"token operator\">*</span> test <span class=\"token operator\">=</span> new Test<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\ttest<span class=\"token operator\">-></span>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，直接取 test 的值就是 a 的值，这里的 test 就是 this 指针本身，而 this 指针的特性就是指向类的首地址，在对类进行内存分配时，this 指针会默认指向该类的首地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-202202221821809\" loading=\"lazy\"></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以 demo 中用 struct 和 class 的结果相同</strong></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-202202221821374\" loading=\"lazy\"></p>\n<p>demo2：</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n\nstruct Test &#123;\n\tint a;\n\tint b;\n\tint c;\n\tvirtual void func1();\n\tvirtual void func2();\n\tvirtual void func3();\n\n&#125;;\n\nvoid Test::func1() &#123;\n\tprintf(&quot;func1&quot;);\n&#125;\n\nvoid Test::func2() &#123;\n\tprintf(&quot;func2&quot;);\n&#125;\n\nvoid Test::func3() &#123;\n\tprintf(&quot;func3&quot;);\n&#125;\n\nint main() &#123;\n\n\tTest* test = new Test;\n\ttest-&gt;a = 100;\n\ttest-&gt;func1();\n\tprintf(&quot;%d&quot;, *test);\n&#125;\n</code></pre>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名：：方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为 <code>func1</code> 、 <code>func2</code> 、 <code>func3</code> ，我们注意到这里 call 的函数内容来自 <code>[edx]</code> 、 <code>[edx+4]</code> 、 <code>[edx+8]</code></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-202202221822350\" loading=\"lazy\"></p>\n<p>VS 的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类 or 结构体中，如果其虚函数的数量大于 1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-202202221822816\" loading=\"lazy\"></p>\n<p>但是在 VS 中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-202202221822113\" loading=\"lazy\"></p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-202202221822536\" loading=\"lazy\"></p>\n<h3 id=\"ida加载该程序-9\"><a class=\"markdownIt-Anchor\" href=\"#ida加载该程序-9\">#</a> IDA 加载该程序</h3>\n<p>直接来到 main 函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main_0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-DCh]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+14h] [ebp-D4h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+E0h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">__CheckForDebuggerJustMyCode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>unk_41C066<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v5 <span class=\"token operator\">=</span> operator <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v5 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">sub_411460</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  v6 <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  v4<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__thiscall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">sub_411442</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>根据源码，这一部分就是虚函数调用在 IDA 中的反编译结果：</p>\n<pre><code class=\"language-c++\">(*(void (__thiscall **)(_DWORD *))*v6)(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 4))(v6);\n(*(void (__thiscall **)(_DWORD *))(*v6 + 8))(v6);\n</code></pre>\n<p>这里 v6 是指向 v4，来到 v4 的初始化，可以看到存在一个 <code>virtual function table</code>  也就是虚函数表：</p>\n<pre><code class=\"language-c++\">_DWORD *__thiscall sub_411880(_DWORD *this)\n&#123;\n  *this = &amp;Test::`vftable';\n  return this;\n&#125;\n</code></pre>\n<p>根据前面 VS 中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-202202221822914\" loading=\"lazy\"></p>\n<p>基本上关于虚函数在 IDA 中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-9\"><a class=\"markdownIt-Anchor\" href=\"#一道逆向题-9\">#</a> 一道逆向题</h3>\n<p>SWPUCTF2019 easyRE，同样来到 main 函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<pre><code class=\"language-c++\">int __cdecl main(int argc, const char **argv, const char **envp)\n&#123;\n  _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF\n  _DWORD *v5; // [esp+4h] [ebp-88h]\n  _DWORD *v6; // [esp+8h] [ebp-84h]\n  int v7; // [esp+Ch] [ebp-80h]\n  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF\n  int v9; // [esp+88h] [ebp-4h]\n\n  if ( sub_40EF90() )\n    return 1;\n  sub_4026C0(0x6Cu);\n  sub_401FE0(v4[27], v5);\n  v9 = 0;\n  v6 = v4;\n  sub_40F360(v8);\n  sub_40F080(v4[0], v4[1]);\n  v5 = v4;\n  sub_40F360(v8);\n  sub_40F150(argc, (int)argv);\n  v7 = 0;\n  v9 = -1;\n  sub_4021C0(v8);\n  return v7;\n&#125;\n</code></pre>\n<p>进入 sub_401FE0:</p>\n<pre><code class=\"language-c++\">_DWORD *__thiscall sub_401FE0(_DWORD *this)\n&#123;\n  int i; // [esp+4h] [ebp-14h]\n\n  *this = &amp;EASYRE::`vftable';\n  this[1] = 0;\n  *((_BYTE *)this + 52) = 8;\n  *((_BYTE *)this + 53) = -22;\n  *((_BYTE *)this + 54) = 88;\n  *((_BYTE *)this + 55) = -34;\n  *((_BYTE *)this + 56) = -108;\n  *((_BYTE *)this + 57) = -48;\n  *((_BYTE *)this + 58) = 59;\n  *((_BYTE *)this + 59) = -66;\n  *((_BYTE *)this + 60) = -120;\n  *((_BYTE *)this + 61) = -44;\n  *((_BYTE *)this + 62) = 50;\n  *((_BYTE *)this + 63) = -74;\n  *((_BYTE *)this + 64) = 20;\n  *((_BYTE *)this + 65) = -126;\n  *((_BYTE *)this + 66) = -73;\n  *((_BYTE *)this + 67) = -81;\n  *((_BYTE *)this + 68) = 20;\n  *((_BYTE *)this + 69) = 84;\n  *((_BYTE *)this + 70) = 127;\n  *((_BYTE *)this + 71) = -49;\n  qmemcpy(this + 18, &quot;  03\\&quot;3   0 203\\&quot;   $ &quot;, 20);\n  sub_4030A0(this + 23);\n  sub_402DE0(this + 26);\n  for ( i = 0; i &lt; 40; ++i )\n    *((_BYTE *)this + i + 12) = 0;\n  return this;\n&#125;\n</code></pre>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-202202221822478\" loading=\"lazy\"></p>\n<p>来到校验 flag 的函数，可以发现存在虚函数的特征：</p>\n<pre><code class=\"language-c++\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )\n  &#123;\n    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);\n    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>这里 this 指针指向的首地址是 <code>0x4124E4</code> ，根据偏移可以映射：</p>\n<pre><code class=\"language-c++\">(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&gt; 0x4124F0 -&gt; sub_402500\n(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&gt; 0x4124FC -&gt; sub_4026E0\n(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&gt; 0x41250C -&gt; sub_402A00\n</code></pre>\n<p>映射：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL __thiscall <span class=\"token function\">sub_4024B0</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span>this<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  BOOL result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  this<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sub_402500</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">sub_4026E0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sub_402A00</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"end-8\"><a class=\"markdownIt-Anchor\" href=\"#end-8\">#</a> End</h3>\n<p>来到校验 flag 的函数，可以发现存在虚函数的特征：</p>\n<pre><code class=\"language-c++\">BOOL __thiscall sub_4024B0(_DWORD *this, int flag)\n&#123;\n  BOOL result; // eax\n\n  this[2] = flag;\n  result = 0;\n  if ( (*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) )\n  &#123;\n    (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);\n    if ( (*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) )\n      result = 1;\n  &#125;\n  return result;\n&#125;\n</code></pre>\n<p>这里 this 指针指向的首地址是 <code>0x4124E4</code> ，根据偏移可以映射：</p>\n<pre><code class=\"language-c++\">(*(int (__thiscall **)(_DWORD *))(*this + 0xC))(this) -&gt; 0x4124F0 -&gt; sub_402500\n(*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this) -&gt; 0x4124FC -&gt; sub_4026E0\n(*(int (__thiscall **)(_DWORD *))(*this + 0x28))(this) -&gt; 0x41250C -&gt; sub_402A00\n</code></pre>\n<p>映射：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL __thiscall <span class=\"token function\">sub_4024B0</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span>this<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  BOOL result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  this<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sub_402500</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">sub_4026E0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sub_402A00</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"end-9\"><a class=\"markdownIt-Anchor\" href=\"#end-9\">#</a> End</h3>\n",
            "tags": [
                "Reverse",
                "C++"
            ]
        }
    ]
}