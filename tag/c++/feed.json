{
    "version": "https://jsonfeed.org/version/1",
    "title": "YuSec2021 • All posts by \"c++\" tag",
    "description": "Record My Learning",
    "home_page_url": "https://YuSec2021.github.io",
    "items": [
        {
            "id": "https://yusec2021.github.io/2022/02/17/VirtualFunction/",
            "url": "https://yusec2021.github.io/2022/02/17/VirtualFunction/",
            "title": "虚函数以及虚表在IDA中的体现",
            "date_published": "2022-02-17T10:00:09.000Z",
            "content_html": "<h2 id=\"reverse中虚函数虚表浅析\"><a class=\"anchor\" href=\"#reverse中虚函数虚表浅析\">#</a> Reverse 中虚函数 / 虚表浅析</h2>\n<h3 id=\"this指针\"><a class=\"anchor\" href=\"#this指针\">#</a> this 指针</h3>\n<p>在 C++ 的类中，需要研究一个非常重要并且特殊的指针就是 this 指针：</p>\n<p>一个简单的 demo 来测试一下 this 指针：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test</span>&#123;</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tTest* test = new Test;</span><br><span class=\"line\">\ttest-&gt;a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，直接取 test 的值就是 a 的值，这里的 test 就是 this 指针本身，而 this 指针的特性就是指向类的首地址，在对类进行内存分配时，this 指针会默认指向该类的首地址：</p>\n<h2 id=\"reverse中虚函数虚表浅析-2\"><a class=\"anchor\" href=\"#reverse中虚函数虚表浅析-2\">#</a> Reverse 中虚函数 / 虚表浅析</h2>\n<h3 id=\"this指针-2\"><a class=\"anchor\" href=\"#this指针-2\">#</a> this 指针</h3>\n<p>在 C++ 的类中，需要研究一个非常重要并且特殊的指针就是 this 指针：</p>\n<p>一个简单的 demo 来测试一下 this 指针：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test</span>&#123;</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tTest* test = new Test;</span><br><span class=\"line\">\ttest-&gt;a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，直接取 test 的值就是 a 的值，这里的 test 就是 this 指针本身，而 this 指针的特性就是指向类的首地址，在对类进行内存分配时，this 指针会默认指向该类的首地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-20211231145134480\" /></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以 demo 中用 struct 和 class 的结果相同</strong></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-20211231145838157\" /></p>\n<p>demo2：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func3</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func3&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTest* test = <span class=\"keyword\">new</span> Test;</span><br><span class=\"line\">\ttest-&gt;a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\ttest-&gt;<span class=\"built_in\">func1</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名：：方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为 <code>func1</code> 、 <code>func2</code> 、 <code>func3</code> ，我们注意到这里 call 的函数内容来自 <code>[edx]</code> 、 <code>[edx+4]</code> 、 <code>[edx+8]</code></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-20211231151743342\" /></p>\n<p>VS 的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类 or 结构体中，如果其虚函数的数量大于 1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-20211231152320103\" /></p>\n<p>但是在 VS 中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-20211231152713891\" /></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-20211231152733713\" /></p>\n<h3 id=\"ida加载该程序\"><a class=\"anchor\" href=\"#ida加载该程序\">#</a> IDA 加载该程序</h3>\n<p>直接来到 main 函数：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main_0</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _DWORD *v4; <span class=\"comment\">// [esp+Ch] [ebp-DCh]</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *v5; <span class=\"comment\">// [esp+14h] [ebp-D4h]</span></span><br><span class=\"line\">  _DWORD *v6; <span class=\"comment\">// [esp+E0h] [ebp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  __CheckForDebuggerJustMyCode(&amp;unk_41C066);</span><br><span class=\"line\">  v5 = operator new(<span class=\"number\">0x10</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v5 )</span><br><span class=\"line\">    v4 = (_DWORD *)sub_411460(v5);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v6 = v4;</span><br><span class=\"line\">  v4[<span class=\"number\">1</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))*v6)(v6);</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">4</span>))(v6);</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">8</span>))(v6);</span><br><span class=\"line\">  sub_411442(<span class=\"string\">&quot;%d&quot;</span>, *v4);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据源码，这一部分就是虚函数调用在 IDA 中的反编译结果：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))*v6)(v6);</span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">4</span>))(v6);</span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">8</span>))(v6);</span><br></pre></td></tr></table></figure></p>\n<p>这里 v6 是指向 v4，来到 v4 的初始化，可以看到存在一个 <code>virtual function table</code>  也就是虚函数表：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">_DWORD *__thiscall <span class=\"title\">sub_411880</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  *<span class=\"keyword\">this</span> = &amp;Test::`vftable<span class=\"number\">&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据前面 VS 中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-20211231160032664\" /></p>\n<p>基本上关于虚函数在 IDA 中的体现就介绍完了</p>\n<h3 id=\"一道逆向题\"><a class=\"anchor\" href=\"#一道逆向题\">#</a> 一道逆向题</h3>\n<p>SWPUCTF2019 easyRE，同样来到 main 函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> __cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  _DWORD v4[<span class=\"number\">28</span>]; <span class=\"comment\">// [esp-6Ch] [ebp-F8h] BYREF</span></span><br><span class=\"line\">  _DWORD *v5; <span class=\"comment\">// [esp+4h] [ebp-88h]</span></span><br><span class=\"line\">  _DWORD *v6; <span class=\"comment\">// [esp+8h] [ebp-84h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v7; <span class=\"comment\">// [esp+Ch] [ebp-80h]</span></span><br><span class=\"line\">  <span class=\"type\">char</span> v8[<span class=\"number\">108</span>]; <span class=\"comment\">// [esp+10h] [ebp-7Ch] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v9; <span class=\"comment\">// [esp+88h] [ebp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"built_in\">sub_40EF90</span>() )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sub_4026C0</span>(<span class=\"number\">0x6C</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">sub_401FE0</span>(v4[<span class=\"number\">27</span>], v5);</span><br><span class=\"line\">  v9 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v6 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F360</span>(v8);</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F080</span>(v4[<span class=\"number\">0</span>], v4[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  v5 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F360</span>(v8);</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F150</span>(argc, (<span class=\"type\">int</span>)argv);</span><br><span class=\"line\">  v7 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v9 = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sub_4021C0</span>(v8);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v7;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>进入 sub_401FE0:</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">_DWORD *__thiscall <span class=\"title\">sub_401FE0</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> i; <span class=\"comment\">// [esp+4h] [ebp-14h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  *<span class=\"keyword\">this</span> = &amp;EASYRE::`vftable<span class=\"number\">&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">52</span>) = <span class=\"number\">8</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">53</span>) = <span class=\"number\">-22</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">54</span>) = <span class=\"number\">88</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">55</span>) = <span class=\"number\">-34</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">56</span>) = <span class=\"number\">-108</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">57</span>) = <span class=\"number\">-48</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">58</span>) = <span class=\"number\">59</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">59</span>) = <span class=\"number\">-66</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">60</span>) = <span class=\"number\">-120</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">61</span>) = <span class=\"number\">-44</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">62</span>) = <span class=\"number\">50</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">63</span>) = <span class=\"number\">-74</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">64</span>) = <span class=\"number\">20</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">65</span>) = <span class=\"number\">-126</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">66</span>) = <span class=\"number\">-73</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">67</span>) = <span class=\"number\">-81</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">68</span>) = <span class=\"number\">20</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">69</span>) = <span class=\"number\">84</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">70</span>) = <span class=\"number\">127</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">71</span>) = <span class=\"number\">-49</span>;</span><br><span class=\"line\">  <span class=\"built_in\">qmemcpy</span>(<span class=\"keyword\">this</span> + <span class=\"number\">18</span>, <span class=\"string\">&quot;  03\\&quot;3   0 203\\&quot;   $ &quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">sub_4030A0</span>(<span class=\"keyword\">this</span> + <span class=\"number\">23</span>);</span><br><span class=\"line\">  <span class=\"built_in\">sub_402DE0</span>(<span class=\"keyword\">this</span> + <span class=\"number\">26</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">40</span>; ++i )</span><br><span class=\"line\">    *((_BYTE *)<span class=\"keyword\">this</span> + i + <span class=\"number\">12</span>) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-20211231160559928\" /></p>\n<p>来到校验 flag 的函数，可以发现存在虚函数的特征：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL __thiscall <span class=\"title\">sub_4024B0</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>, <span class=\"type\">int</span> flag)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  BOOL result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>[<span class=\"number\">2</span>] = flag;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0xC</span>))(<span class=\"keyword\">this</span>) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    (*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x18</span>))(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( (*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x28</span>))(<span class=\"keyword\">this</span>) )</span><br><span class=\"line\">      result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里 this 指针指向的首地址是 <code>0x4124E4</code> ，根据偏移可以映射：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0xC</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x4124F0</span> -&gt; <span class=\"built_in\">sub_402500</span></span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x18</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x4124FC</span> -&gt; <span class=\"built_in\">sub_4026E0</span></span><br><span class=\"line\">(*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x28</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x41250C</span> -&gt; sub_402A00</span><br></pre></td></tr></table></figure></p>\n<p>映射：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL __thiscall <span class=\"title function_\">sub_4024B0</span><span class=\"params\">(_DWORD *this, <span class=\"type\">int</span> flag)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  BOOL result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  this[<span class=\"number\">2</span>] = flag;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( sub_402500() )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sub_4026E0();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( sub_402A00() )</span><br><span class=\"line\">      result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以 demo 中用 struct 和 class 的结果相同</strong></p>\n<h2 id=\"reverse中虚函数虚表浅析-3\"><a class=\"anchor\" href=\"#reverse中虚函数虚表浅析-3\">#</a> Reverse 中虚函数 / 虚表浅析</h2>\n<h3 id=\"this指针-3\"><a class=\"anchor\" href=\"#this指针-3\">#</a> this 指针</h3>\n<p>在 C++ 的类中，需要研究一个非常重要并且特殊的指针就是 this 指针：</p>\n<p>一个简单的 demo 来测试一下 this 指针：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test</span>&#123;</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tTest* test = new Test;</span><br><span class=\"line\">\ttest-&gt;a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，直接取 test 的值就是 a 的值，这里的 test 就是 this 指针本身，而 this 指针的特性就是指向类的首地址，在对类进行内存分配时，this 指针会默认指向该类的首地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-20211231145134480\" /></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以 demo 中用 struct 和 class 的结果相同</strong></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-20211231145838157\" /></p>\n<p>demo2：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func3</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func3&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTest* test = <span class=\"keyword\">new</span> Test;</span><br><span class=\"line\">\ttest-&gt;a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\ttest-&gt;<span class=\"built_in\">func1</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名：：方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为 <code>func1</code> 、 <code>func2</code> 、 <code>func3</code> ，我们注意到这里 call 的函数内容来自 <code>[edx]</code> 、 <code>[edx+4]</code> 、 <code>[edx+8]</code></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-20211231151743342\" /></p>\n<p>VS 的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类 or 结构体中，如果其虚函数的数量大于 1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-20211231152320103\" /></p>\n<p>但是在 VS 中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-20211231152713891\" /></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-20211231152733713\" /></p>\n<h3 id=\"ida加载该程序-2\"><a class=\"anchor\" href=\"#ida加载该程序-2\">#</a> IDA 加载该程序</h3>\n<p>直接来到 main 函数：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main_0</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _DWORD *v4; <span class=\"comment\">// [esp+Ch] [ebp-DCh]</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *v5; <span class=\"comment\">// [esp+14h] [ebp-D4h]</span></span><br><span class=\"line\">  _DWORD *v6; <span class=\"comment\">// [esp+E0h] [ebp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  __CheckForDebuggerJustMyCode(&amp;unk_41C066);</span><br><span class=\"line\">  v5 = operator new(<span class=\"number\">0x10</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v5 )</span><br><span class=\"line\">    v4 = (_DWORD *)sub_411460(v5);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v6 = v4;</span><br><span class=\"line\">  v4[<span class=\"number\">1</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))*v6)(v6);</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">4</span>))(v6);</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">8</span>))(v6);</span><br><span class=\"line\">  sub_411442(<span class=\"string\">&quot;%d&quot;</span>, *v4);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据源码，这一部分就是虚函数调用在 IDA 中的反编译结果：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))*v6)(v6);</span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">4</span>))(v6);</span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">8</span>))(v6);</span><br></pre></td></tr></table></figure></p>\n<p>这里 v6 是指向 v4，来到 v4 的初始化，可以看到存在一个 <code>virtual function table</code>  也就是虚函数表：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">_DWORD *__thiscall <span class=\"title\">sub_411880</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  *<span class=\"keyword\">this</span> = &amp;Test::`vftable<span class=\"number\">&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据前面 VS 中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-20211231160032664\" /></p>\n<p>基本上关于虚函数在 IDA 中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-2\"><a class=\"anchor\" href=\"#一道逆向题-2\">#</a> 一道逆向题</h3>\n<p>SWPUCTF2019 easyRE，同样来到 main 函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> __cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  _DWORD v4[<span class=\"number\">28</span>]; <span class=\"comment\">// [esp-6Ch] [ebp-F8h] BYREF</span></span><br><span class=\"line\">  _DWORD *v5; <span class=\"comment\">// [esp+4h] [ebp-88h]</span></span><br><span class=\"line\">  _DWORD *v6; <span class=\"comment\">// [esp+8h] [ebp-84h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v7; <span class=\"comment\">// [esp+Ch] [ebp-80h]</span></span><br><span class=\"line\">  <span class=\"type\">char</span> v8[<span class=\"number\">108</span>]; <span class=\"comment\">// [esp+10h] [ebp-7Ch] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v9; <span class=\"comment\">// [esp+88h] [ebp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"built_in\">sub_40EF90</span>() )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sub_4026C0</span>(<span class=\"number\">0x6C</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">sub_401FE0</span>(v4[<span class=\"number\">27</span>], v5);</span><br><span class=\"line\">  v9 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v6 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F360</span>(v8);</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F080</span>(v4[<span class=\"number\">0</span>], v4[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  v5 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F360</span>(v8);</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F150</span>(argc, (<span class=\"type\">int</span>)argv);</span><br><span class=\"line\">  v7 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v9 = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sub_4021C0</span>(v8);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v7;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>进入 sub_401FE0:</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">_DWORD *__thiscall <span class=\"title\">sub_401FE0</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> i; <span class=\"comment\">// [esp+4h] [ebp-14h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  *<span class=\"keyword\">this</span> = &amp;EASYRE::`vftable<span class=\"number\">&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">52</span>) = <span class=\"number\">8</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">53</span>) = <span class=\"number\">-22</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">54</span>) = <span class=\"number\">88</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">55</span>) = <span class=\"number\">-34</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">56</span>) = <span class=\"number\">-108</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">57</span>) = <span class=\"number\">-48</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">58</span>) = <span class=\"number\">59</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">59</span>) = <span class=\"number\">-66</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">60</span>) = <span class=\"number\">-120</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">61</span>) = <span class=\"number\">-44</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">62</span>) = <span class=\"number\">50</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">63</span>) = <span class=\"number\">-74</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">64</span>) = <span class=\"number\">20</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">65</span>) = <span class=\"number\">-126</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">66</span>) = <span class=\"number\">-73</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">67</span>) = <span class=\"number\">-81</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">68</span>) = <span class=\"number\">20</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">69</span>) = <span class=\"number\">84</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">70</span>) = <span class=\"number\">127</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">71</span>) = <span class=\"number\">-49</span>;</span><br><span class=\"line\">  <span class=\"built_in\">qmemcpy</span>(<span class=\"keyword\">this</span> + <span class=\"number\">18</span>, <span class=\"string\">&quot;  03\\&quot;3   0 203\\&quot;   $ &quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">sub_4030A0</span>(<span class=\"keyword\">this</span> + <span class=\"number\">23</span>);</span><br><span class=\"line\">  <span class=\"built_in\">sub_402DE0</span>(<span class=\"keyword\">this</span> + <span class=\"number\">26</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">40</span>; ++i )</span><br><span class=\"line\">    *((_BYTE *)<span class=\"keyword\">this</span> + i + <span class=\"number\">12</span>) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-20211231160559928\" /></p>\n<p>来到校验 flag 的函数，可以发现存在虚函数的特征：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL __thiscall <span class=\"title\">sub_4024B0</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>, <span class=\"type\">int</span> flag)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  BOOL result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>[<span class=\"number\">2</span>] = flag;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0xC</span>))(<span class=\"keyword\">this</span>) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    (*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x18</span>))(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( (*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x28</span>))(<span class=\"keyword\">this</span>) )</span><br><span class=\"line\">      result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里 this 指针指向的首地址是 <code>0x4124E4</code> ，根据偏移可以映射：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0xC</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x4124F0</span> -&gt; <span class=\"built_in\">sub_402500</span></span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x18</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x4124FC</span> -&gt; <span class=\"built_in\">sub_4026E0</span></span><br><span class=\"line\">(*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x28</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x41250C</span> -&gt; sub_402A00</span><br></pre></td></tr></table></figure></p>\n<p>映射：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL __thiscall <span class=\"title function_\">sub_4024B0</span><span class=\"params\">(_DWORD *this, <span class=\"type\">int</span> flag)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  BOOL result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  this[<span class=\"number\">2</span>] = flag;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( sub_402500() )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sub_4026E0();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( sub_402A00() )</span><br><span class=\"line\">      result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>demo2：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func3</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func3&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTest* test = <span class=\"keyword\">new</span> Test;</span><br><span class=\"line\">\ttest-&gt;a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\ttest-&gt;<span class=\"built_in\">func1</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名：：方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为 <code>func1</code> 、 <code>func2</code> 、 <code>func3</code> ，我们注意到这里 call 的函数内容来自 <code>[edx]</code> 、 <code>[edx+4]</code> 、 <code>[edx+8]</code></p>\n<h2 id=\"reverse中虚函数虚表浅析-4\"><a class=\"anchor\" href=\"#reverse中虚函数虚表浅析-4\">#</a> Reverse 中虚函数 / 虚表浅析</h2>\n<h3 id=\"this指针-4\"><a class=\"anchor\" href=\"#this指针-4\">#</a> this 指针</h3>\n<p>在 C++ 的类中，需要研究一个非常重要并且特殊的指针就是 this 指针：</p>\n<p>一个简单的 demo 来测试一下 this 指针：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test</span>&#123;</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tTest* test = new Test;</span><br><span class=\"line\">\ttest-&gt;a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，直接取 test 的值就是 a 的值，这里的 test 就是 this 指针本身，而 this 指针的特性就是指向类的首地址，在对类进行内存分配时，this 指针会默认指向该类的首地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-20211231145134480\" /></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以 demo 中用 struct 和 class 的结果相同</strong></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-20211231145838157\" /></p>\n<p>demo2：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func3</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func3&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTest* test = <span class=\"keyword\">new</span> Test;</span><br><span class=\"line\">\ttest-&gt;a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\ttest-&gt;<span class=\"built_in\">func1</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名：：方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为 <code>func1</code> 、 <code>func2</code> 、 <code>func3</code> ，我们注意到这里 call 的函数内容来自 <code>[edx]</code> 、 <code>[edx+4]</code> 、 <code>[edx+8]</code></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-20211231151743342\" /></p>\n<p>VS 的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类 or 结构体中，如果其虚函数的数量大于 1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-20211231152320103\" /></p>\n<p>但是在 VS 中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-20211231152713891\" /></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-20211231152733713\" /></p>\n<h3 id=\"ida加载该程序-3\"><a class=\"anchor\" href=\"#ida加载该程序-3\">#</a> IDA 加载该程序</h3>\n<p>直接来到 main 函数：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main_0</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _DWORD *v4; <span class=\"comment\">// [esp+Ch] [ebp-DCh]</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *v5; <span class=\"comment\">// [esp+14h] [ebp-D4h]</span></span><br><span class=\"line\">  _DWORD *v6; <span class=\"comment\">// [esp+E0h] [ebp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  __CheckForDebuggerJustMyCode(&amp;unk_41C066);</span><br><span class=\"line\">  v5 = operator new(<span class=\"number\">0x10</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v5 )</span><br><span class=\"line\">    v4 = (_DWORD *)sub_411460(v5);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v6 = v4;</span><br><span class=\"line\">  v4[<span class=\"number\">1</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))*v6)(v6);</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">4</span>))(v6);</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">8</span>))(v6);</span><br><span class=\"line\">  sub_411442(<span class=\"string\">&quot;%d&quot;</span>, *v4);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据源码，这一部分就是虚函数调用在 IDA 中的反编译结果：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))*v6)(v6);</span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">4</span>))(v6);</span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">8</span>))(v6);</span><br></pre></td></tr></table></figure></p>\n<p>这里 v6 是指向 v4，来到 v4 的初始化，可以看到存在一个 <code>virtual function table</code>  也就是虚函数表：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">_DWORD *__thiscall <span class=\"title\">sub_411880</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  *<span class=\"keyword\">this</span> = &amp;Test::`vftable<span class=\"number\">&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据前面 VS 中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-20211231160032664\" /></p>\n<p>基本上关于虚函数在 IDA 中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-3\"><a class=\"anchor\" href=\"#一道逆向题-3\">#</a> 一道逆向题</h3>\n<p>SWPUCTF2019 easyRE，同样来到 main 函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> __cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  _DWORD v4[<span class=\"number\">28</span>]; <span class=\"comment\">// [esp-6Ch] [ebp-F8h] BYREF</span></span><br><span class=\"line\">  _DWORD *v5; <span class=\"comment\">// [esp+4h] [ebp-88h]</span></span><br><span class=\"line\">  _DWORD *v6; <span class=\"comment\">// [esp+8h] [ebp-84h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v7; <span class=\"comment\">// [esp+Ch] [ebp-80h]</span></span><br><span class=\"line\">  <span class=\"type\">char</span> v8[<span class=\"number\">108</span>]; <span class=\"comment\">// [esp+10h] [ebp-7Ch] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v9; <span class=\"comment\">// [esp+88h] [ebp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"built_in\">sub_40EF90</span>() )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sub_4026C0</span>(<span class=\"number\">0x6C</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">sub_401FE0</span>(v4[<span class=\"number\">27</span>], v5);</span><br><span class=\"line\">  v9 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v6 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F360</span>(v8);</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F080</span>(v4[<span class=\"number\">0</span>], v4[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  v5 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F360</span>(v8);</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F150</span>(argc, (<span class=\"type\">int</span>)argv);</span><br><span class=\"line\">  v7 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v9 = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sub_4021C0</span>(v8);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v7;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>进入 sub_401FE0:</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">_DWORD *__thiscall <span class=\"title\">sub_401FE0</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> i; <span class=\"comment\">// [esp+4h] [ebp-14h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  *<span class=\"keyword\">this</span> = &amp;EASYRE::`vftable<span class=\"number\">&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">52</span>) = <span class=\"number\">8</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">53</span>) = <span class=\"number\">-22</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">54</span>) = <span class=\"number\">88</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">55</span>) = <span class=\"number\">-34</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">56</span>) = <span class=\"number\">-108</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">57</span>) = <span class=\"number\">-48</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">58</span>) = <span class=\"number\">59</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">59</span>) = <span class=\"number\">-66</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">60</span>) = <span class=\"number\">-120</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">61</span>) = <span class=\"number\">-44</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">62</span>) = <span class=\"number\">50</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">63</span>) = <span class=\"number\">-74</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">64</span>) = <span class=\"number\">20</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">65</span>) = <span class=\"number\">-126</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">66</span>) = <span class=\"number\">-73</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">67</span>) = <span class=\"number\">-81</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">68</span>) = <span class=\"number\">20</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">69</span>) = <span class=\"number\">84</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">70</span>) = <span class=\"number\">127</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">71</span>) = <span class=\"number\">-49</span>;</span><br><span class=\"line\">  <span class=\"built_in\">qmemcpy</span>(<span class=\"keyword\">this</span> + <span class=\"number\">18</span>, <span class=\"string\">&quot;  03\\&quot;3   0 203\\&quot;   $ &quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">sub_4030A0</span>(<span class=\"keyword\">this</span> + <span class=\"number\">23</span>);</span><br><span class=\"line\">  <span class=\"built_in\">sub_402DE0</span>(<span class=\"keyword\">this</span> + <span class=\"number\">26</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">40</span>; ++i )</span><br><span class=\"line\">    *((_BYTE *)<span class=\"keyword\">this</span> + i + <span class=\"number\">12</span>) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-20211231160559928\" /></p>\n<p>来到校验 flag 的函数，可以发现存在虚函数的特征：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL __thiscall <span class=\"title\">sub_4024B0</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>, <span class=\"type\">int</span> flag)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  BOOL result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>[<span class=\"number\">2</span>] = flag;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0xC</span>))(<span class=\"keyword\">this</span>) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    (*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x18</span>))(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( (*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x28</span>))(<span class=\"keyword\">this</span>) )</span><br><span class=\"line\">      result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里 this 指针指向的首地址是 <code>0x4124E4</code> ，根据偏移可以映射：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0xC</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x4124F0</span> -&gt; <span class=\"built_in\">sub_402500</span></span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x18</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x4124FC</span> -&gt; <span class=\"built_in\">sub_4026E0</span></span><br><span class=\"line\">(*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x28</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x41250C</span> -&gt; sub_402A00</span><br></pre></td></tr></table></figure></p>\n<p>映射：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL __thiscall <span class=\"title function_\">sub_4024B0</span><span class=\"params\">(_DWORD *this, <span class=\"type\">int</span> flag)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  BOOL result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  this[<span class=\"number\">2</span>] = flag;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( sub_402500() )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sub_4026E0();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( sub_402A00() )</span><br><span class=\"line\">      result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>VS 的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类 or 结构体中，如果其虚函数的数量大于 1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<h2 id=\"reverse中虚函数虚表浅析-5\"><a class=\"anchor\" href=\"#reverse中虚函数虚表浅析-5\">#</a> Reverse 中虚函数 / 虚表浅析</h2>\n<h3 id=\"this指针-5\"><a class=\"anchor\" href=\"#this指针-5\">#</a> this 指针</h3>\n<p>在 C++ 的类中，需要研究一个非常重要并且特殊的指针就是 this 指针：</p>\n<p>一个简单的 demo 来测试一下 this 指针：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test</span>&#123;</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tTest* test = new Test;</span><br><span class=\"line\">\ttest-&gt;a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，直接取 test 的值就是 a 的值，这里的 test 就是 this 指针本身，而 this 指针的特性就是指向类的首地址，在对类进行内存分配时，this 指针会默认指向该类的首地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-20211231145134480\" /></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以 demo 中用 struct 和 class 的结果相同</strong></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-20211231145838157\" /></p>\n<p>demo2：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func3</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func3&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTest* test = <span class=\"keyword\">new</span> Test;</span><br><span class=\"line\">\ttest-&gt;a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\ttest-&gt;<span class=\"built_in\">func1</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名：：方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为 <code>func1</code> 、 <code>func2</code> 、 <code>func3</code> ，我们注意到这里 call 的函数内容来自 <code>[edx]</code> 、 <code>[edx+4]</code> 、 <code>[edx+8]</code></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-20211231151743342\" /></p>\n<p>VS 的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类 or 结构体中，如果其虚函数的数量大于 1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-20211231152320103\" /></p>\n<p>但是在 VS 中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-20211231152713891\" /></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-20211231152733713\" /></p>\n<h3 id=\"ida加载该程序-4\"><a class=\"anchor\" href=\"#ida加载该程序-4\">#</a> IDA 加载该程序</h3>\n<p>直接来到 main 函数：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main_0</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _DWORD *v4; <span class=\"comment\">// [esp+Ch] [ebp-DCh]</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *v5; <span class=\"comment\">// [esp+14h] [ebp-D4h]</span></span><br><span class=\"line\">  _DWORD *v6; <span class=\"comment\">// [esp+E0h] [ebp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  __CheckForDebuggerJustMyCode(&amp;unk_41C066);</span><br><span class=\"line\">  v5 = operator new(<span class=\"number\">0x10</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v5 )</span><br><span class=\"line\">    v4 = (_DWORD *)sub_411460(v5);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v6 = v4;</span><br><span class=\"line\">  v4[<span class=\"number\">1</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))*v6)(v6);</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">4</span>))(v6);</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">8</span>))(v6);</span><br><span class=\"line\">  sub_411442(<span class=\"string\">&quot;%d&quot;</span>, *v4);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据源码，这一部分就是虚函数调用在 IDA 中的反编译结果：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))*v6)(v6);</span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">4</span>))(v6);</span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">8</span>))(v6);</span><br></pre></td></tr></table></figure></p>\n<p>这里 v6 是指向 v4，来到 v4 的初始化，可以看到存在一个 <code>virtual function table</code>  也就是虚函数表：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">_DWORD *__thiscall <span class=\"title\">sub_411880</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  *<span class=\"keyword\">this</span> = &amp;Test::`vftable<span class=\"number\">&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据前面 VS 中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-20211231160032664\" /></p>\n<p>基本上关于虚函数在 IDA 中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-4\"><a class=\"anchor\" href=\"#一道逆向题-4\">#</a> 一道逆向题</h3>\n<p>SWPUCTF2019 easyRE，同样来到 main 函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> __cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  _DWORD v4[<span class=\"number\">28</span>]; <span class=\"comment\">// [esp-6Ch] [ebp-F8h] BYREF</span></span><br><span class=\"line\">  _DWORD *v5; <span class=\"comment\">// [esp+4h] [ebp-88h]</span></span><br><span class=\"line\">  _DWORD *v6; <span class=\"comment\">// [esp+8h] [ebp-84h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v7; <span class=\"comment\">// [esp+Ch] [ebp-80h]</span></span><br><span class=\"line\">  <span class=\"type\">char</span> v8[<span class=\"number\">108</span>]; <span class=\"comment\">// [esp+10h] [ebp-7Ch] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v9; <span class=\"comment\">// [esp+88h] [ebp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"built_in\">sub_40EF90</span>() )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sub_4026C0</span>(<span class=\"number\">0x6C</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">sub_401FE0</span>(v4[<span class=\"number\">27</span>], v5);</span><br><span class=\"line\">  v9 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v6 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F360</span>(v8);</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F080</span>(v4[<span class=\"number\">0</span>], v4[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  v5 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F360</span>(v8);</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F150</span>(argc, (<span class=\"type\">int</span>)argv);</span><br><span class=\"line\">  v7 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v9 = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sub_4021C0</span>(v8);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v7;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>进入 sub_401FE0:</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">_DWORD *__thiscall <span class=\"title\">sub_401FE0</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> i; <span class=\"comment\">// [esp+4h] [ebp-14h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  *<span class=\"keyword\">this</span> = &amp;EASYRE::`vftable<span class=\"number\">&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">52</span>) = <span class=\"number\">8</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">53</span>) = <span class=\"number\">-22</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">54</span>) = <span class=\"number\">88</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">55</span>) = <span class=\"number\">-34</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">56</span>) = <span class=\"number\">-108</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">57</span>) = <span class=\"number\">-48</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">58</span>) = <span class=\"number\">59</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">59</span>) = <span class=\"number\">-66</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">60</span>) = <span class=\"number\">-120</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">61</span>) = <span class=\"number\">-44</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">62</span>) = <span class=\"number\">50</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">63</span>) = <span class=\"number\">-74</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">64</span>) = <span class=\"number\">20</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">65</span>) = <span class=\"number\">-126</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">66</span>) = <span class=\"number\">-73</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">67</span>) = <span class=\"number\">-81</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">68</span>) = <span class=\"number\">20</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">69</span>) = <span class=\"number\">84</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">70</span>) = <span class=\"number\">127</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">71</span>) = <span class=\"number\">-49</span>;</span><br><span class=\"line\">  <span class=\"built_in\">qmemcpy</span>(<span class=\"keyword\">this</span> + <span class=\"number\">18</span>, <span class=\"string\">&quot;  03\\&quot;3   0 203\\&quot;   $ &quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">sub_4030A0</span>(<span class=\"keyword\">this</span> + <span class=\"number\">23</span>);</span><br><span class=\"line\">  <span class=\"built_in\">sub_402DE0</span>(<span class=\"keyword\">this</span> + <span class=\"number\">26</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">40</span>; ++i )</span><br><span class=\"line\">    *((_BYTE *)<span class=\"keyword\">this</span> + i + <span class=\"number\">12</span>) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-20211231160559928\" /></p>\n<p>来到校验 flag 的函数，可以发现存在虚函数的特征：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL __thiscall <span class=\"title\">sub_4024B0</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>, <span class=\"type\">int</span> flag)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  BOOL result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>[<span class=\"number\">2</span>] = flag;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0xC</span>))(<span class=\"keyword\">this</span>) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    (*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x18</span>))(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( (*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x28</span>))(<span class=\"keyword\">this</span>) )</span><br><span class=\"line\">      result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里 this 指针指向的首地址是 <code>0x4124E4</code> ，根据偏移可以映射：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0xC</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x4124F0</span> -&gt; <span class=\"built_in\">sub_402500</span></span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x18</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x4124FC</span> -&gt; <span class=\"built_in\">sub_4026E0</span></span><br><span class=\"line\">(*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x28</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x41250C</span> -&gt; sub_402A00</span><br></pre></td></tr></table></figure></p>\n<p>映射：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL __thiscall <span class=\"title function_\">sub_4024B0</span><span class=\"params\">(_DWORD *this, <span class=\"type\">int</span> flag)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  BOOL result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  this[<span class=\"number\">2</span>] = flag;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( sub_402500() )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sub_4026E0();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( sub_402A00() )</span><br><span class=\"line\">      result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是在 VS 中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<h2 id=\"reverse中虚函数虚表浅析-6\"><a class=\"anchor\" href=\"#reverse中虚函数虚表浅析-6\">#</a> Reverse 中虚函数 / 虚表浅析</h2>\n<h3 id=\"this指针-6\"><a class=\"anchor\" href=\"#this指针-6\">#</a> this 指针</h3>\n<p>在 C++ 的类中，需要研究一个非常重要并且特殊的指针就是 this 指针：</p>\n<p>一个简单的 demo 来测试一下 this 指针：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test</span>&#123;</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tTest* test = new Test;</span><br><span class=\"line\">\ttest-&gt;a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，直接取 test 的值就是 a 的值，这里的 test 就是 this 指针本身，而 this 指针的特性就是指向类的首地址，在对类进行内存分配时，this 指针会默认指向该类的首地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-20211231145134480\" /></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以 demo 中用 struct 和 class 的结果相同</strong></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-20211231145838157\" /></p>\n<p>demo2：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func3</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func3&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTest* test = <span class=\"keyword\">new</span> Test;</span><br><span class=\"line\">\ttest-&gt;a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\ttest-&gt;<span class=\"built_in\">func1</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名：：方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为 <code>func1</code> 、 <code>func2</code> 、 <code>func3</code> ，我们注意到这里 call 的函数内容来自 <code>[edx]</code> 、 <code>[edx+4]</code> 、 <code>[edx+8]</code></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-20211231151743342\" /></p>\n<p>VS 的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类 or 结构体中，如果其虚函数的数量大于 1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-20211231152320103\" /></p>\n<p>但是在 VS 中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-20211231152713891\" /></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-20211231152733713\" /></p>\n<h3 id=\"ida加载该程序-5\"><a class=\"anchor\" href=\"#ida加载该程序-5\">#</a> IDA 加载该程序</h3>\n<p>直接来到 main 函数：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main_0</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _DWORD *v4; <span class=\"comment\">// [esp+Ch] [ebp-DCh]</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *v5; <span class=\"comment\">// [esp+14h] [ebp-D4h]</span></span><br><span class=\"line\">  _DWORD *v6; <span class=\"comment\">// [esp+E0h] [ebp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  __CheckForDebuggerJustMyCode(&amp;unk_41C066);</span><br><span class=\"line\">  v5 = operator new(<span class=\"number\">0x10</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v5 )</span><br><span class=\"line\">    v4 = (_DWORD *)sub_411460(v5);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v6 = v4;</span><br><span class=\"line\">  v4[<span class=\"number\">1</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))*v6)(v6);</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">4</span>))(v6);</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">8</span>))(v6);</span><br><span class=\"line\">  sub_411442(<span class=\"string\">&quot;%d&quot;</span>, *v4);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据源码，这一部分就是虚函数调用在 IDA 中的反编译结果：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))*v6)(v6);</span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">4</span>))(v6);</span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">8</span>))(v6);</span><br></pre></td></tr></table></figure></p>\n<p>这里 v6 是指向 v4，来到 v4 的初始化，可以看到存在一个 <code>virtual function table</code>  也就是虚函数表：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">_DWORD *__thiscall <span class=\"title\">sub_411880</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  *<span class=\"keyword\">this</span> = &amp;Test::`vftable<span class=\"number\">&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据前面 VS 中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-20211231160032664\" /></p>\n<p>基本上关于虚函数在 IDA 中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-5\"><a class=\"anchor\" href=\"#一道逆向题-5\">#</a> 一道逆向题</h3>\n<p>SWPUCTF2019 easyRE，同样来到 main 函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> __cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  _DWORD v4[<span class=\"number\">28</span>]; <span class=\"comment\">// [esp-6Ch] [ebp-F8h] BYREF</span></span><br><span class=\"line\">  _DWORD *v5; <span class=\"comment\">// [esp+4h] [ebp-88h]</span></span><br><span class=\"line\">  _DWORD *v6; <span class=\"comment\">// [esp+8h] [ebp-84h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v7; <span class=\"comment\">// [esp+Ch] [ebp-80h]</span></span><br><span class=\"line\">  <span class=\"type\">char</span> v8[<span class=\"number\">108</span>]; <span class=\"comment\">// [esp+10h] [ebp-7Ch] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v9; <span class=\"comment\">// [esp+88h] [ebp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"built_in\">sub_40EF90</span>() )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sub_4026C0</span>(<span class=\"number\">0x6C</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">sub_401FE0</span>(v4[<span class=\"number\">27</span>], v5);</span><br><span class=\"line\">  v9 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v6 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F360</span>(v8);</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F080</span>(v4[<span class=\"number\">0</span>], v4[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  v5 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F360</span>(v8);</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F150</span>(argc, (<span class=\"type\">int</span>)argv);</span><br><span class=\"line\">  v7 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v9 = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sub_4021C0</span>(v8);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v7;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>进入 sub_401FE0:</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">_DWORD *__thiscall <span class=\"title\">sub_401FE0</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> i; <span class=\"comment\">// [esp+4h] [ebp-14h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  *<span class=\"keyword\">this</span> = &amp;EASYRE::`vftable<span class=\"number\">&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">52</span>) = <span class=\"number\">8</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">53</span>) = <span class=\"number\">-22</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">54</span>) = <span class=\"number\">88</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">55</span>) = <span class=\"number\">-34</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">56</span>) = <span class=\"number\">-108</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">57</span>) = <span class=\"number\">-48</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">58</span>) = <span class=\"number\">59</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">59</span>) = <span class=\"number\">-66</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">60</span>) = <span class=\"number\">-120</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">61</span>) = <span class=\"number\">-44</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">62</span>) = <span class=\"number\">50</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">63</span>) = <span class=\"number\">-74</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">64</span>) = <span class=\"number\">20</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">65</span>) = <span class=\"number\">-126</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">66</span>) = <span class=\"number\">-73</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">67</span>) = <span class=\"number\">-81</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">68</span>) = <span class=\"number\">20</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">69</span>) = <span class=\"number\">84</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">70</span>) = <span class=\"number\">127</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">71</span>) = <span class=\"number\">-49</span>;</span><br><span class=\"line\">  <span class=\"built_in\">qmemcpy</span>(<span class=\"keyword\">this</span> + <span class=\"number\">18</span>, <span class=\"string\">&quot;  03\\&quot;3   0 203\\&quot;   $ &quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">sub_4030A0</span>(<span class=\"keyword\">this</span> + <span class=\"number\">23</span>);</span><br><span class=\"line\">  <span class=\"built_in\">sub_402DE0</span>(<span class=\"keyword\">this</span> + <span class=\"number\">26</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">40</span>; ++i )</span><br><span class=\"line\">    *((_BYTE *)<span class=\"keyword\">this</span> + i + <span class=\"number\">12</span>) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-20211231160559928\" /></p>\n<p>来到校验 flag 的函数，可以发现存在虚函数的特征：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL __thiscall <span class=\"title\">sub_4024B0</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>, <span class=\"type\">int</span> flag)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  BOOL result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>[<span class=\"number\">2</span>] = flag;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0xC</span>))(<span class=\"keyword\">this</span>) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    (*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x18</span>))(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( (*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x28</span>))(<span class=\"keyword\">this</span>) )</span><br><span class=\"line\">      result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里 this 指针指向的首地址是 <code>0x4124E4</code> ，根据偏移可以映射：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0xC</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x4124F0</span> -&gt; <span class=\"built_in\">sub_402500</span></span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x18</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x4124FC</span> -&gt; <span class=\"built_in\">sub_4026E0</span></span><br><span class=\"line\">(*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x28</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x41250C</span> -&gt; sub_402A00</span><br></pre></td></tr></table></figure></p>\n<p>映射：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL __thiscall <span class=\"title function_\">sub_4024B0</span><span class=\"params\">(_DWORD *this, <span class=\"type\">int</span> flag)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  BOOL result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  this[<span class=\"number\">2</span>] = flag;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( sub_402500() )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sub_4026E0();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( sub_402A00() )</span><br><span class=\"line\">      result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"reverse中虚函数虚表浅析-7\"><a class=\"anchor\" href=\"#reverse中虚函数虚表浅析-7\">#</a> Reverse 中虚函数 / 虚表浅析</h2>\n<h3 id=\"this指针-7\"><a class=\"anchor\" href=\"#this指针-7\">#</a> this 指针</h3>\n<p>在 C++ 的类中，需要研究一个非常重要并且特殊的指针就是 this 指针：</p>\n<p>一个简单的 demo 来测试一下 this 指针：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test</span>&#123;</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tTest* test = new Test;</span><br><span class=\"line\">\ttest-&gt;a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，直接取 test 的值就是 a 的值，这里的 test 就是 this 指针本身，而 this 指针的特性就是指向类的首地址，在对类进行内存分配时，this 指针会默认指向该类的首地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-20211231145134480\" /></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以 demo 中用 struct 和 class 的结果相同</strong></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-20211231145838157\" /></p>\n<p>demo2：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func3</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func3&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTest* test = <span class=\"keyword\">new</span> Test;</span><br><span class=\"line\">\ttest-&gt;a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\ttest-&gt;<span class=\"built_in\">func1</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名：：方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为 <code>func1</code> 、 <code>func2</code> 、 <code>func3</code> ，我们注意到这里 call 的函数内容来自 <code>[edx]</code> 、 <code>[edx+4]</code> 、 <code>[edx+8]</code></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-20211231151743342\" /></p>\n<p>VS 的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类 or 结构体中，如果其虚函数的数量大于 1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-20211231152320103\" /></p>\n<p>但是在 VS 中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-20211231152713891\" /></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-20211231152733713\" /></p>\n<h3 id=\"ida加载该程序-6\"><a class=\"anchor\" href=\"#ida加载该程序-6\">#</a> IDA 加载该程序</h3>\n<p>直接来到 main 函数：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main_0</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _DWORD *v4; <span class=\"comment\">// [esp+Ch] [ebp-DCh]</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *v5; <span class=\"comment\">// [esp+14h] [ebp-D4h]</span></span><br><span class=\"line\">  _DWORD *v6; <span class=\"comment\">// [esp+E0h] [ebp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  __CheckForDebuggerJustMyCode(&amp;unk_41C066);</span><br><span class=\"line\">  v5 = operator new(<span class=\"number\">0x10</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v5 )</span><br><span class=\"line\">    v4 = (_DWORD *)sub_411460(v5);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v6 = v4;</span><br><span class=\"line\">  v4[<span class=\"number\">1</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))*v6)(v6);</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">4</span>))(v6);</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">8</span>))(v6);</span><br><span class=\"line\">  sub_411442(<span class=\"string\">&quot;%d&quot;</span>, *v4);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据源码，这一部分就是虚函数调用在 IDA 中的反编译结果：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))*v6)(v6);</span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">4</span>))(v6);</span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">8</span>))(v6);</span><br></pre></td></tr></table></figure></p>\n<p>这里 v6 是指向 v4，来到 v4 的初始化，可以看到存在一个 <code>virtual function table</code>  也就是虚函数表：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">_DWORD *__thiscall <span class=\"title\">sub_411880</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  *<span class=\"keyword\">this</span> = &amp;Test::`vftable<span class=\"number\">&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据前面 VS 中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-20211231160032664\" /></p>\n<p>基本上关于虚函数在 IDA 中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-6\"><a class=\"anchor\" href=\"#一道逆向题-6\">#</a> 一道逆向题</h3>\n<p>SWPUCTF2019 easyRE，同样来到 main 函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> __cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  _DWORD v4[<span class=\"number\">28</span>]; <span class=\"comment\">// [esp-6Ch] [ebp-F8h] BYREF</span></span><br><span class=\"line\">  _DWORD *v5; <span class=\"comment\">// [esp+4h] [ebp-88h]</span></span><br><span class=\"line\">  _DWORD *v6; <span class=\"comment\">// [esp+8h] [ebp-84h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v7; <span class=\"comment\">// [esp+Ch] [ebp-80h]</span></span><br><span class=\"line\">  <span class=\"type\">char</span> v8[<span class=\"number\">108</span>]; <span class=\"comment\">// [esp+10h] [ebp-7Ch] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v9; <span class=\"comment\">// [esp+88h] [ebp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"built_in\">sub_40EF90</span>() )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sub_4026C0</span>(<span class=\"number\">0x6C</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">sub_401FE0</span>(v4[<span class=\"number\">27</span>], v5);</span><br><span class=\"line\">  v9 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v6 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F360</span>(v8);</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F080</span>(v4[<span class=\"number\">0</span>], v4[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  v5 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F360</span>(v8);</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F150</span>(argc, (<span class=\"type\">int</span>)argv);</span><br><span class=\"line\">  v7 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v9 = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sub_4021C0</span>(v8);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v7;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>进入 sub_401FE0:</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">_DWORD *__thiscall <span class=\"title\">sub_401FE0</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> i; <span class=\"comment\">// [esp+4h] [ebp-14h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  *<span class=\"keyword\">this</span> = &amp;EASYRE::`vftable<span class=\"number\">&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">52</span>) = <span class=\"number\">8</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">53</span>) = <span class=\"number\">-22</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">54</span>) = <span class=\"number\">88</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">55</span>) = <span class=\"number\">-34</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">56</span>) = <span class=\"number\">-108</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">57</span>) = <span class=\"number\">-48</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">58</span>) = <span class=\"number\">59</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">59</span>) = <span class=\"number\">-66</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">60</span>) = <span class=\"number\">-120</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">61</span>) = <span class=\"number\">-44</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">62</span>) = <span class=\"number\">50</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">63</span>) = <span class=\"number\">-74</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">64</span>) = <span class=\"number\">20</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">65</span>) = <span class=\"number\">-126</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">66</span>) = <span class=\"number\">-73</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">67</span>) = <span class=\"number\">-81</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">68</span>) = <span class=\"number\">20</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">69</span>) = <span class=\"number\">84</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">70</span>) = <span class=\"number\">127</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">71</span>) = <span class=\"number\">-49</span>;</span><br><span class=\"line\">  <span class=\"built_in\">qmemcpy</span>(<span class=\"keyword\">this</span> + <span class=\"number\">18</span>, <span class=\"string\">&quot;  03\\&quot;3   0 203\\&quot;   $ &quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">sub_4030A0</span>(<span class=\"keyword\">this</span> + <span class=\"number\">23</span>);</span><br><span class=\"line\">  <span class=\"built_in\">sub_402DE0</span>(<span class=\"keyword\">this</span> + <span class=\"number\">26</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">40</span>; ++i )</span><br><span class=\"line\">    *((_BYTE *)<span class=\"keyword\">this</span> + i + <span class=\"number\">12</span>) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-20211231160559928\" /></p>\n<p>来到校验 flag 的函数，可以发现存在虚函数的特征：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL __thiscall <span class=\"title\">sub_4024B0</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>, <span class=\"type\">int</span> flag)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  BOOL result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>[<span class=\"number\">2</span>] = flag;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0xC</span>))(<span class=\"keyword\">this</span>) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    (*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x18</span>))(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( (*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x28</span>))(<span class=\"keyword\">this</span>) )</span><br><span class=\"line\">      result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里 this 指针指向的首地址是 <code>0x4124E4</code> ，根据偏移可以映射：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0xC</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x4124F0</span> -&gt; <span class=\"built_in\">sub_402500</span></span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x18</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x4124FC</span> -&gt; <span class=\"built_in\">sub_4026E0</span></span><br><span class=\"line\">(*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x28</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x41250C</span> -&gt; sub_402A00</span><br></pre></td></tr></table></figure></p>\n<p>映射：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL __thiscall <span class=\"title function_\">sub_4024B0</span><span class=\"params\">(_DWORD *this, <span class=\"type\">int</span> flag)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  BOOL result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  this[<span class=\"number\">2</span>] = flag;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( sub_402500() )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sub_4026E0();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( sub_402A00() )</span><br><span class=\"line\">      result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ida加载该程序-7\"><a class=\"anchor\" href=\"#ida加载该程序-7\">#</a> IDA 加载该程序</h3>\n<p>直接来到 main 函数：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main_0</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _DWORD *v4; <span class=\"comment\">// [esp+Ch] [ebp-DCh]</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *v5; <span class=\"comment\">// [esp+14h] [ebp-D4h]</span></span><br><span class=\"line\">  _DWORD *v6; <span class=\"comment\">// [esp+E0h] [ebp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  __CheckForDebuggerJustMyCode(&amp;unk_41C066);</span><br><span class=\"line\">  v5 = operator new(<span class=\"number\">0x10</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v5 )</span><br><span class=\"line\">    v4 = (_DWORD *)sub_411460(v5);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v6 = v4;</span><br><span class=\"line\">  v4[<span class=\"number\">1</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))*v6)(v6);</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">4</span>))(v6);</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">8</span>))(v6);</span><br><span class=\"line\">  sub_411442(<span class=\"string\">&quot;%d&quot;</span>, *v4);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据源码，这一部分就是虚函数调用在 IDA 中的反编译结果：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))*v6)(v6);</span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">4</span>))(v6);</span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">8</span>))(v6);</span><br></pre></td></tr></table></figure></p>\n<p>这里 v6 是指向 v4，来到 v4 的初始化，可以看到存在一个 <code>virtual function table</code>  也就是虚函数表：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">_DWORD *__thiscall <span class=\"title\">sub_411880</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  *<span class=\"keyword\">this</span> = &amp;Test::`vftable<span class=\"number\">&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据前面 VS 中的调试可以知道这个表中存放的是增量链接：</p>\n<h2 id=\"reverse中虚函数虚表浅析-8\"><a class=\"anchor\" href=\"#reverse中虚函数虚表浅析-8\">#</a> Reverse 中虚函数 / 虚表浅析</h2>\n<h3 id=\"this指针-8\"><a class=\"anchor\" href=\"#this指针-8\">#</a> this 指针</h3>\n<p>在 C++ 的类中，需要研究一个非常重要并且特殊的指针就是 this 指针：</p>\n<p>一个简单的 demo 来测试一下 this 指针：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test</span>&#123;</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tTest* test = new Test;</span><br><span class=\"line\">\ttest-&gt;a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，直接取 test 的值就是 a 的值，这里的 test 就是 this 指针本身，而 this 指针的特性就是指向类的首地址，在对类进行内存分配时，this 指针会默认指向该类的首地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-20211231145134480\" /></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以 demo 中用 struct 和 class 的结果相同</strong></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-20211231145838157\" /></p>\n<p>demo2：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func3</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func3&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTest* test = <span class=\"keyword\">new</span> Test;</span><br><span class=\"line\">\ttest-&gt;a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\ttest-&gt;<span class=\"built_in\">func1</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名：：方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为 <code>func1</code> 、 <code>func2</code> 、 <code>func3</code> ，我们注意到这里 call 的函数内容来自 <code>[edx]</code> 、 <code>[edx+4]</code> 、 <code>[edx+8]</code></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-20211231151743342\" /></p>\n<p>VS 的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类 or 结构体中，如果其虚函数的数量大于 1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-20211231152320103\" /></p>\n<p>但是在 VS 中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-20211231152713891\" /></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-20211231152733713\" /></p>\n<h3 id=\"ida加载该程序-8\"><a class=\"anchor\" href=\"#ida加载该程序-8\">#</a> IDA 加载该程序</h3>\n<p>直接来到 main 函数：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main_0</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _DWORD *v4; <span class=\"comment\">// [esp+Ch] [ebp-DCh]</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *v5; <span class=\"comment\">// [esp+14h] [ebp-D4h]</span></span><br><span class=\"line\">  _DWORD *v6; <span class=\"comment\">// [esp+E0h] [ebp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  __CheckForDebuggerJustMyCode(&amp;unk_41C066);</span><br><span class=\"line\">  v5 = operator new(<span class=\"number\">0x10</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v5 )</span><br><span class=\"line\">    v4 = (_DWORD *)sub_411460(v5);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v6 = v4;</span><br><span class=\"line\">  v4[<span class=\"number\">1</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))*v6)(v6);</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">4</span>))(v6);</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">8</span>))(v6);</span><br><span class=\"line\">  sub_411442(<span class=\"string\">&quot;%d&quot;</span>, *v4);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据源码，这一部分就是虚函数调用在 IDA 中的反编译结果：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))*v6)(v6);</span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">4</span>))(v6);</span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">8</span>))(v6);</span><br></pre></td></tr></table></figure></p>\n<p>这里 v6 是指向 v4，来到 v4 的初始化，可以看到存在一个 <code>virtual function table</code>  也就是虚函数表：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">_DWORD *__thiscall <span class=\"title\">sub_411880</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  *<span class=\"keyword\">this</span> = &amp;Test::`vftable<span class=\"number\">&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据前面 VS 中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-20211231160032664\" /></p>\n<p>基本上关于虚函数在 IDA 中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-7\"><a class=\"anchor\" href=\"#一道逆向题-7\">#</a> 一道逆向题</h3>\n<p>SWPUCTF2019 easyRE，同样来到 main 函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> __cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  _DWORD v4[<span class=\"number\">28</span>]; <span class=\"comment\">// [esp-6Ch] [ebp-F8h] BYREF</span></span><br><span class=\"line\">  _DWORD *v5; <span class=\"comment\">// [esp+4h] [ebp-88h]</span></span><br><span class=\"line\">  _DWORD *v6; <span class=\"comment\">// [esp+8h] [ebp-84h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v7; <span class=\"comment\">// [esp+Ch] [ebp-80h]</span></span><br><span class=\"line\">  <span class=\"type\">char</span> v8[<span class=\"number\">108</span>]; <span class=\"comment\">// [esp+10h] [ebp-7Ch] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v9; <span class=\"comment\">// [esp+88h] [ebp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"built_in\">sub_40EF90</span>() )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sub_4026C0</span>(<span class=\"number\">0x6C</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">sub_401FE0</span>(v4[<span class=\"number\">27</span>], v5);</span><br><span class=\"line\">  v9 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v6 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F360</span>(v8);</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F080</span>(v4[<span class=\"number\">0</span>], v4[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  v5 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F360</span>(v8);</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F150</span>(argc, (<span class=\"type\">int</span>)argv);</span><br><span class=\"line\">  v7 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v9 = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sub_4021C0</span>(v8);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v7;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>进入 sub_401FE0:</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">_DWORD *__thiscall <span class=\"title\">sub_401FE0</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> i; <span class=\"comment\">// [esp+4h] [ebp-14h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  *<span class=\"keyword\">this</span> = &amp;EASYRE::`vftable<span class=\"number\">&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">52</span>) = <span class=\"number\">8</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">53</span>) = <span class=\"number\">-22</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">54</span>) = <span class=\"number\">88</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">55</span>) = <span class=\"number\">-34</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">56</span>) = <span class=\"number\">-108</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">57</span>) = <span class=\"number\">-48</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">58</span>) = <span class=\"number\">59</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">59</span>) = <span class=\"number\">-66</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">60</span>) = <span class=\"number\">-120</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">61</span>) = <span class=\"number\">-44</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">62</span>) = <span class=\"number\">50</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">63</span>) = <span class=\"number\">-74</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">64</span>) = <span class=\"number\">20</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">65</span>) = <span class=\"number\">-126</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">66</span>) = <span class=\"number\">-73</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">67</span>) = <span class=\"number\">-81</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">68</span>) = <span class=\"number\">20</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">69</span>) = <span class=\"number\">84</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">70</span>) = <span class=\"number\">127</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">71</span>) = <span class=\"number\">-49</span>;</span><br><span class=\"line\">  <span class=\"built_in\">qmemcpy</span>(<span class=\"keyword\">this</span> + <span class=\"number\">18</span>, <span class=\"string\">&quot;  03\\&quot;3   0 203\\&quot;   $ &quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">sub_4030A0</span>(<span class=\"keyword\">this</span> + <span class=\"number\">23</span>);</span><br><span class=\"line\">  <span class=\"built_in\">sub_402DE0</span>(<span class=\"keyword\">this</span> + <span class=\"number\">26</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">40</span>; ++i )</span><br><span class=\"line\">    *((_BYTE *)<span class=\"keyword\">this</span> + i + <span class=\"number\">12</span>) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-20211231160559928\" /></p>\n<p>来到校验 flag 的函数，可以发现存在虚函数的特征：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL __thiscall <span class=\"title\">sub_4024B0</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>, <span class=\"type\">int</span> flag)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  BOOL result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>[<span class=\"number\">2</span>] = flag;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0xC</span>))(<span class=\"keyword\">this</span>) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    (*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x18</span>))(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( (*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x28</span>))(<span class=\"keyword\">this</span>) )</span><br><span class=\"line\">      result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里 this 指针指向的首地址是 <code>0x4124E4</code> ，根据偏移可以映射：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0xC</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x4124F0</span> -&gt; <span class=\"built_in\">sub_402500</span></span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x18</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x4124FC</span> -&gt; <span class=\"built_in\">sub_4026E0</span></span><br><span class=\"line\">(*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x28</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x41250C</span> -&gt; sub_402A00</span><br></pre></td></tr></table></figure></p>\n<p>映射：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL __thiscall <span class=\"title function_\">sub_4024B0</span><span class=\"params\">(_DWORD *this, <span class=\"type\">int</span> flag)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  BOOL result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  this[<span class=\"number\">2</span>] = flag;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( sub_402500() )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sub_4026E0();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( sub_402A00() )</span><br><span class=\"line\">      result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>基本上关于虚函数在 IDA 中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-8\"><a class=\"anchor\" href=\"#一道逆向题-8\">#</a> 一道逆向题</h3>\n<p>SWPUCTF2019 easyRE，同样来到 main 函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> __cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  _DWORD v4[<span class=\"number\">28</span>]; <span class=\"comment\">// [esp-6Ch] [ebp-F8h] BYREF</span></span><br><span class=\"line\">  _DWORD *v5; <span class=\"comment\">// [esp+4h] [ebp-88h]</span></span><br><span class=\"line\">  _DWORD *v6; <span class=\"comment\">// [esp+8h] [ebp-84h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v7; <span class=\"comment\">// [esp+Ch] [ebp-80h]</span></span><br><span class=\"line\">  <span class=\"type\">char</span> v8[<span class=\"number\">108</span>]; <span class=\"comment\">// [esp+10h] [ebp-7Ch] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v9; <span class=\"comment\">// [esp+88h] [ebp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"built_in\">sub_40EF90</span>() )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sub_4026C0</span>(<span class=\"number\">0x6C</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">sub_401FE0</span>(v4[<span class=\"number\">27</span>], v5);</span><br><span class=\"line\">  v9 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v6 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F360</span>(v8);</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F080</span>(v4[<span class=\"number\">0</span>], v4[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  v5 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F360</span>(v8);</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F150</span>(argc, (<span class=\"type\">int</span>)argv);</span><br><span class=\"line\">  v7 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v9 = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sub_4021C0</span>(v8);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v7;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>进入 sub_401FE0:</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">_DWORD *__thiscall <span class=\"title\">sub_401FE0</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> i; <span class=\"comment\">// [esp+4h] [ebp-14h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  *<span class=\"keyword\">this</span> = &amp;EASYRE::`vftable<span class=\"number\">&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">52</span>) = <span class=\"number\">8</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">53</span>) = <span class=\"number\">-22</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">54</span>) = <span class=\"number\">88</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">55</span>) = <span class=\"number\">-34</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">56</span>) = <span class=\"number\">-108</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">57</span>) = <span class=\"number\">-48</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">58</span>) = <span class=\"number\">59</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">59</span>) = <span class=\"number\">-66</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">60</span>) = <span class=\"number\">-120</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">61</span>) = <span class=\"number\">-44</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">62</span>) = <span class=\"number\">50</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">63</span>) = <span class=\"number\">-74</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">64</span>) = <span class=\"number\">20</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">65</span>) = <span class=\"number\">-126</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">66</span>) = <span class=\"number\">-73</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">67</span>) = <span class=\"number\">-81</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">68</span>) = <span class=\"number\">20</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">69</span>) = <span class=\"number\">84</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">70</span>) = <span class=\"number\">127</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">71</span>) = <span class=\"number\">-49</span>;</span><br><span class=\"line\">  <span class=\"built_in\">qmemcpy</span>(<span class=\"keyword\">this</span> + <span class=\"number\">18</span>, <span class=\"string\">&quot;  03\\&quot;3   0 203\\&quot;   $ &quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">sub_4030A0</span>(<span class=\"keyword\">this</span> + <span class=\"number\">23</span>);</span><br><span class=\"line\">  <span class=\"built_in\">sub_402DE0</span>(<span class=\"keyword\">this</span> + <span class=\"number\">26</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">40</span>; ++i )</span><br><span class=\"line\">    *((_BYTE *)<span class=\"keyword\">this</span> + i + <span class=\"number\">12</span>) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<h2 id=\"reverse中虚函数虚表浅析-9\"><a class=\"anchor\" href=\"#reverse中虚函数虚表浅析-9\">#</a> Reverse 中虚函数 / 虚表浅析</h2>\n<h3 id=\"this指针-9\"><a class=\"anchor\" href=\"#this指针-9\">#</a> this 指针</h3>\n<p>在 C++ 的类中，需要研究一个非常重要并且特殊的指针就是 this 指针：</p>\n<p>一个简单的 demo 来测试一下 this 指针：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test</span>&#123;</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tTest* test = new Test;</span><br><span class=\"line\">\ttest-&gt;a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，直接取 test 的值就是 a 的值，这里的 test 就是 this 指针本身，而 this 指针的特性就是指向类的首地址，在对类进行内存分配时，this 指针会默认指向该类的首地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821809.png\" alt=\"image-20211231145134480\" /></p>\n<p><strong>关于类和结构体：其底层实现是一样的，所以 demo 中用 struct 和 class 的结果相同</strong></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221821374.png\" alt=\"image-20211231145838157\" /></p>\n<p>demo2：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func3</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Test::func3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func3&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTest* test = <span class=\"keyword\">new</span> Test;</span><br><span class=\"line\">\ttest-&gt;a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\ttest-&gt;<span class=\"built_in\">func1</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名：：方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为 <code>func1</code> 、 <code>func2</code> 、 <code>func3</code> ，我们注意到这里 call 的函数内容来自 <code>[edx]</code> 、 <code>[edx+4]</code> 、 <code>[edx+8]</code></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822350.png\" alt=\"image-20211231151743342\" /></p>\n<p>VS 的监视器中已经帮我们标注出来了，存在一个__vfptr，这里指针就是指向虚表的指针，对于一个类 or 结构体中，如果其虚函数的数量大于 1，那么编译器在初始化时会自动创建一个虚表，用来存储函数的地址，通过代码的编写顺序进行函数索引的映射，虚表中存放的就是函数定义的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822816.png\" alt=\"image-20211231152320103\" /></p>\n<p>但是在 VS 中默认开启了增量链接，所以此时虚表中指向的还是一个跳转地址，跳转地址之后才是函数真正的位置：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822113.png\" alt=\"image-20211231152713891\" /></p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822536.png\" alt=\"image-20211231152733713\" /></p>\n<h3 id=\"ida加载该程序-9\"><a class=\"anchor\" href=\"#ida加载该程序-9\">#</a> IDA 加载该程序</h3>\n<p>直接来到 main 函数：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main_0</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _DWORD *v4; <span class=\"comment\">// [esp+Ch] [ebp-DCh]</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *v5; <span class=\"comment\">// [esp+14h] [ebp-D4h]</span></span><br><span class=\"line\">  _DWORD *v6; <span class=\"comment\">// [esp+E0h] [ebp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  __CheckForDebuggerJustMyCode(&amp;unk_41C066);</span><br><span class=\"line\">  v5 = operator new(<span class=\"number\">0x10</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v5 )</span><br><span class=\"line\">    v4 = (_DWORD *)sub_411460(v5);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v6 = v4;</span><br><span class=\"line\">  v4[<span class=\"number\">1</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))*v6)(v6);</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">4</span>))(v6);</span><br><span class=\"line\">  (*(<span class=\"type\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">8</span>))(v6);</span><br><span class=\"line\">  sub_411442(<span class=\"string\">&quot;%d&quot;</span>, *v4);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据源码，这一部分就是虚函数调用在 IDA 中的反编译结果：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))*v6)(v6);</span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">4</span>))(v6);</span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*v6 + <span class=\"number\">8</span>))(v6);</span><br></pre></td></tr></table></figure></p>\n<p>这里 v6 是指向 v4，来到 v4 的初始化，可以看到存在一个 <code>virtual function table</code>  也就是虚函数表：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">_DWORD *__thiscall <span class=\"title\">sub_411880</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  *<span class=\"keyword\">this</span> = &amp;Test::`vftable<span class=\"number\">&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据前面 VS 中的调试可以知道这个表中存放的是增量链接：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822914.png\" alt=\"image-20211231160032664\" /></p>\n<p>基本上关于虚函数在 IDA 中的体现就介绍完了</p>\n<h3 id=\"一道逆向题-9\"><a class=\"anchor\" href=\"#一道逆向题-9\">#</a> 一道逆向题</h3>\n<p>SWPUCTF2019 easyRE，同样来到 main 函数，本文重点在虚函数的创建以及体现，其他部分不做分析：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> __cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  _DWORD v4[<span class=\"number\">28</span>]; <span class=\"comment\">// [esp-6Ch] [ebp-F8h] BYREF</span></span><br><span class=\"line\">  _DWORD *v5; <span class=\"comment\">// [esp+4h] [ebp-88h]</span></span><br><span class=\"line\">  _DWORD *v6; <span class=\"comment\">// [esp+8h] [ebp-84h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v7; <span class=\"comment\">// [esp+Ch] [ebp-80h]</span></span><br><span class=\"line\">  <span class=\"type\">char</span> v8[<span class=\"number\">108</span>]; <span class=\"comment\">// [esp+10h] [ebp-7Ch] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v9; <span class=\"comment\">// [esp+88h] [ebp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"built_in\">sub_40EF90</span>() )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sub_4026C0</span>(<span class=\"number\">0x6C</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">sub_401FE0</span>(v4[<span class=\"number\">27</span>], v5);</span><br><span class=\"line\">  v9 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v6 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F360</span>(v8);</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F080</span>(v4[<span class=\"number\">0</span>], v4[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  v5 = v4;</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F360</span>(v8);</span><br><span class=\"line\">  <span class=\"built_in\">sub_40F150</span>(argc, (<span class=\"type\">int</span>)argv);</span><br><span class=\"line\">  v7 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v9 = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sub_4021C0</span>(v8);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v7;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>进入 sub_401FE0:</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">_DWORD *__thiscall <span class=\"title\">sub_401FE0</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> i; <span class=\"comment\">// [esp+4h] [ebp-14h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  *<span class=\"keyword\">this</span> = &amp;EASYRE::`vftable<span class=\"number\">&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">52</span>) = <span class=\"number\">8</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">53</span>) = <span class=\"number\">-22</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">54</span>) = <span class=\"number\">88</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">55</span>) = <span class=\"number\">-34</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">56</span>) = <span class=\"number\">-108</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">57</span>) = <span class=\"number\">-48</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">58</span>) = <span class=\"number\">59</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">59</span>) = <span class=\"number\">-66</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">60</span>) = <span class=\"number\">-120</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">61</span>) = <span class=\"number\">-44</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">62</span>) = <span class=\"number\">50</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">63</span>) = <span class=\"number\">-74</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">64</span>) = <span class=\"number\">20</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">65</span>) = <span class=\"number\">-126</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">66</span>) = <span class=\"number\">-73</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">67</span>) = <span class=\"number\">-81</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">68</span>) = <span class=\"number\">20</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">69</span>) = <span class=\"number\">84</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">70</span>) = <span class=\"number\">127</span>;</span><br><span class=\"line\">  *((_BYTE *)<span class=\"keyword\">this</span> + <span class=\"number\">71</span>) = <span class=\"number\">-49</span>;</span><br><span class=\"line\">  <span class=\"built_in\">qmemcpy</span>(<span class=\"keyword\">this</span> + <span class=\"number\">18</span>, <span class=\"string\">&quot;  03\\&quot;3   0 203\\&quot;   $ &quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">sub_4030A0</span>(<span class=\"keyword\">this</span> + <span class=\"number\">23</span>);</span><br><span class=\"line\">  <span class=\"built_in\">sub_402DE0</span>(<span class=\"keyword\">this</span> + <span class=\"number\">26</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">40</span>; ++i )</span><br><span class=\"line\">    *((_BYTE *)<span class=\"keyword\">this</span> + i + <span class=\"number\">12</span>) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该题目中不存在增量链接，所以这里的虚函数表中指向的就是函数真正的地址：</p>\n<p><img data-src=\"https://gitee.com/YuSec2021/pic/raw/master/img/202202221822478.png\" alt=\"image-20211231160559928\" /></p>\n<p>来到校验 flag 的函数，可以发现存在虚函数的特征：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL __thiscall <span class=\"title\">sub_4024B0</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>, <span class=\"type\">int</span> flag)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  BOOL result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>[<span class=\"number\">2</span>] = flag;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0xC</span>))(<span class=\"keyword\">this</span>) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    (*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x18</span>))(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( (*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x28</span>))(<span class=\"keyword\">this</span>) )</span><br><span class=\"line\">      result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里 this 指针指向的首地址是 <code>0x4124E4</code> ，根据偏移可以映射：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0xC</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x4124F0</span> -&gt; <span class=\"built_in\">sub_402500</span></span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x18</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x4124FC</span> -&gt; <span class=\"built_in\">sub_4026E0</span></span><br><span class=\"line\">(*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x28</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x41250C</span> -&gt; sub_402A00</span><br></pre></td></tr></table></figure></p>\n<p>映射：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL __thiscall <span class=\"title function_\">sub_4024B0</span><span class=\"params\">(_DWORD *this, <span class=\"type\">int</span> flag)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  BOOL result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  this[<span class=\"number\">2</span>] = flag;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( sub_402500() )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sub_4026E0();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( sub_402A00() )</span><br><span class=\"line\">      result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>来到校验 flag 的函数，可以发现存在虚函数的特征：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL __thiscall <span class=\"title\">sub_4024B0</span><span class=\"params\">(_DWORD *<span class=\"keyword\">this</span>, <span class=\"type\">int</span> flag)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  BOOL result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>[<span class=\"number\">2</span>] = flag;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0xC</span>))(<span class=\"keyword\">this</span>) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    (*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x18</span>))(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( (*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x28</span>))(<span class=\"keyword\">this</span>) )</span><br><span class=\"line\">      result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里 this 指针指向的首地址是 <code>0x4124E4</code> ，根据偏移可以映射：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0xC</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x4124F0</span> -&gt; <span class=\"built_in\">sub_402500</span></span><br><span class=\"line\">(*(<span class=\"built_in\">void</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x18</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x4124FC</span> -&gt; <span class=\"built_in\">sub_4026E0</span></span><br><span class=\"line\">(*(<span class=\"built_in\">int</span> (__thiscall **)(_DWORD *))(*<span class=\"keyword\">this</span> + <span class=\"number\">0x28</span>))(<span class=\"keyword\">this</span>) -&gt; <span class=\"number\">0x41250C</span> -&gt; sub_402A00</span><br></pre></td></tr></table></figure></p>\n<p>映射：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL __thiscall <span class=\"title function_\">sub_4024B0</span><span class=\"params\">(_DWORD *this, <span class=\"type\">int</span> flag)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  BOOL result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  this[<span class=\"number\">2</span>] = flag;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( sub_402500() )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sub_4026E0();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( sub_402A00() )</span><br><span class=\"line\">      result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "C++"
            ]
        }
    ]
}