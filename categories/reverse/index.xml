<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reverse on YuSec2021</title>
    <link>https://YuSec2021.github.io/categories/reverse/</link>
    <description>Recent content in Reverse on YuSec2021</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://YuSec2021.github.io/categories/reverse/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reverse-DigitalCircuits</title>
      <link>https://YuSec2021.github.io/p/ctf/susctf2022_digitalcircuits/</link>
      <pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://YuSec2021.github.io/p/ctf/susctf2022_digitalcircuits/</guid>
      <description>SUSCTF 2022 DigitalCircuits 前置分析 下载是一个main.exe，根据ico可以知道是python生成的exe文件，python中通过pyinstaller进行py转exe，在默认情况下，并且只有一个exe文件，所以猜测应该是-F进行转换，所以此时可以尝试用pyinstxtractor进行解包：
生成一个_extracted文件夹：
进入文件夹找到同名的pyc文件，对比正常的stuct.pyc文件发现少了16个字节的py头：
将py头复制过去即可反编译，这里无法用在线反编译猜测应该是文件过大，所以采用python进行反编译：
1  pip3 install uncompyle6   反编译（需要注意python的版本，3.9以上的好像反编译会失败）
1  uncompyle6 -o ./ DigitalCircuits.pyc   基础功能代码分析 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105  # uncompyle6 version 3.</description>
    </item>
    
    <item>
      <title>babymips</title>
      <link>https://YuSec2021.github.io/p/ctf/utctf2020_babymips/</link>
      <pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://YuSec2021.github.io/p/ctf/utctf2020_babymips/</guid>
      <description>[UTCTF2020]babymips 0x00 MIPS的指令：
IDA可以直接反编译出MIPS的伪代码，所以我们直接看伪代码即可，可以看到是C++语法：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  int __cdecl main(int argc, const char **argv, const char **envp) { int v3; // $v0  char v5[24]; // [sp+18h] [+18h] BYREF  char v6[24]; // [sp+30h] [+30h] BYREF  char v7[84]; // [sp+48h] [+48h] BYREF  std::__cxx11::basic_string&amp;lt;char,std::char_traits&amp;lt;char&amp;gt;,std::allocator&amp;lt;char&amp;gt;&amp;gt;::basic_string(v5, argv, envp); v3 = std::operator&amp;lt;&amp;lt;&amp;lt;std::char_traits&amp;lt;char&amp;gt;&amp;gt;(&amp;amp;std::cout, &amp;#34;enter the flag&amp;#34;); std::ostream::operator&amp;lt;&amp;lt;(v3, &amp;amp;std::endl&amp;lt;char,std::char_traits&amp;lt;char&amp;gt;&amp;gt;); std::operator&amp;gt;&amp;gt;&amp;lt;char&amp;gt;(&amp;amp;std::cin, v5); memcpy(v7, &amp;amp;unk_4015F4, sizeof(v7)); std::__cxx11::basic_string&amp;lt;char,std::char_traits&amp;lt;char&amp;gt;,std::allocator&amp;lt;char&amp;gt;&amp;gt;::basic_string(v6, v5); sub_401164(v7, v6); std::__cxx11::basic_string&amp;lt;char,std::char_traits&amp;lt;char&amp;gt;,std::allocator&amp;lt;char&amp;gt;&amp;gt;::~basic_string(v6); std::__cxx11::basic_string&amp;lt;char,std::char_traits&amp;lt;char&amp;gt;,std::allocator&amp;lt;char&amp;gt;&amp;gt;::~basic_string(v5); return 0; }   关键函数：sub_401164传入两个参数，一个是v7，将unk_4015F4复制，一个是v6，就是输入的flag</description>
    </item>
    
    <item>
      <title>DontEatMe 详细分析及解题过程</title>
      <link>https://YuSec2021.github.io/p/ctf/rctf2019_donteatme/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://YuSec2021.github.io/p/ctf/rctf2019_donteatme/</guid>
      <description>[RCTF2019]DontEatMe 去反调试 EXE文件，IDA反编译：
通过srand固定时间戳生成伪随机数，然后在调用rand之前，有一段反调试：
拿到Ntdll的模块句柄，从句柄中查找ZwSetInformationThread的地址，然后调用这个函数去检查当前线程是否处于Debug模式下：
1 2 3 4  v3 = GetModuleHandleA(&amp;#34;Ntdll&amp;#34;); ZwSetInformationThread = GetProcAddress(v3, &amp;#34;ZwSetInformationThread&amp;#34;); v5 = GetCurrentThread(); ((void (__stdcall *)(HANDLE, int, _DWORD, _DWORD))ZwSetInformationThread)(v5, 17, 0, 0);   关于ZwSetInformationThread的类型：
1 2 3 4 5 6  typedef NTSTATUS(NTAPI* pZwSetInformationThread)( IN HANDLE ThreadHandle,	// 线程对象句柄 	IN THREAD_INFO_CLASS ThreadInformaitonClass,	// 线程信息类型 	IN PVOID ThreadInformation,	// 线程信息指针 	IN ULONG ThreadInformationLength	// 线程信息大小 );   线程信息类型为枚举类型：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  typedef enum _THREADINFOCLASS { ThreadBasicInformation, ThreadTimes, ThreadPriority, ThreadBasePriority, ThreadAffinityMask, ThreadImpersonationToken, ThreadDescriptorTableEntry, ThreadEnableAlignmentFaultFixup, ThreadEventPair, ThreadQuerySetWin32StartAddress, ThreadZeroTlsCell, ThreadPerformanceCount, ThreadAmILastThread, ThreadIdealProcessor, ThreadPriorityBoost, ThreadSetTlsArrayAddress, ThreadIsIoPending, ThreadHideFromDebugger }THREAD_INFO_CLASS;   该程序中载入的参数就是ThreadHideFromDebugger，此时如果检测到处理Debugger模式就会将该线程强制分离出调试器，该函数与IsDebuggerPresent类似都是用于反调试的</description>
    </item>
    
    <item>
      <title>easyRE 解题脚本及详细分析过程</title>
      <link>https://YuSec2021.github.io/p/ctf/swpuctf2019_easyre/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://YuSec2021.github.io/p/ctf/swpuctf2019_easyre/</guid>
      <description>[SWPU2019]easyRE main函数：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  int __cdecl main(int argc, const char **argv, const char **envp) { _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF  _DWORD *v5; // [esp+4h] [ebp-88h]  _DWORD *v6; // [esp+8h] [ebp-84h]  int v7; // [esp+Ch] [ebp-80h]  char v8[108]; // [esp+10h] [ebp-7Ch] BYREF  int v9; // [esp+88h] [ebp-4h]  if ( sub_40EF90() ) return 1; sub_4026C0(0x6Cu); sub_401FE0(v4[27], v5); v9 = 0; v6 = v4; sub_40F360(v8); sub_40F080(v4[0], v4[1]); v5 = v4; sub_40F360(v8); sub_40F150(argc, (int)argv); v7 = 0; v9 = -1; sub_4021C0(v8); return v7; }   首先调用sub_40EF90进行check：</description>
    </item>
    
    <item>
      <title>SimpleRE 分析及解题脚本</title>
      <link>https://YuSec2021.github.io/p/ctf/qiangwang_re/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://YuSec2021.github.io/p/ctf/qiangwang_re/</guid>
      <description>解题 ELF64程序，无壳，IDA反编译main函数，这里我稍微做了重命名，看起来比较清楚：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  __int64 __fastcall main(int a1, char **a2, char **a3) { __int64 result; // rax  char suf_flag[33]; // [rsp+0h] [rbp-250h] BYREF  char pre_flag[15]; // [rsp+21h] [rbp-22Fh] BYREF  char v6[256]; // [rsp+30h] [rbp-220h] BYREF  char encode_flag[256]; // [rsp+130h] [rbp-120h] BYREF  void *src; // [rsp+230h] [rbp-20h]  void *dest; // [rsp+238h] [rbp-18h]  int v10; // [rsp+244h] [rbp-Ch]  int j; // [rsp+248h] [rbp-8h]  int i; // [rsp+24Ch] [rbp-4h]  printf(&amp;#34;your flag:&amp;#34;); __isoc99_scanf(&amp;#34;%s&amp;#34;, v6); putchar(10); if ( v6[15] == &amp;#39;-&amp;#39; ) { for ( i = 0; i &amp;lt;= 14; ++i ) pre_flag[i] = v6[i]; for ( j = 0; j &amp;lt;= 17; ++j ) suf_flag[j] = v6[j + 16]; v10 = decode_puzzle((__int64)pre_flag); if ( v10 == 1 ) { dest = mmap(0LL, 0x1000uLL, 7, 33, -1, 0LL); src = (void *)generate_machine_code(); memcpy(dest, src, 0x28CuLL); ((void (__fastcall *)(char *, char *, void *))dest)(encode_flag, suf_flag, &amp;amp;unk_404320); v10 = check_encode(encode_flag); if ( v10 ) puts(&amp;#34;congratulations!</description>
    </item>
    
    <item>
      <title>Splendid_Minecraft 解析及脚本</title>
      <link>https://YuSec2021.github.io/p/ctf/actf2020_splendid_minecraft/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://YuSec2021.github.io/p/ctf/actf2020_splendid_minecraft/</guid>
      <description>[ACTF新生赛2020]Splendid_MineCraft 解密字节码 反编译源码：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  int __cdecl main(int argc, const char **argv, const char **envp) { char *v3; // eax  char *v4; // eax  char v6; // [esp+0h] [ebp-68h]  int i; // [esp+14h] [ebp-54h]  char *v8; // [esp+18h] [ebp-50h]  char v9; // [esp+20h] [ebp-48h]  char flag[25]; // [esp+24h] [ebp-44h] BYREF  char v11[25]; // [esp+25h] [ebp-43h] BYREF  char v12; // [esp+3Dh] [ebp-2Bh]  int v13; // [esp+44h] [ebp-24h]  __int16 v14; // [esp+48h] [ebp-20h]  char v15[4]; // [esp+4Ch] [ebp-1Ch]  __int16 v16; // [esp+50h] [ebp-18h]  int v17; // [esp+54h] [ebp-14h] BYREF  __int16 v18; // [esp+58h] [ebp-10h]  int v19; // [esp+5Ch] [ebp-Ch]  __int16 v20; // [esp+60h] [ebp-8h]  sub_401020(&amp;#34;%s\n&amp;#34;, (char)aWelcomeToActfS); sub_401050(&amp;#34;%s&amp;#34;, (char)flag); if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !</description>
    </item>
    
    <item>
      <title>虚函数以及虚表在IDA中的体现</title>
      <link>https://YuSec2021.github.io/p/tech/vfunc_vtable/</link>
      <pubDate>Fri, 25 Feb 2022 10:16:02 +0800</pubDate>
      
      <guid>https://YuSec2021.github.io/p/tech/vfunc_vtable/</guid>
      <description>Reverse中虚函数/虚表浅析 this指针 在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：
一个简单的demo来测试一下this指针：
1 2 3 4 5 6 7 8 9 10  int main() { struct Test{ int a; int b; int c; }; Test* test = new Test; test-&amp;gt;a = 100; printf(&amp;#34;%d&amp;#34;, *test); }   可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：
关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同
demo2：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  #include &amp;lt;iostream&amp;gt;using namespace std; struct Test { int a; int b; int c; virtual void func1(); virtual void func2(); virtual void func3(); }; void Test::func1() { printf(&amp;#34;func1&amp;#34;); } void Test::func2() { printf(&amp;#34;func2&amp;#34;); } void Test::func3() { printf(&amp;#34;func3&amp;#34;); } int main() { Test* test = new Test; test-&amp;gt;a = 100; test-&amp;gt;func1(); printf(&amp;#34;%d&amp;#34;, *test); }   这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为func1、func2、func3，我们注意到这里call的函数内容来自[edx]、[edx+4]、[edx+8]</description>
    </item>
    
  </channel>
</rss>
