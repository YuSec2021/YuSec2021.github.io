<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reverse on YuSec2021</title>
    <link>https://YuSec2021.github.io/categories/reverse/</link>
    <description>Recent content in Reverse on YuSec2021</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Feb 2022 10:16:02 +0800</lastBuildDate><atom:link href="https://YuSec2021.github.io/categories/reverse/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[ACTF新生赛2020]Splendid_MineCraft</title>
      <link>https://YuSec2021.github.io/p/actf%E6%96%B0%E7%94%9F%E8%B5%9B2020splendid_minecraft/</link>
      <pubDate>Fri, 25 Feb 2022 10:16:02 +0800</pubDate>
      
      <guid>https://YuSec2021.github.io/p/actf%E6%96%B0%E7%94%9F%E8%B5%9B2020splendid_minecraft/</guid>
      <description>[ACTF新生赛2020]Splendid_MineCraft 反编译源码：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  int __cdecl main(int argc, const char **argv, const char **envp) { char *v3; // eax  char *v4; // eax  char v6; // [esp+0h] [ebp-68h]  int i; // [esp+14h] [ebp-54h]  char *v8; // [esp+18h] [ebp-50h]  char v9; // [esp+20h] [ebp-48h]  char flag[25]; // [esp+24h] [ebp-44h] BYREF  char v11[25]; // [esp+25h] [ebp-43h] BYREF  char v12; // [esp+3Dh] [ebp-2Bh]  int v13; // [esp+44h] [ebp-24h]  __int16 v14; // [esp+48h] [ebp-20h]  char v15[4]; // [esp+4Ch] [ebp-1Ch]  __int16 v16; // [esp+50h] [ebp-18h]  int v17; // [esp+54h] [ebp-14h] BYREF  __int16 v18; // [esp+58h] [ebp-10h]  int v19; // [esp+5Ch] [ebp-Ch]  __int16 v20; // [esp+60h] [ebp-8h]  sub_401020(&amp;#34;%s\n&amp;#34;, (char)aWelcomeToActfS); sub_401050(&amp;#34;%s&amp;#34;, (char)flag); if ( &amp;amp;flag[strlen(flag) + 1] - v11 == 26 &amp;amp;&amp;amp; !</description>
    </item>
    
    <item>
      <title>虚函数以及虚表在IDA中的体现</title>
      <link>https://YuSec2021.github.io/p/%E8%99%9A%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8A%E8%99%9A%E8%A1%A8%E5%9C%A8ida%E4%B8%AD%E7%9A%84%E4%BD%93%E7%8E%B0/</link>
      <pubDate>Fri, 25 Feb 2022 10:16:02 +0800</pubDate>
      
      <guid>https://YuSec2021.github.io/p/%E8%99%9A%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8A%E8%99%9A%E8%A1%A8%E5%9C%A8ida%E4%B8%AD%E7%9A%84%E4%BD%93%E7%8E%B0/</guid>
      <description>Reverse中虚函数/虚表浅析 this指针 在C++的类中，需要研究一个非常重要并且特殊的指针就是this指针：
一个简单的demo来测试一下this指针：
1 2 3 4 5 6 7 8 9 10  int main() { struct Test{ int a; int b; int c; }; Test* test = new Test; test-&amp;gt;a = 100; printf(&amp;#34;%d&amp;#34;, *test); }   可以看到，直接取test的值就是a的值，这里的test就是this指针本身，而this指针的特性就是指向类的首地址，在对类进行内存分配时，this指针会默认指向该类的首地址：
关于类和结构体：其底层实现是一样的，所以demo中用struct和class的结果相同
demo2：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  #include &amp;lt;iostream&amp;gt;using namespace std; struct Test { int a; int b; int c; virtual void func1(); virtual void func2(); virtual void func3(); }; void Test::func1() { printf(&amp;#34;func1&amp;#34;); } void Test::func2() { printf(&amp;#34;func2&amp;#34;); } void Test::func3() { printf(&amp;#34;func3&amp;#34;); } int main() { Test* test = new Test; test-&amp;gt;a = 100; test-&amp;gt;func1(); printf(&amp;#34;%d&amp;#34;, *test); }   这里我定义了一个结构体，带着三个虚函数，虚函数需要定义，通过结构体名::方法名的形式进行定义，重点在实例化对象调用函数的位置，调试来到反汇编窗口，红框中标注的为实际调用函数的位置，这里我们在声明结构体时从上到下的声明为func1、func2、func3，我们注意到这里call的函数内容来自[edx]、[edx+4]、[edx+8]</description>
    </item>
    
  </channel>
</rss>
